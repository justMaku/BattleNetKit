// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: LogonResult.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct LogonResult: SwiftProtobuf.Message {
  static let protoMessageName: String = "LogonResult"

  var errorCode: UInt32 {
    get {return _storage._errorCode ?? 0}
    set {_uniqueStorage()._errorCode = newValue}
  }
  /// Returns true if `errorCode` has been explicitly set.
  var hasErrorCode: Bool {return _storage._errorCode != nil}
  /// Clears the value of `errorCode`. Subsequent reads from it will return its default value.
  mutating func clearErrorCode() {_storage._errorCode = nil}

  var account: EntityId {
    get {return _storage._account ?? EntityId()}
    set {_uniqueStorage()._account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  var hasAccount: Bool {return _storage._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  mutating func clearAccount() {_storage._account = nil}

  var gameAccount: [EntityId] {
    get {return _storage._gameAccount}
    set {_uniqueStorage()._gameAccount = newValue}
  }

  var email: String {
    get {return _storage._email ?? String()}
    set {_uniqueStorage()._email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  var hasEmail: Bool {return _storage._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  mutating func clearEmail() {_storage._email = nil}

  var availableRegion: [UInt32] {
    get {return _storage._availableRegion}
    set {_uniqueStorage()._availableRegion = newValue}
  }

  var connectedRegion: UInt32 {
    get {return _storage._connectedRegion ?? 0}
    set {_uniqueStorage()._connectedRegion = newValue}
  }
  /// Returns true if `connectedRegion` has been explicitly set.
  var hasConnectedRegion: Bool {return _storage._connectedRegion != nil}
  /// Clears the value of `connectedRegion`. Subsequent reads from it will return its default value.
  mutating func clearConnectedRegion() {_storage._connectedRegion = nil}

  var battleTag: String {
    get {return _storage._battleTag ?? String()}
    set {_uniqueStorage()._battleTag = newValue}
  }
  /// Returns true if `battleTag` has been explicitly set.
  var hasBattleTag: Bool {return _storage._battleTag != nil}
  /// Clears the value of `battleTag`. Subsequent reads from it will return its default value.
  mutating func clearBattleTag() {_storage._battleTag = nil}

  var geoipCountry: String {
    get {return _storage._geoipCountry ?? String()}
    set {_uniqueStorage()._geoipCountry = newValue}
  }
  /// Returns true if `geoipCountry` has been explicitly set.
  var hasGeoipCountry: Bool {return _storage._geoipCountry != nil}
  /// Clears the value of `geoipCountry`. Subsequent reads from it will return its default value.
  mutating func clearGeoipCountry() {_storage._geoipCountry = nil}

  var sessionKey: Data {
    get {return _storage._sessionKey ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._sessionKey = newValue}
  }
  /// Returns true if `sessionKey` has been explicitly set.
  var hasSessionKey: Bool {return _storage._sessionKey != nil}
  /// Clears the value of `sessionKey`. Subsequent reads from it will return its default value.
  mutating func clearSessionKey() {_storage._sessionKey = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._errorCode)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._account)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._gameAccount)
        case 4: try decoder.decodeSingularStringField(value: &_storage._email)
        case 5: try decoder.decodeRepeatedUInt32Field(value: &_storage._availableRegion)
        case 6: try decoder.decodeSingularUInt32Field(value: &_storage._connectedRegion)
        case 7: try decoder.decodeSingularStringField(value: &_storage._battleTag)
        case 8: try decoder.decodeSingularStringField(value: &_storage._geoipCountry)
        case 9: try decoder.decodeSingularBytesField(value: &_storage._sessionKey)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._errorCode {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._gameAccount.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gameAccount, fieldNumber: 3)
      }
      if let v = _storage._email {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if !_storage._availableRegion.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._availableRegion, fieldNumber: 5)
      }
      if let v = _storage._connectedRegion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._battleTag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if let v = _storage._geoipCountry {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if let v = _storage._sessionKey {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension LogonResult: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_code"),
    2: .same(proto: "account"),
    3: .standard(proto: "game_account"),
    4: .same(proto: "email"),
    5: .standard(proto: "available_region"),
    6: .standard(proto: "connected_region"),
    7: .standard(proto: "battle_tag"),
    8: .standard(proto: "geoip_country"),
    9: .standard(proto: "session_key"),
  ]

  fileprivate class _StorageClass {
    var _errorCode: UInt32? = nil
    var _account: EntityId? = nil
    var _gameAccount: [EntityId] = []
    var _email: String? = nil
    var _availableRegion: [UInt32] = []
    var _connectedRegion: UInt32? = nil
    var _battleTag: String? = nil
    var _geoipCountry: String? = nil
    var _sessionKey: Data? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _errorCode = source._errorCode
      _account = source._account
      _gameAccount = source._gameAccount
      _email = source._email
      _availableRegion = source._availableRegion
      _connectedRegion = source._connectedRegion
      _battleTag = source._battleTag
      _geoipCountry = source._geoipCountry
      _sessionKey = source._sessionKey
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: LogonResult) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._errorCode != other_storage._errorCode {return false}
        if _storage._account != other_storage._account {return false}
        if _storage._gameAccount != other_storage._gameAccount {return false}
        if _storage._email != other_storage._email {return false}
        if _storage._availableRegion != other_storage._availableRegion {return false}
        if _storage._connectedRegion != other_storage._connectedRegion {return false}
        if _storage._battleTag != other_storage._battleTag {return false}
        if _storage._geoipCountry != other_storage._geoipCountry {return false}
        if _storage._sessionKey != other_storage._sessionKey {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
