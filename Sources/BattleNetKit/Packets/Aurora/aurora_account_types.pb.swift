// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/account_types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Bgs_Protocol_Account_V1_IdentityVerificationStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case identNoData // = 0
  case identPending // = 1
  case identOver18 // = 2
  case identUnder18 // = 3
  case identFailed // = 4
  case identSuccess // = 5
  case identSuccMnl // = 6
  case identUnknown // = 7

  public init() {
    self = .identNoData
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .identNoData
    case 1: self = .identPending
    case 2: self = .identOver18
    case 3: self = .identUnder18
    case 4: self = .identFailed
    case 5: self = .identSuccess
    case 6: self = .identSuccMnl
    case 7: self = .identUnknown
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .identNoData: return 0
    case .identPending: return 1
    case .identOver18: return 2
    case .identUnder18: return 3
    case .identFailed: return 4
    case .identSuccess: return 5
    case .identSuccMnl: return 6
    case .identUnknown: return 7
    }
  }

}

#if swift(>=4.2)

extension Bgs_Protocol_Account_V1_IdentityVerificationStatus: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct Bgs_Protocol_Account_V1_AccountId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: UInt32? = nil
}

public struct Bgs_Protocol_Account_V1_AccountLicense {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var expires: UInt64 {
    get {return _expires ?? 0}
    set {_expires = newValue}
  }
  /// Returns true if `expires` has been explicitly set.
  public var hasExpires: Bool {return self._expires != nil}
  /// Clears the value of `expires`. Subsequent reads from it will return its default value.
  public mutating func clearExpires() {self._expires = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: UInt32? = nil
  fileprivate var _expires: UInt64? = nil
}

public struct Bgs_Protocol_Account_V1_GameAccountHandle {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var region: UInt32 {
    get {return _region ?? 0}
    set {_region = newValue}
  }
  /// Returns true if `region` has been explicitly set.
  public var hasRegion: Bool {return self._region != nil}
  /// Clears the value of `region`. Subsequent reads from it will return its default value.
  public mutating func clearRegion() {self._region = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: UInt32? = nil
  fileprivate var _program: UInt32? = nil
  fileprivate var _region: UInt32? = nil
}

public struct Bgs_Protocol_Account_V1_AccountReference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt32 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var email: String {
    get {return _storage._email ?? String()}
    set {_uniqueStorage()._email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  public var hasEmail: Bool {return _storage._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  public mutating func clearEmail() {_uniqueStorage()._email = nil}

  public var handle: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._handle ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._handle = newValue}
  }
  /// Returns true if `handle` has been explicitly set.
  public var hasHandle: Bool {return _storage._handle != nil}
  /// Clears the value of `handle`. Subsequent reads from it will return its default value.
  public mutating func clearHandle() {_uniqueStorage()._handle = nil}

  public var battleTag: String {
    get {return _storage._battleTag ?? String()}
    set {_uniqueStorage()._battleTag = newValue}
  }
  /// Returns true if `battleTag` has been explicitly set.
  public var hasBattleTag: Bool {return _storage._battleTag != nil}
  /// Clears the value of `battleTag`. Subsequent reads from it will return its default value.
  public mutating func clearBattleTag() {_uniqueStorage()._battleTag = nil}

  public var region: UInt32 {
    get {return _storage._region ?? 0}
    set {_uniqueStorage()._region = newValue}
  }
  /// Returns true if `region` has been explicitly set.
  public var hasRegion: Bool {return _storage._region != nil}
  /// Clears the value of `region`. Subsequent reads from it will return its default value.
  public mutating func clearRegion() {_uniqueStorage()._region = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Account_V1_Identity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._account ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._account = newValue}
  }
  /// Returns true if `account` has been explicitly set.
  public var hasAccount: Bool {return _storage._account != nil}
  /// Clears the value of `account`. Subsequent reads from it will return its default value.
  public mutating func clearAccount() {_uniqueStorage()._account = nil}

  public var gameAccount: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._gameAccount ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._gameAccount = newValue}
  }
  /// Returns true if `gameAccount` has been explicitly set.
  public var hasGameAccount: Bool {return _storage._gameAccount != nil}
  /// Clears the value of `gameAccount`. Subsequent reads from it will return its default value.
  public mutating func clearGameAccount() {_uniqueStorage()._gameAccount = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Account_V1_ProgramTag {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var tag: UInt32 {
    get {return _tag ?? 0}
    set {_tag = newValue}
  }
  /// Returns true if `tag` has been explicitly set.
  public var hasTag: Bool {return self._tag != nil}
  /// Clears the value of `tag`. Subsequent reads from it will return its default value.
  public mutating func clearTag() {self._tag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _program: UInt32? = nil
  fileprivate var _tag: UInt32? = nil
}

public struct Bgs_Protocol_Account_V1_RegionTag {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var region: UInt32 {
    get {return _region ?? 0}
    set {_region = newValue}
  }
  /// Returns true if `region` has been explicitly set.
  public var hasRegion: Bool {return self._region != nil}
  /// Clears the value of `region`. Subsequent reads from it will return its default value.
  public mutating func clearRegion() {self._region = nil}

  public var tag: UInt32 {
    get {return _tag ?? 0}
    set {_tag = newValue}
  }
  /// Returns true if `tag` has been explicitly set.
  public var hasTag: Bool {return self._tag != nil}
  /// Clears the value of `tag`. Subsequent reads from it will return its default value.
  public mutating func clearTag() {self._tag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _region: UInt32? = nil
  fileprivate var _tag: UInt32? = nil
}

public struct Bgs_Protocol_Account_V1_AccountFieldTags {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountLevelInfoTag: UInt32 {
    get {return _accountLevelInfoTag ?? 0}
    set {_accountLevelInfoTag = newValue}
  }
  /// Returns true if `accountLevelInfoTag` has been explicitly set.
  public var hasAccountLevelInfoTag: Bool {return self._accountLevelInfoTag != nil}
  /// Clears the value of `accountLevelInfoTag`. Subsequent reads from it will return its default value.
  public mutating func clearAccountLevelInfoTag() {self._accountLevelInfoTag = nil}

  public var privacyInfoTag: UInt32 {
    get {return _privacyInfoTag ?? 0}
    set {_privacyInfoTag = newValue}
  }
  /// Returns true if `privacyInfoTag` has been explicitly set.
  public var hasPrivacyInfoTag: Bool {return self._privacyInfoTag != nil}
  /// Clears the value of `privacyInfoTag`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacyInfoTag() {self._privacyInfoTag = nil}

  public var parentalControlInfoTag: UInt32 {
    get {return _parentalControlInfoTag ?? 0}
    set {_parentalControlInfoTag = newValue}
  }
  /// Returns true if `parentalControlInfoTag` has been explicitly set.
  public var hasParentalControlInfoTag: Bool {return self._parentalControlInfoTag != nil}
  /// Clears the value of `parentalControlInfoTag`. Subsequent reads from it will return its default value.
  public mutating func clearParentalControlInfoTag() {self._parentalControlInfoTag = nil}

  public var gameLevelInfoTags: [Bgs_Protocol_Account_V1_ProgramTag] = []

  public var gameStatusTags: [Bgs_Protocol_Account_V1_ProgramTag] = []

  public var gameAccountTags: [Bgs_Protocol_Account_V1_RegionTag] = []

  public var securityStatusTag: UInt32 {
    get {return _securityStatusTag ?? 0}
    set {_securityStatusTag = newValue}
  }
  /// Returns true if `securityStatusTag` has been explicitly set.
  public var hasSecurityStatusTag: Bool {return self._securityStatusTag != nil}
  /// Clears the value of `securityStatusTag`. Subsequent reads from it will return its default value.
  public mutating func clearSecurityStatusTag() {self._securityStatusTag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _accountLevelInfoTag: UInt32? = nil
  fileprivate var _privacyInfoTag: UInt32? = nil
  fileprivate var _parentalControlInfoTag: UInt32? = nil
  fileprivate var _securityStatusTag: UInt32? = nil
}

public struct Bgs_Protocol_Account_V1_GameAccountFieldTags {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameLevelInfoTag: UInt32 {
    get {return _gameLevelInfoTag ?? 0}
    set {_gameLevelInfoTag = newValue}
  }
  /// Returns true if `gameLevelInfoTag` has been explicitly set.
  public var hasGameLevelInfoTag: Bool {return self._gameLevelInfoTag != nil}
  /// Clears the value of `gameLevelInfoTag`. Subsequent reads from it will return its default value.
  public mutating func clearGameLevelInfoTag() {self._gameLevelInfoTag = nil}

  public var gameTimeInfoTag: UInt32 {
    get {return _gameTimeInfoTag ?? 0}
    set {_gameTimeInfoTag = newValue}
  }
  /// Returns true if `gameTimeInfoTag` has been explicitly set.
  public var hasGameTimeInfoTag: Bool {return self._gameTimeInfoTag != nil}
  /// Clears the value of `gameTimeInfoTag`. Subsequent reads from it will return its default value.
  public mutating func clearGameTimeInfoTag() {self._gameTimeInfoTag = nil}

  public var gameStatusTag: UInt32 {
    get {return _gameStatusTag ?? 0}
    set {_gameStatusTag = newValue}
  }
  /// Returns true if `gameStatusTag` has been explicitly set.
  public var hasGameStatusTag: Bool {return self._gameStatusTag != nil}
  /// Clears the value of `gameStatusTag`. Subsequent reads from it will return its default value.
  public mutating func clearGameStatusTag() {self._gameStatusTag = nil}

  public var rafInfoTag: UInt32 {
    get {return _rafInfoTag ?? 0}
    set {_rafInfoTag = newValue}
  }
  /// Returns true if `rafInfoTag` has been explicitly set.
  public var hasRafInfoTag: Bool {return self._rafInfoTag != nil}
  /// Clears the value of `rafInfoTag`. Subsequent reads from it will return its default value.
  public mutating func clearRafInfoTag() {self._rafInfoTag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _gameLevelInfoTag: UInt32? = nil
  fileprivate var _gameTimeInfoTag: UInt32? = nil
  fileprivate var _gameStatusTag: UInt32? = nil
  fileprivate var _rafInfoTag: UInt32? = nil
}

public struct Bgs_Protocol_Account_V1_AccountFieldOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var allFields: Bool {
    get {return _allFields ?? false}
    set {_allFields = newValue}
  }
  /// Returns true if `allFields` has been explicitly set.
  public var hasAllFields: Bool {return self._allFields != nil}
  /// Clears the value of `allFields`. Subsequent reads from it will return its default value.
  public mutating func clearAllFields() {self._allFields = nil}

  public var fieldAccountLevelInfo: Bool {
    get {return _fieldAccountLevelInfo ?? false}
    set {_fieldAccountLevelInfo = newValue}
  }
  /// Returns true if `fieldAccountLevelInfo` has been explicitly set.
  public var hasFieldAccountLevelInfo: Bool {return self._fieldAccountLevelInfo != nil}
  /// Clears the value of `fieldAccountLevelInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFieldAccountLevelInfo() {self._fieldAccountLevelInfo = nil}

  public var fieldPrivacyInfo: Bool {
    get {return _fieldPrivacyInfo ?? false}
    set {_fieldPrivacyInfo = newValue}
  }
  /// Returns true if `fieldPrivacyInfo` has been explicitly set.
  public var hasFieldPrivacyInfo: Bool {return self._fieldPrivacyInfo != nil}
  /// Clears the value of `fieldPrivacyInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFieldPrivacyInfo() {self._fieldPrivacyInfo = nil}

  public var fieldParentalControlInfo: Bool {
    get {return _fieldParentalControlInfo ?? false}
    set {_fieldParentalControlInfo = newValue}
  }
  /// Returns true if `fieldParentalControlInfo` has been explicitly set.
  public var hasFieldParentalControlInfo: Bool {return self._fieldParentalControlInfo != nil}
  /// Clears the value of `fieldParentalControlInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFieldParentalControlInfo() {self._fieldParentalControlInfo = nil}

  public var fieldGameLevelInfo: Bool {
    get {return _fieldGameLevelInfo ?? false}
    set {_fieldGameLevelInfo = newValue}
  }
  /// Returns true if `fieldGameLevelInfo` has been explicitly set.
  public var hasFieldGameLevelInfo: Bool {return self._fieldGameLevelInfo != nil}
  /// Clears the value of `fieldGameLevelInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFieldGameLevelInfo() {self._fieldGameLevelInfo = nil}

  public var fieldGameStatus: Bool {
    get {return _fieldGameStatus ?? false}
    set {_fieldGameStatus = newValue}
  }
  /// Returns true if `fieldGameStatus` has been explicitly set.
  public var hasFieldGameStatus: Bool {return self._fieldGameStatus != nil}
  /// Clears the value of `fieldGameStatus`. Subsequent reads from it will return its default value.
  public mutating func clearFieldGameStatus() {self._fieldGameStatus = nil}

  public var fieldGameAccounts: Bool {
    get {return _fieldGameAccounts ?? false}
    set {_fieldGameAccounts = newValue}
  }
  /// Returns true if `fieldGameAccounts` has been explicitly set.
  public var hasFieldGameAccounts: Bool {return self._fieldGameAccounts != nil}
  /// Clears the value of `fieldGameAccounts`. Subsequent reads from it will return its default value.
  public mutating func clearFieldGameAccounts() {self._fieldGameAccounts = nil}

  public var fieldSecurityStatus: Bool {
    get {return _fieldSecurityStatus ?? false}
    set {_fieldSecurityStatus = newValue}
  }
  /// Returns true if `fieldSecurityStatus` has been explicitly set.
  public var hasFieldSecurityStatus: Bool {return self._fieldSecurityStatus != nil}
  /// Clears the value of `fieldSecurityStatus`. Subsequent reads from it will return its default value.
  public mutating func clearFieldSecurityStatus() {self._fieldSecurityStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _allFields: Bool? = nil
  fileprivate var _fieldAccountLevelInfo: Bool? = nil
  fileprivate var _fieldPrivacyInfo: Bool? = nil
  fileprivate var _fieldParentalControlInfo: Bool? = nil
  fileprivate var _fieldGameLevelInfo: Bool? = nil
  fileprivate var _fieldGameStatus: Bool? = nil
  fileprivate var _fieldGameAccounts: Bool? = nil
  fileprivate var _fieldSecurityStatus: Bool? = nil
}

public struct Bgs_Protocol_Account_V1_GameAccountFieldOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var allFields: Bool {
    get {return _allFields ?? false}
    set {_allFields = newValue}
  }
  /// Returns true if `allFields` has been explicitly set.
  public var hasAllFields: Bool {return self._allFields != nil}
  /// Clears the value of `allFields`. Subsequent reads from it will return its default value.
  public mutating func clearAllFields() {self._allFields = nil}

  public var fieldGameLevelInfo: Bool {
    get {return _fieldGameLevelInfo ?? false}
    set {_fieldGameLevelInfo = newValue}
  }
  /// Returns true if `fieldGameLevelInfo` has been explicitly set.
  public var hasFieldGameLevelInfo: Bool {return self._fieldGameLevelInfo != nil}
  /// Clears the value of `fieldGameLevelInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFieldGameLevelInfo() {self._fieldGameLevelInfo = nil}

  public var fieldGameTimeInfo: Bool {
    get {return _fieldGameTimeInfo ?? false}
    set {_fieldGameTimeInfo = newValue}
  }
  /// Returns true if `fieldGameTimeInfo` has been explicitly set.
  public var hasFieldGameTimeInfo: Bool {return self._fieldGameTimeInfo != nil}
  /// Clears the value of `fieldGameTimeInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFieldGameTimeInfo() {self._fieldGameTimeInfo = nil}

  public var fieldGameStatus: Bool {
    get {return _fieldGameStatus ?? false}
    set {_fieldGameStatus = newValue}
  }
  /// Returns true if `fieldGameStatus` has been explicitly set.
  public var hasFieldGameStatus: Bool {return self._fieldGameStatus != nil}
  /// Clears the value of `fieldGameStatus`. Subsequent reads from it will return its default value.
  public mutating func clearFieldGameStatus() {self._fieldGameStatus = nil}

  public var fieldRafInfo: Bool {
    get {return _fieldRafInfo ?? false}
    set {_fieldRafInfo = newValue}
  }
  /// Returns true if `fieldRafInfo` has been explicitly set.
  public var hasFieldRafInfo: Bool {return self._fieldRafInfo != nil}
  /// Clears the value of `fieldRafInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFieldRafInfo() {self._fieldRafInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _allFields: Bool? = nil
  fileprivate var _fieldGameLevelInfo: Bool? = nil
  fileprivate var _fieldGameTimeInfo: Bool? = nil
  fileprivate var _fieldGameStatus: Bool? = nil
  fileprivate var _fieldRafInfo: Bool? = nil
}

public struct Bgs_Protocol_Account_V1_SubscriberReference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var objectID: UInt64 {
    get {return _storage._objectID ?? 0}
    set {_uniqueStorage()._objectID = newValue}
  }
  /// Returns true if `objectID` has been explicitly set.
  public var hasObjectID: Bool {return _storage._objectID != nil}
  /// Clears the value of `objectID`. Subsequent reads from it will return its default value.
  public mutating func clearObjectID() {_uniqueStorage()._objectID = nil}

  public var entityID: Bgs_Protocol_EntityId {
    get {return _storage._entityID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._entityID = newValue}
  }
  /// Returns true if `entityID` has been explicitly set.
  public var hasEntityID: Bool {return _storage._entityID != nil}
  /// Clears the value of `entityID`. Subsequent reads from it will return its default value.
  public mutating func clearEntityID() {_uniqueStorage()._entityID = nil}

  public var accountOptions: Bgs_Protocol_Account_V1_AccountFieldOptions {
    get {return _storage._accountOptions ?? Bgs_Protocol_Account_V1_AccountFieldOptions()}
    set {_uniqueStorage()._accountOptions = newValue}
  }
  /// Returns true if `accountOptions` has been explicitly set.
  public var hasAccountOptions: Bool {return _storage._accountOptions != nil}
  /// Clears the value of `accountOptions`. Subsequent reads from it will return its default value.
  public mutating func clearAccountOptions() {_uniqueStorage()._accountOptions = nil}

  public var accountTags: Bgs_Protocol_Account_V1_AccountFieldTags {
    get {return _storage._accountTags ?? Bgs_Protocol_Account_V1_AccountFieldTags()}
    set {_uniqueStorage()._accountTags = newValue}
  }
  /// Returns true if `accountTags` has been explicitly set.
  public var hasAccountTags: Bool {return _storage._accountTags != nil}
  /// Clears the value of `accountTags`. Subsequent reads from it will return its default value.
  public mutating func clearAccountTags() {_uniqueStorage()._accountTags = nil}

  public var gameAccountOptions: Bgs_Protocol_Account_V1_GameAccountFieldOptions {
    get {return _storage._gameAccountOptions ?? Bgs_Protocol_Account_V1_GameAccountFieldOptions()}
    set {_uniqueStorage()._gameAccountOptions = newValue}
  }
  /// Returns true if `gameAccountOptions` has been explicitly set.
  public var hasGameAccountOptions: Bool {return _storage._gameAccountOptions != nil}
  /// Clears the value of `gameAccountOptions`. Subsequent reads from it will return its default value.
  public mutating func clearGameAccountOptions() {_uniqueStorage()._gameAccountOptions = nil}

  public var gameAccountTags: Bgs_Protocol_Account_V1_GameAccountFieldTags {
    get {return _storage._gameAccountTags ?? Bgs_Protocol_Account_V1_GameAccountFieldTags()}
    set {_uniqueStorage()._gameAccountTags = newValue}
  }
  /// Returns true if `gameAccountTags` has been explicitly set.
  public var hasGameAccountTags: Bool {return _storage._gameAccountTags != nil}
  /// Clears the value of `gameAccountTags`. Subsequent reads from it will return its default value.
  public mutating func clearGameAccountTags() {_uniqueStorage()._gameAccountTags = nil}

  public var subscriberID: UInt64 {
    get {return _storage._subscriberID ?? 0}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Account_V1_AccountLevelInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var licenses: [Bgs_Protocol_Account_V1_AccountLicense] = []

  public var defaultCurrency: UInt32 {
    get {return _defaultCurrency ?? 0}
    set {_defaultCurrency = newValue}
  }
  /// Returns true if `defaultCurrency` has been explicitly set.
  public var hasDefaultCurrency: Bool {return self._defaultCurrency != nil}
  /// Clears the value of `defaultCurrency`. Subsequent reads from it will return its default value.
  public mutating func clearDefaultCurrency() {self._defaultCurrency = nil}

  public var country: String {
    get {return _country ?? String()}
    set {_country = newValue}
  }
  /// Returns true if `country` has been explicitly set.
  public var hasCountry: Bool {return self._country != nil}
  /// Clears the value of `country`. Subsequent reads from it will return its default value.
  public mutating func clearCountry() {self._country = nil}

  public var preferredRegion: UInt32 {
    get {return _preferredRegion ?? 0}
    set {_preferredRegion = newValue}
  }
  /// Returns true if `preferredRegion` has been explicitly set.
  public var hasPreferredRegion: Bool {return self._preferredRegion != nil}
  /// Clears the value of `preferredRegion`. Subsequent reads from it will return its default value.
  public mutating func clearPreferredRegion() {self._preferredRegion = nil}

  public var fullName: String {
    get {return _fullName ?? String()}
    set {_fullName = newValue}
  }
  /// Returns true if `fullName` has been explicitly set.
  public var hasFullName: Bool {return self._fullName != nil}
  /// Clears the value of `fullName`. Subsequent reads from it will return its default value.
  public mutating func clearFullName() {self._fullName = nil}

  public var battleTag: String {
    get {return _battleTag ?? String()}
    set {_battleTag = newValue}
  }
  /// Returns true if `battleTag` has been explicitly set.
  public var hasBattleTag: Bool {return self._battleTag != nil}
  /// Clears the value of `battleTag`. Subsequent reads from it will return its default value.
  public mutating func clearBattleTag() {self._battleTag = nil}

  public var muted: Bool {
    get {return _muted ?? false}
    set {_muted = newValue}
  }
  /// Returns true if `muted` has been explicitly set.
  public var hasMuted: Bool {return self._muted != nil}
  /// Clears the value of `muted`. Subsequent reads from it will return its default value.
  public mutating func clearMuted() {self._muted = nil}

  public var manualReview: Bool {
    get {return _manualReview ?? false}
    set {_manualReview = newValue}
  }
  /// Returns true if `manualReview` has been explicitly set.
  public var hasManualReview: Bool {return self._manualReview != nil}
  /// Clears the value of `manualReview`. Subsequent reads from it will return its default value.
  public mutating func clearManualReview() {self._manualReview = nil}

  public var accountPaidAny: Bool {
    get {return _accountPaidAny ?? false}
    set {_accountPaidAny = newValue}
  }
  /// Returns true if `accountPaidAny` has been explicitly set.
  public var hasAccountPaidAny: Bool {return self._accountPaidAny != nil}
  /// Clears the value of `accountPaidAny`. Subsequent reads from it will return its default value.
  public mutating func clearAccountPaidAny() {self._accountPaidAny = nil}

  public var identityCheckStatus: Bgs_Protocol_Account_V1_IdentityVerificationStatus {
    get {return _identityCheckStatus ?? .identNoData}
    set {_identityCheckStatus = newValue}
  }
  /// Returns true if `identityCheckStatus` has been explicitly set.
  public var hasIdentityCheckStatus: Bool {return self._identityCheckStatus != nil}
  /// Clears the value of `identityCheckStatus`. Subsequent reads from it will return its default value.
  public mutating func clearIdentityCheckStatus() {self._identityCheckStatus = nil}

  public var email: String {
    get {return _email ?? String()}
    set {_email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  public var hasEmail: Bool {return self._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  public mutating func clearEmail() {self._email = nil}

  public var headlessAccount: Bool {
    get {return _headlessAccount ?? false}
    set {_headlessAccount = newValue}
  }
  /// Returns true if `headlessAccount` has been explicitly set.
  public var hasHeadlessAccount: Bool {return self._headlessAccount != nil}
  /// Clears the value of `headlessAccount`. Subsequent reads from it will return its default value.
  public mutating func clearHeadlessAccount() {self._headlessAccount = nil}

  public var testAccount: Bool {
    get {return _testAccount ?? false}
    set {_testAccount = newValue}
  }
  /// Returns true if `testAccount` has been explicitly set.
  public var hasTestAccount: Bool {return self._testAccount != nil}
  /// Clears the value of `testAccount`. Subsequent reads from it will return its default value.
  public mutating func clearTestAccount() {self._testAccount = nil}

  public var isSmsProtected: Bool {
    get {return _isSmsProtected ?? false}
    set {_isSmsProtected = newValue}
  }
  /// Returns true if `isSmsProtected` has been explicitly set.
  public var hasIsSmsProtected: Bool {return self._isSmsProtected != nil}
  /// Clears the value of `isSmsProtected`. Subsequent reads from it will return its default value.
  public mutating func clearIsSmsProtected() {self._isSmsProtected = nil}

  public var ratingsBoardMinimumAge: UInt32 {
    get {return _ratingsBoardMinimumAge ?? 0}
    set {_ratingsBoardMinimumAge = newValue}
  }
  /// Returns true if `ratingsBoardMinimumAge` has been explicitly set.
  public var hasRatingsBoardMinimumAge: Bool {return self._ratingsBoardMinimumAge != nil}
  /// Clears the value of `ratingsBoardMinimumAge`. Subsequent reads from it will return its default value.
  public mutating func clearRatingsBoardMinimumAge() {self._ratingsBoardMinimumAge = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _defaultCurrency: UInt32? = nil
  fileprivate var _country: String? = nil
  fileprivate var _preferredRegion: UInt32? = nil
  fileprivate var _fullName: String? = nil
  fileprivate var _battleTag: String? = nil
  fileprivate var _muted: Bool? = nil
  fileprivate var _manualReview: Bool? = nil
  fileprivate var _accountPaidAny: Bool? = nil
  fileprivate var _identityCheckStatus: Bgs_Protocol_Account_V1_IdentityVerificationStatus? = nil
  fileprivate var _email: String? = nil
  fileprivate var _headlessAccount: Bool? = nil
  fileprivate var _testAccount: Bool? = nil
  fileprivate var _isSmsProtected: Bool? = nil
  fileprivate var _ratingsBoardMinimumAge: UInt32? = nil
}

public struct Bgs_Protocol_Account_V1_PrivacyInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var isUsingRid: Bool {
    get {return _isUsingRid ?? false}
    set {_isUsingRid = newValue}
  }
  /// Returns true if `isUsingRid` has been explicitly set.
  public var hasIsUsingRid: Bool {return self._isUsingRid != nil}
  /// Clears the value of `isUsingRid`. Subsequent reads from it will return its default value.
  public mutating func clearIsUsingRid() {self._isUsingRid = nil}

  public var isVisibleForViewFriends: Bool {
    get {return _isVisibleForViewFriends ?? false}
    set {_isVisibleForViewFriends = newValue}
  }
  /// Returns true if `isVisibleForViewFriends` has been explicitly set.
  public var hasIsVisibleForViewFriends: Bool {return self._isVisibleForViewFriends != nil}
  /// Clears the value of `isVisibleForViewFriends`. Subsequent reads from it will return its default value.
  public mutating func clearIsVisibleForViewFriends() {self._isVisibleForViewFriends = nil}

  public var isHiddenFromFriendFinder: Bool {
    get {return _isHiddenFromFriendFinder ?? false}
    set {_isHiddenFromFriendFinder = newValue}
  }
  /// Returns true if `isHiddenFromFriendFinder` has been explicitly set.
  public var hasIsHiddenFromFriendFinder: Bool {return self._isHiddenFromFriendFinder != nil}
  /// Clears the value of `isHiddenFromFriendFinder`. Subsequent reads from it will return its default value.
  public mutating func clearIsHiddenFromFriendFinder() {self._isHiddenFromFriendFinder = nil}

  public var gameInfoPrivacy: Bgs_Protocol_Account_V1_PrivacyInfo.GameInfoPrivacy {
    get {return _gameInfoPrivacy ?? .privacyFriends}
    set {_gameInfoPrivacy = newValue}
  }
  /// Returns true if `gameInfoPrivacy` has been explicitly set.
  public var hasGameInfoPrivacy: Bool {return self._gameInfoPrivacy != nil}
  /// Clears the value of `gameInfoPrivacy`. Subsequent reads from it will return its default value.
  public mutating func clearGameInfoPrivacy() {self._gameInfoPrivacy = nil}

  public var onlyAllowFriendWhispers: Bool {
    get {return _onlyAllowFriendWhispers ?? false}
    set {_onlyAllowFriendWhispers = newValue}
  }
  /// Returns true if `onlyAllowFriendWhispers` has been explicitly set.
  public var hasOnlyAllowFriendWhispers: Bool {return self._onlyAllowFriendWhispers != nil}
  /// Clears the value of `onlyAllowFriendWhispers`. Subsequent reads from it will return its default value.
  public mutating func clearOnlyAllowFriendWhispers() {self._onlyAllowFriendWhispers = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum GameInfoPrivacy: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case privacyMe // = 0
    case privacyFriends // = 1
    case privacyEveryone // = 2

    public init() {
      self = .privacyMe
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .privacyMe
      case 1: self = .privacyFriends
      case 2: self = .privacyEveryone
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .privacyMe: return 0
      case .privacyFriends: return 1
      case .privacyEveryone: return 2
      }
    }

  }

  public init() {}

  fileprivate var _isUsingRid: Bool? = nil
  fileprivate var _isVisibleForViewFriends: Bool? = nil
  fileprivate var _isHiddenFromFriendFinder: Bool? = nil
  fileprivate var _gameInfoPrivacy: Bgs_Protocol_Account_V1_PrivacyInfo.GameInfoPrivacy? = nil
  fileprivate var _onlyAllowFriendWhispers: Bool? = nil
}

#if swift(>=4.2)

extension Bgs_Protocol_Account_V1_PrivacyInfo.GameInfoPrivacy: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct Bgs_Protocol_Account_V1_ParentalControlInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var timezone: String {
    get {return _timezone ?? String()}
    set {_timezone = newValue}
  }
  /// Returns true if `timezone` has been explicitly set.
  public var hasTimezone: Bool {return self._timezone != nil}
  /// Clears the value of `timezone`. Subsequent reads from it will return its default value.
  public mutating func clearTimezone() {self._timezone = nil}

  public var minutesPerDay: UInt32 {
    get {return _minutesPerDay ?? 0}
    set {_minutesPerDay = newValue}
  }
  /// Returns true if `minutesPerDay` has been explicitly set.
  public var hasMinutesPerDay: Bool {return self._minutesPerDay != nil}
  /// Clears the value of `minutesPerDay`. Subsequent reads from it will return its default value.
  public mutating func clearMinutesPerDay() {self._minutesPerDay = nil}

  public var minutesPerWeek: UInt32 {
    get {return _minutesPerWeek ?? 0}
    set {_minutesPerWeek = newValue}
  }
  /// Returns true if `minutesPerWeek` has been explicitly set.
  public var hasMinutesPerWeek: Bool {return self._minutesPerWeek != nil}
  /// Clears the value of `minutesPerWeek`. Subsequent reads from it will return its default value.
  public mutating func clearMinutesPerWeek() {self._minutesPerWeek = nil}

  public var canReceiveVoice: Bool {
    get {return _canReceiveVoice ?? false}
    set {_canReceiveVoice = newValue}
  }
  /// Returns true if `canReceiveVoice` has been explicitly set.
  public var hasCanReceiveVoice: Bool {return self._canReceiveVoice != nil}
  /// Clears the value of `canReceiveVoice`. Subsequent reads from it will return its default value.
  public mutating func clearCanReceiveVoice() {self._canReceiveVoice = nil}

  public var canSendVoice: Bool {
    get {return _canSendVoice ?? false}
    set {_canSendVoice = newValue}
  }
  /// Returns true if `canSendVoice` has been explicitly set.
  public var hasCanSendVoice: Bool {return self._canSendVoice != nil}
  /// Clears the value of `canSendVoice`. Subsequent reads from it will return its default value.
  public mutating func clearCanSendVoice() {self._canSendVoice = nil}

  public var playSchedule: [Bool] = []

  public var canJoinGroup: Bool {
    get {return _canJoinGroup ?? false}
    set {_canJoinGroup = newValue}
  }
  /// Returns true if `canJoinGroup` has been explicitly set.
  public var hasCanJoinGroup: Bool {return self._canJoinGroup != nil}
  /// Clears the value of `canJoinGroup`. Subsequent reads from it will return its default value.
  public mutating func clearCanJoinGroup() {self._canJoinGroup = nil}

  public var canUseProfile: Bool {
    get {return _canUseProfile ?? false}
    set {_canUseProfile = newValue}
  }
  /// Returns true if `canUseProfile` has been explicitly set.
  public var hasCanUseProfile: Bool {return self._canUseProfile != nil}
  /// Clears the value of `canUseProfile`. Subsequent reads from it will return its default value.
  public mutating func clearCanUseProfile() {self._canUseProfile = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _timezone: String? = nil
  fileprivate var _minutesPerDay: UInt32? = nil
  fileprivate var _minutesPerWeek: UInt32? = nil
  fileprivate var _canReceiveVoice: Bool? = nil
  fileprivate var _canSendVoice: Bool? = nil
  fileprivate var _canJoinGroup: Bool? = nil
  fileprivate var _canUseProfile: Bool? = nil
}

public struct Bgs_Protocol_Account_V1_GameLevelInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var isTrial: Bool {
    get {return _isTrial ?? false}
    set {_isTrial = newValue}
  }
  /// Returns true if `isTrial` has been explicitly set.
  public var hasIsTrial: Bool {return self._isTrial != nil}
  /// Clears the value of `isTrial`. Subsequent reads from it will return its default value.
  public mutating func clearIsTrial() {self._isTrial = nil}

  public var isLifetime: Bool {
    get {return _isLifetime ?? false}
    set {_isLifetime = newValue}
  }
  /// Returns true if `isLifetime` has been explicitly set.
  public var hasIsLifetime: Bool {return self._isLifetime != nil}
  /// Clears the value of `isLifetime`. Subsequent reads from it will return its default value.
  public mutating func clearIsLifetime() {self._isLifetime = nil}

  public var isRestricted: Bool {
    get {return _isRestricted ?? false}
    set {_isRestricted = newValue}
  }
  /// Returns true if `isRestricted` has been explicitly set.
  public var hasIsRestricted: Bool {return self._isRestricted != nil}
  /// Clears the value of `isRestricted`. Subsequent reads from it will return its default value.
  public mutating func clearIsRestricted() {self._isRestricted = nil}

  public var isBeta: Bool {
    get {return _isBeta ?? false}
    set {_isBeta = newValue}
  }
  /// Returns true if `isBeta` has been explicitly set.
  public var hasIsBeta: Bool {return self._isBeta != nil}
  /// Clears the value of `isBeta`. Subsequent reads from it will return its default value.
  public mutating func clearIsBeta() {self._isBeta = nil}

  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {self._name = nil}

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var licenses: [Bgs_Protocol_Account_V1_AccountLicense] = []

  public var realmPermissions: UInt32 {
    get {return _realmPermissions ?? 0}
    set {_realmPermissions = newValue}
  }
  /// Returns true if `realmPermissions` has been explicitly set.
  public var hasRealmPermissions: Bool {return self._realmPermissions != nil}
  /// Clears the value of `realmPermissions`. Subsequent reads from it will return its default value.
  public mutating func clearRealmPermissions() {self._realmPermissions = nil}

  public var lastLogoutTimeMs: UInt64 {
    get {return _lastLogoutTimeMs ?? 0}
    set {_lastLogoutTimeMs = newValue}
  }
  /// Returns true if `lastLogoutTimeMs` has been explicitly set.
  public var hasLastLogoutTimeMs: Bool {return self._lastLogoutTimeMs != nil}
  /// Clears the value of `lastLogoutTimeMs`. Subsequent reads from it will return its default value.
  public mutating func clearLastLogoutTimeMs() {self._lastLogoutTimeMs = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _isTrial: Bool? = nil
  fileprivate var _isLifetime: Bool? = nil
  fileprivate var _isRestricted: Bool? = nil
  fileprivate var _isBeta: Bool? = nil
  fileprivate var _name: String? = nil
  fileprivate var _program: UInt32? = nil
  fileprivate var _realmPermissions: UInt32? = nil
  fileprivate var _lastLogoutTimeMs: UInt64? = nil
}

public struct Bgs_Protocol_Account_V1_GameTimeInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var isUnlimitedPlayTime: Bool {
    get {return _isUnlimitedPlayTime ?? false}
    set {_isUnlimitedPlayTime = newValue}
  }
  /// Returns true if `isUnlimitedPlayTime` has been explicitly set.
  public var hasIsUnlimitedPlayTime: Bool {return self._isUnlimitedPlayTime != nil}
  /// Clears the value of `isUnlimitedPlayTime`. Subsequent reads from it will return its default value.
  public mutating func clearIsUnlimitedPlayTime() {self._isUnlimitedPlayTime = nil}

  public var playTimeExpires: UInt64 {
    get {return _playTimeExpires ?? 0}
    set {_playTimeExpires = newValue}
  }
  /// Returns true if `playTimeExpires` has been explicitly set.
  public var hasPlayTimeExpires: Bool {return self._playTimeExpires != nil}
  /// Clears the value of `playTimeExpires`. Subsequent reads from it will return its default value.
  public mutating func clearPlayTimeExpires() {self._playTimeExpires = nil}

  public var isSubscription: Bool {
    get {return _isSubscription ?? false}
    set {_isSubscription = newValue}
  }
  /// Returns true if `isSubscription` has been explicitly set.
  public var hasIsSubscription: Bool {return self._isSubscription != nil}
  /// Clears the value of `isSubscription`. Subsequent reads from it will return its default value.
  public mutating func clearIsSubscription() {self._isSubscription = nil}

  public var isRecurringSubscription: Bool {
    get {return _isRecurringSubscription ?? false}
    set {_isRecurringSubscription = newValue}
  }
  /// Returns true if `isRecurringSubscription` has been explicitly set.
  public var hasIsRecurringSubscription: Bool {return self._isRecurringSubscription != nil}
  /// Clears the value of `isRecurringSubscription`. Subsequent reads from it will return its default value.
  public mutating func clearIsRecurringSubscription() {self._isRecurringSubscription = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _isUnlimitedPlayTime: Bool? = nil
  fileprivate var _playTimeExpires: UInt64? = nil
  fileprivate var _isSubscription: Bool? = nil
  fileprivate var _isRecurringSubscription: Bool? = nil
}

public struct Bgs_Protocol_Account_V1_GameTimeRemainingInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var minutesRemaining: UInt32 {
    get {return _minutesRemaining ?? 0}
    set {_minutesRemaining = newValue}
  }
  /// Returns true if `minutesRemaining` has been explicitly set.
  public var hasMinutesRemaining: Bool {return self._minutesRemaining != nil}
  /// Clears the value of `minutesRemaining`. Subsequent reads from it will return its default value.
  public mutating func clearMinutesRemaining() {self._minutesRemaining = nil}

  public var parentalDailyMinutesRemaining: UInt32 {
    get {return _parentalDailyMinutesRemaining ?? 0}
    set {_parentalDailyMinutesRemaining = newValue}
  }
  /// Returns true if `parentalDailyMinutesRemaining` has been explicitly set.
  public var hasParentalDailyMinutesRemaining: Bool {return self._parentalDailyMinutesRemaining != nil}
  /// Clears the value of `parentalDailyMinutesRemaining`. Subsequent reads from it will return its default value.
  public mutating func clearParentalDailyMinutesRemaining() {self._parentalDailyMinutesRemaining = nil}

  public var parentalWeeklyMinutesRemaining: UInt32 {
    get {return _parentalWeeklyMinutesRemaining ?? 0}
    set {_parentalWeeklyMinutesRemaining = newValue}
  }
  /// Returns true if `parentalWeeklyMinutesRemaining` has been explicitly set.
  public var hasParentalWeeklyMinutesRemaining: Bool {return self._parentalWeeklyMinutesRemaining != nil}
  /// Clears the value of `parentalWeeklyMinutesRemaining`. Subsequent reads from it will return its default value.
  public mutating func clearParentalWeeklyMinutesRemaining() {self._parentalWeeklyMinutesRemaining = nil}

  public var secondsRemainingUntilKick: UInt32 {
    get {return _secondsRemainingUntilKick ?? 0}
    set {_secondsRemainingUntilKick = newValue}
  }
  /// Returns true if `secondsRemainingUntilKick` has been explicitly set.
  public var hasSecondsRemainingUntilKick: Bool {return self._secondsRemainingUntilKick != nil}
  /// Clears the value of `secondsRemainingUntilKick`. Subsequent reads from it will return its default value.
  public mutating func clearSecondsRemainingUntilKick() {self._secondsRemainingUntilKick = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _minutesRemaining: UInt32? = nil
  fileprivate var _parentalDailyMinutesRemaining: UInt32? = nil
  fileprivate var _parentalWeeklyMinutesRemaining: UInt32? = nil
  fileprivate var _secondsRemainingUntilKick: UInt32? = nil
}

public struct Bgs_Protocol_Account_V1_GameStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var isSuspended: Bool {
    get {return _isSuspended ?? false}
    set {_isSuspended = newValue}
  }
  /// Returns true if `isSuspended` has been explicitly set.
  public var hasIsSuspended: Bool {return self._isSuspended != nil}
  /// Clears the value of `isSuspended`. Subsequent reads from it will return its default value.
  public mutating func clearIsSuspended() {self._isSuspended = nil}

  public var isBanned: Bool {
    get {return _isBanned ?? false}
    set {_isBanned = newValue}
  }
  /// Returns true if `isBanned` has been explicitly set.
  public var hasIsBanned: Bool {return self._isBanned != nil}
  /// Clears the value of `isBanned`. Subsequent reads from it will return its default value.
  public mutating func clearIsBanned() {self._isBanned = nil}

  public var suspensionExpires: UInt64 {
    get {return _suspensionExpires ?? 0}
    set {_suspensionExpires = newValue}
  }
  /// Returns true if `suspensionExpires` has been explicitly set.
  public var hasSuspensionExpires: Bool {return self._suspensionExpires != nil}
  /// Clears the value of `suspensionExpires`. Subsequent reads from it will return its default value.
  public mutating func clearSuspensionExpires() {self._suspensionExpires = nil}

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var isLocked: Bool {
    get {return _isLocked ?? false}
    set {_isLocked = newValue}
  }
  /// Returns true if `isLocked` has been explicitly set.
  public var hasIsLocked: Bool {return self._isLocked != nil}
  /// Clears the value of `isLocked`. Subsequent reads from it will return its default value.
  public mutating func clearIsLocked() {self._isLocked = nil}

  public var isBamUnlockable: Bool {
    get {return _isBamUnlockable ?? false}
    set {_isBamUnlockable = newValue}
  }
  /// Returns true if `isBamUnlockable` has been explicitly set.
  public var hasIsBamUnlockable: Bool {return self._isBamUnlockable != nil}
  /// Clears the value of `isBamUnlockable`. Subsequent reads from it will return its default value.
  public mutating func clearIsBamUnlockable() {self._isBamUnlockable = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _isSuspended: Bool? = nil
  fileprivate var _isBanned: Bool? = nil
  fileprivate var _suspensionExpires: UInt64? = nil
  fileprivate var _program: UInt32? = nil
  fileprivate var _isLocked: Bool? = nil
  fileprivate var _isBamUnlockable: Bool? = nil
}

public struct Bgs_Protocol_Account_V1_RAFInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rafInfo: Data {
    get {return _rafInfo ?? SwiftProtobuf.Internal.emptyData}
    set {_rafInfo = newValue}
  }
  /// Returns true if `rafInfo` has been explicitly set.
  public var hasRafInfo: Bool {return self._rafInfo != nil}
  /// Clears the value of `rafInfo`. Subsequent reads from it will return its default value.
  public mutating func clearRafInfo() {self._rafInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _rafInfo: Data? = nil
}

public struct Bgs_Protocol_Account_V1_GameSessionInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var startTime: UInt32 {
    get {return _storage._startTime ?? 0}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  public var location: Bgs_Protocol_Account_V1_GameSessionLocation {
    get {return _storage._location ?? Bgs_Protocol_Account_V1_GameSessionLocation()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  public var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  public mutating func clearLocation() {_uniqueStorage()._location = nil}

  public var hasBenefactor_p: Bool {
    get {return _storage._hasBenefactor_p ?? false}
    set {_uniqueStorage()._hasBenefactor_p = newValue}
  }
  /// Returns true if `hasBenefactor_p` has been explicitly set.
  public var hasHasBenefactor_p: Bool {return _storage._hasBenefactor_p != nil}
  /// Clears the value of `hasBenefactor_p`. Subsequent reads from it will return its default value.
  public mutating func clearHasBenefactor_p() {_uniqueStorage()._hasBenefactor_p = nil}

  public var isUsingIgr: Bool {
    get {return _storage._isUsingIgr ?? false}
    set {_uniqueStorage()._isUsingIgr = newValue}
  }
  /// Returns true if `isUsingIgr` has been explicitly set.
  public var hasIsUsingIgr: Bool {return _storage._isUsingIgr != nil}
  /// Clears the value of `isUsingIgr`. Subsequent reads from it will return its default value.
  public mutating func clearIsUsingIgr() {_uniqueStorage()._isUsingIgr = nil}

  public var parentalControlsActive: Bool {
    get {return _storage._parentalControlsActive ?? false}
    set {_uniqueStorage()._parentalControlsActive = newValue}
  }
  /// Returns true if `parentalControlsActive` has been explicitly set.
  public var hasParentalControlsActive: Bool {return _storage._parentalControlsActive != nil}
  /// Clears the value of `parentalControlsActive`. Subsequent reads from it will return its default value.
  public mutating func clearParentalControlsActive() {_uniqueStorage()._parentalControlsActive = nil}

  public var startTimeSec: UInt64 {
    get {return _storage._startTimeSec ?? 0}
    set {_uniqueStorage()._startTimeSec = newValue}
  }
  /// Returns true if `startTimeSec` has been explicitly set.
  public var hasStartTimeSec: Bool {return _storage._startTimeSec != nil}
  /// Clears the value of `startTimeSec`. Subsequent reads from it will return its default value.
  public mutating func clearStartTimeSec() {_uniqueStorage()._startTimeSec = nil}

  public var igrID: Bgs_Protocol_Account_V1_IgrId {
    get {return _storage._igrID ?? Bgs_Protocol_Account_V1_IgrId()}
    set {_uniqueStorage()._igrID = newValue}
  }
  /// Returns true if `igrID` has been explicitly set.
  public var hasIgrID: Bool {return _storage._igrID != nil}
  /// Clears the value of `igrID`. Subsequent reads from it will return its default value.
  public mutating func clearIgrID() {_uniqueStorage()._igrID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Account_V1_GameSessionUpdateInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var cais: Bgs_Protocol_Account_V1_CAIS {
    get {return _storage._cais ?? Bgs_Protocol_Account_V1_CAIS()}
    set {_uniqueStorage()._cais = newValue}
  }
  /// Returns true if `cais` has been explicitly set.
  public var hasCais: Bool {return _storage._cais != nil}
  /// Clears the value of `cais`. Subsequent reads from it will return its default value.
  public mutating func clearCais() {_uniqueStorage()._cais = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Account_V1_GameSessionLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ipAddress: String {
    get {return _ipAddress ?? String()}
    set {_ipAddress = newValue}
  }
  /// Returns true if `ipAddress` has been explicitly set.
  public var hasIpAddress: Bool {return self._ipAddress != nil}
  /// Clears the value of `ipAddress`. Subsequent reads from it will return its default value.
  public mutating func clearIpAddress() {self._ipAddress = nil}

  public var country: UInt32 {
    get {return _country ?? 0}
    set {_country = newValue}
  }
  /// Returns true if `country` has been explicitly set.
  public var hasCountry: Bool {return self._country != nil}
  /// Clears the value of `country`. Subsequent reads from it will return its default value.
  public mutating func clearCountry() {self._country = nil}

  public var city: String {
    get {return _city ?? String()}
    set {_city = newValue}
  }
  /// Returns true if `city` has been explicitly set.
  public var hasCity: Bool {return self._city != nil}
  /// Clears the value of `city`. Subsequent reads from it will return its default value.
  public mutating func clearCity() {self._city = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ipAddress: String? = nil
  fileprivate var _country: UInt32? = nil
  fileprivate var _city: String? = nil
}

public struct Bgs_Protocol_Account_V1_CAIS {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playedMinutes: UInt32 {
    get {return _playedMinutes ?? 0}
    set {_playedMinutes = newValue}
  }
  /// Returns true if `playedMinutes` has been explicitly set.
  public var hasPlayedMinutes: Bool {return self._playedMinutes != nil}
  /// Clears the value of `playedMinutes`. Subsequent reads from it will return its default value.
  public mutating func clearPlayedMinutes() {self._playedMinutes = nil}

  public var restedMinutes: UInt32 {
    get {return _restedMinutes ?? 0}
    set {_restedMinutes = newValue}
  }
  /// Returns true if `restedMinutes` has been explicitly set.
  public var hasRestedMinutes: Bool {return self._restedMinutes != nil}
  /// Clears the value of `restedMinutes`. Subsequent reads from it will return its default value.
  public mutating func clearRestedMinutes() {self._restedMinutes = nil}

  public var lastHeardTime: UInt64 {
    get {return _lastHeardTime ?? 0}
    set {_lastHeardTime = newValue}
  }
  /// Returns true if `lastHeardTime` has been explicitly set.
  public var hasLastHeardTime: Bool {return self._lastHeardTime != nil}
  /// Clears the value of `lastHeardTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastHeardTime() {self._lastHeardTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _playedMinutes: UInt32? = nil
  fileprivate var _restedMinutes: UInt32? = nil
  fileprivate var _lastHeardTime: UInt64? = nil
}

public struct Bgs_Protocol_Account_V1_GameAccountList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var region: UInt32 {
    get {return _region ?? 0}
    set {_region = newValue}
  }
  /// Returns true if `region` has been explicitly set.
  public var hasRegion: Bool {return self._region != nil}
  /// Clears the value of `region`. Subsequent reads from it will return its default value.
  public mutating func clearRegion() {self._region = nil}

  public var handle: [Bgs_Protocol_Account_V1_GameAccountHandle] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _region: UInt32? = nil
}

public struct Bgs_Protocol_Account_V1_SecurityStatus {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var smsProtectEnabled: Bool {
    get {return _smsProtectEnabled ?? false}
    set {_smsProtectEnabled = newValue}
  }
  /// Returns true if `smsProtectEnabled` has been explicitly set.
  public var hasSmsProtectEnabled: Bool {return self._smsProtectEnabled != nil}
  /// Clears the value of `smsProtectEnabled`. Subsequent reads from it will return its default value.
  public mutating func clearSmsProtectEnabled() {self._smsProtectEnabled = nil}

  public var emailVerified: Bool {
    get {return _emailVerified ?? false}
    set {_emailVerified = newValue}
  }
  /// Returns true if `emailVerified` has been explicitly set.
  public var hasEmailVerified: Bool {return self._emailVerified != nil}
  /// Clears the value of `emailVerified`. Subsequent reads from it will return its default value.
  public mutating func clearEmailVerified() {self._emailVerified = nil}

  public var authenticatorEnabled: Bool {
    get {return _authenticatorEnabled ?? false}
    set {_authenticatorEnabled = newValue}
  }
  /// Returns true if `authenticatorEnabled` has been explicitly set.
  public var hasAuthenticatorEnabled: Bool {return self._authenticatorEnabled != nil}
  /// Clears the value of `authenticatorEnabled`. Subsequent reads from it will return its default value.
  public mutating func clearAuthenticatorEnabled() {self._authenticatorEnabled = nil}

  public var sqaEnabled: Bool {
    get {return _sqaEnabled ?? false}
    set {_sqaEnabled = newValue}
  }
  /// Returns true if `sqaEnabled` has been explicitly set.
  public var hasSqaEnabled: Bool {return self._sqaEnabled != nil}
  /// Clears the value of `sqaEnabled`. Subsequent reads from it will return its default value.
  public mutating func clearSqaEnabled() {self._sqaEnabled = nil}

  public var authenticatorRequired: Bool {
    get {return _authenticatorRequired ?? false}
    set {_authenticatorRequired = newValue}
  }
  /// Returns true if `authenticatorRequired` has been explicitly set.
  public var hasAuthenticatorRequired: Bool {return self._authenticatorRequired != nil}
  /// Clears the value of `authenticatorRequired`. Subsequent reads from it will return its default value.
  public mutating func clearAuthenticatorRequired() {self._authenticatorRequired = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _smsProtectEnabled: Bool? = nil
  fileprivate var _emailVerified: Bool? = nil
  fileprivate var _authenticatorEnabled: Bool? = nil
  fileprivate var _sqaEnabled: Bool? = nil
  fileprivate var _authenticatorRequired: Bool? = nil
}

public struct Bgs_Protocol_Account_V1_AccountState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountLevelInfo: Bgs_Protocol_Account_V1_AccountLevelInfo {
    get {return _storage._accountLevelInfo ?? Bgs_Protocol_Account_V1_AccountLevelInfo()}
    set {_uniqueStorage()._accountLevelInfo = newValue}
  }
  /// Returns true if `accountLevelInfo` has been explicitly set.
  public var hasAccountLevelInfo: Bool {return _storage._accountLevelInfo != nil}
  /// Clears the value of `accountLevelInfo`. Subsequent reads from it will return its default value.
  public mutating func clearAccountLevelInfo() {_uniqueStorage()._accountLevelInfo = nil}

  public var privacyInfo: Bgs_Protocol_Account_V1_PrivacyInfo {
    get {return _storage._privacyInfo ?? Bgs_Protocol_Account_V1_PrivacyInfo()}
    set {_uniqueStorage()._privacyInfo = newValue}
  }
  /// Returns true if `privacyInfo` has been explicitly set.
  public var hasPrivacyInfo: Bool {return _storage._privacyInfo != nil}
  /// Clears the value of `privacyInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacyInfo() {_uniqueStorage()._privacyInfo = nil}

  public var parentalControlInfo: Bgs_Protocol_Account_V1_ParentalControlInfo {
    get {return _storage._parentalControlInfo ?? Bgs_Protocol_Account_V1_ParentalControlInfo()}
    set {_uniqueStorage()._parentalControlInfo = newValue}
  }
  /// Returns true if `parentalControlInfo` has been explicitly set.
  public var hasParentalControlInfo: Bool {return _storage._parentalControlInfo != nil}
  /// Clears the value of `parentalControlInfo`. Subsequent reads from it will return its default value.
  public mutating func clearParentalControlInfo() {_uniqueStorage()._parentalControlInfo = nil}

  public var gameLevelInfo: [Bgs_Protocol_Account_V1_GameLevelInfo] {
    get {return _storage._gameLevelInfo}
    set {_uniqueStorage()._gameLevelInfo = newValue}
  }

  public var gameStatus: [Bgs_Protocol_Account_V1_GameStatus] {
    get {return _storage._gameStatus}
    set {_uniqueStorage()._gameStatus = newValue}
  }

  public var gameAccounts: [Bgs_Protocol_Account_V1_GameAccountList] {
    get {return _storage._gameAccounts}
    set {_uniqueStorage()._gameAccounts = newValue}
  }

  public var securityStatus: Bgs_Protocol_Account_V1_SecurityStatus {
    get {return _storage._securityStatus ?? Bgs_Protocol_Account_V1_SecurityStatus()}
    set {_uniqueStorage()._securityStatus = newValue}
  }
  /// Returns true if `securityStatus` has been explicitly set.
  public var hasSecurityStatus: Bool {return _storage._securityStatus != nil}
  /// Clears the value of `securityStatus`. Subsequent reads from it will return its default value.
  public mutating func clearSecurityStatus() {_uniqueStorage()._securityStatus = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Account_V1_AccountStateTagged {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountState: Bgs_Protocol_Account_V1_AccountState {
    get {return _storage._accountState ?? Bgs_Protocol_Account_V1_AccountState()}
    set {_uniqueStorage()._accountState = newValue}
  }
  /// Returns true if `accountState` has been explicitly set.
  public var hasAccountState: Bool {return _storage._accountState != nil}
  /// Clears the value of `accountState`. Subsequent reads from it will return its default value.
  public mutating func clearAccountState() {_uniqueStorage()._accountState = nil}

  public var accountTags: Bgs_Protocol_Account_V1_AccountFieldTags {
    get {return _storage._accountTags ?? Bgs_Protocol_Account_V1_AccountFieldTags()}
    set {_uniqueStorage()._accountTags = newValue}
  }
  /// Returns true if `accountTags` has been explicitly set.
  public var hasAccountTags: Bool {return _storage._accountTags != nil}
  /// Clears the value of `accountTags`. Subsequent reads from it will return its default value.
  public mutating func clearAccountTags() {_uniqueStorage()._accountTags = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Account_V1_GameAccountState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameLevelInfo: Bgs_Protocol_Account_V1_GameLevelInfo {
    get {return _storage._gameLevelInfo ?? Bgs_Protocol_Account_V1_GameLevelInfo()}
    set {_uniqueStorage()._gameLevelInfo = newValue}
  }
  /// Returns true if `gameLevelInfo` has been explicitly set.
  public var hasGameLevelInfo: Bool {return _storage._gameLevelInfo != nil}
  /// Clears the value of `gameLevelInfo`. Subsequent reads from it will return its default value.
  public mutating func clearGameLevelInfo() {_uniqueStorage()._gameLevelInfo = nil}

  public var gameTimeInfo: Bgs_Protocol_Account_V1_GameTimeInfo {
    get {return _storage._gameTimeInfo ?? Bgs_Protocol_Account_V1_GameTimeInfo()}
    set {_uniqueStorage()._gameTimeInfo = newValue}
  }
  /// Returns true if `gameTimeInfo` has been explicitly set.
  public var hasGameTimeInfo: Bool {return _storage._gameTimeInfo != nil}
  /// Clears the value of `gameTimeInfo`. Subsequent reads from it will return its default value.
  public mutating func clearGameTimeInfo() {_uniqueStorage()._gameTimeInfo = nil}

  public var gameStatus: Bgs_Protocol_Account_V1_GameStatus {
    get {return _storage._gameStatus ?? Bgs_Protocol_Account_V1_GameStatus()}
    set {_uniqueStorage()._gameStatus = newValue}
  }
  /// Returns true if `gameStatus` has been explicitly set.
  public var hasGameStatus: Bool {return _storage._gameStatus != nil}
  /// Clears the value of `gameStatus`. Subsequent reads from it will return its default value.
  public mutating func clearGameStatus() {_uniqueStorage()._gameStatus = nil}

  public var rafInfo: Bgs_Protocol_Account_V1_RAFInfo {
    get {return _storage._rafInfo ?? Bgs_Protocol_Account_V1_RAFInfo()}
    set {_uniqueStorage()._rafInfo = newValue}
  }
  /// Returns true if `rafInfo` has been explicitly set.
  public var hasRafInfo: Bool {return _storage._rafInfo != nil}
  /// Clears the value of `rafInfo`. Subsequent reads from it will return its default value.
  public mutating func clearRafInfo() {_uniqueStorage()._rafInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Account_V1_GameAccountStateTagged {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameAccountState: Bgs_Protocol_Account_V1_GameAccountState {
    get {return _storage._gameAccountState ?? Bgs_Protocol_Account_V1_GameAccountState()}
    set {_uniqueStorage()._gameAccountState = newValue}
  }
  /// Returns true if `gameAccountState` has been explicitly set.
  public var hasGameAccountState: Bool {return _storage._gameAccountState != nil}
  /// Clears the value of `gameAccountState`. Subsequent reads from it will return its default value.
  public mutating func clearGameAccountState() {_uniqueStorage()._gameAccountState = nil}

  public var gameAccountTags: Bgs_Protocol_Account_V1_GameAccountFieldTags {
    get {return _storage._gameAccountTags ?? Bgs_Protocol_Account_V1_GameAccountFieldTags()}
    set {_uniqueStorage()._gameAccountTags = newValue}
  }
  /// Returns true if `gameAccountTags` has been explicitly set.
  public var hasGameAccountTags: Bool {return _storage._gameAccountTags != nil}
  /// Clears the value of `gameAccountTags`. Subsequent reads from it will return its default value.
  public mutating func clearGameAccountTags() {_uniqueStorage()._gameAccountTags = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Account_V1_AuthorizedData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: String {
    get {return _data ?? String()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var license: [UInt32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: String? = nil
}

public struct Bgs_Protocol_Account_V1_IgrId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: OneOf_Type? {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var gameAccount: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {
      if case .gameAccount(let v)? = _storage._type {return v}
      return Bgs_Protocol_Account_V1_GameAccountHandle()
    }
    set {_uniqueStorage()._type = .gameAccount(newValue)}
  }

  public var externalID: UInt32 {
    get {
      if case .externalID(let v)? = _storage._type {return v}
      return 0
    }
    set {_uniqueStorage()._type = .externalID(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case gameAccount(Bgs_Protocol_Account_V1_GameAccountHandle)
    case externalID(UInt32)

  #if !swift(>=4.1)
    public static func ==(lhs: Bgs_Protocol_Account_V1_IgrId.OneOf_Type, rhs: Bgs_Protocol_Account_V1_IgrId.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.gameAccount(let l), .gameAccount(let r)): return l == r
      case (.externalID(let l), .externalID(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Account_V1_IgrAddress {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var clientAddress: String {
    get {return _clientAddress ?? String()}
    set {_clientAddress = newValue}
  }
  /// Returns true if `clientAddress` has been explicitly set.
  public var hasClientAddress: Bool {return self._clientAddress != nil}
  /// Clears the value of `clientAddress`. Subsequent reads from it will return its default value.
  public mutating func clearClientAddress() {self._clientAddress = nil}

  public var region: UInt32 {
    get {return _region ?? 0}
    set {_region = newValue}
  }
  /// Returns true if `region` has been explicitly set.
  public var hasRegion: Bool {return self._region != nil}
  /// Clears the value of `region`. Subsequent reads from it will return its default value.
  public mutating func clearRegion() {self._region = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _clientAddress: String? = nil
  fileprivate var _region: UInt32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.account.v1"

extension Bgs_Protocol_Account_V1_IdentityVerificationStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IDENT_NO_DATA"),
    1: .same(proto: "IDENT_PENDING"),
    2: .same(proto: "IDENT_OVER_18"),
    3: .same(proto: "IDENT_UNDER_18"),
    4: .same(proto: "IDENT_FAILED"),
    5: .same(proto: "IDENT_SUCCESS"),
    6: .same(proto: "IDENT_SUCC_MNL"),
    7: .same(proto: "IDENT_UNKNOWN"),
  ]
}

extension Bgs_Protocol_Account_V1_AccountId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_AccountId, rhs: Bgs_Protocol_Account_V1_AccountId) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_AccountLicense: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountLicense"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "expires"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._id)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._expires)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._expires {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_AccountLicense, rhs: Bgs_Protocol_Account_V1_AccountLicense) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._expires != rhs._expires {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameAccountHandle: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameAccountHandle"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "program"),
    3: .same(proto: "region"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._program == nil {return false}
    if self._region == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._id)
      case 2: try decoder.decodeSingularFixed32Field(value: &self._program)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._region)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    if let v = self._region {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameAccountHandle, rhs: Bgs_Protocol_Account_V1_GameAccountHandle) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._program != rhs._program {return false}
    if lhs._region != rhs._region {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_AccountReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountReference"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "email"),
    3: .same(proto: "handle"),
    4: .standard(proto: "battle_tag"),
    10: .same(proto: "region"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt32? = nil
    var _email: String? = nil
    var _handle: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _battleTag: String? = nil
    var _region: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _email = source._email
      _handle = source._handle
      _battleTag = source._battleTag
      _region = source._region
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._handle, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFixed32Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._email)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._handle)
        case 4: try decoder.decodeSingularStringField(value: &_storage._battleTag)
        case 10: try decoder.decodeSingularUInt32Field(value: &_storage._region)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._email {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._handle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._battleTag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._region {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_AccountReference, rhs: Bgs_Protocol_Account_V1_AccountReference) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._handle != rhs_storage._handle {return false}
        if _storage._battleTag != rhs_storage._battleTag {return false}
        if _storage._region != rhs_storage._region {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_Identity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Identity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .standard(proto: "game_account"),
  ]

  fileprivate class _StorageClass {
    var _account: Bgs_Protocol_Account_V1_AccountId? = nil
    var _gameAccount: Bgs_Protocol_Account_V1_GameAccountHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
      _gameAccount = source._gameAccount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account, !v.isInitialized {return false}
      if let v = _storage._gameAccount, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._gameAccount)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._account {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._gameAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_Identity, rhs: Bgs_Protocol_Account_V1_Identity) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._account != rhs_storage._account {return false}
        if _storage._gameAccount != rhs_storage._gameAccount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_ProgramTag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProgramTag"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "program"),
    2: .same(proto: "tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._program)
      case 2: try decoder.decodeSingularFixed32Field(value: &self._tag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    if let v = self._tag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_ProgramTag, rhs: Bgs_Protocol_Account_V1_ProgramTag) -> Bool {
    if lhs._program != rhs._program {return false}
    if lhs._tag != rhs._tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_RegionTag: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegionTag"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "region"),
    2: .same(proto: "tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._region)
      case 2: try decoder.decodeSingularFixed32Field(value: &self._tag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._region {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    if let v = self._tag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_RegionTag, rhs: Bgs_Protocol_Account_V1_RegionTag) -> Bool {
    if lhs._region != rhs._region {return false}
    if lhs._tag != rhs._tag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_AccountFieldTags: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountFieldTags"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "account_level_info_tag"),
    3: .standard(proto: "privacy_info_tag"),
    4: .standard(proto: "parental_control_info_tag"),
    7: .standard(proto: "game_level_info_tags"),
    9: .standard(proto: "game_status_tags"),
    11: .standard(proto: "game_account_tags"),
    12: .standard(proto: "security_status_tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularFixed32Field(value: &self._accountLevelInfoTag)
      case 3: try decoder.decodeSingularFixed32Field(value: &self._privacyInfoTag)
      case 4: try decoder.decodeSingularFixed32Field(value: &self._parentalControlInfoTag)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.gameLevelInfoTags)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.gameStatusTags)
      case 11: try decoder.decodeRepeatedMessageField(value: &self.gameAccountTags)
      case 12: try decoder.decodeSingularFixed32Field(value: &self._securityStatusTag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._accountLevelInfoTag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    if let v = self._privacyInfoTag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    }
    if let v = self._parentalControlInfoTag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
    }
    if !self.gameLevelInfoTags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gameLevelInfoTags, fieldNumber: 7)
    }
    if !self.gameStatusTags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gameStatusTags, fieldNumber: 9)
    }
    if !self.gameAccountTags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gameAccountTags, fieldNumber: 11)
    }
    if let v = self._securityStatusTag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_AccountFieldTags, rhs: Bgs_Protocol_Account_V1_AccountFieldTags) -> Bool {
    if lhs._accountLevelInfoTag != rhs._accountLevelInfoTag {return false}
    if lhs._privacyInfoTag != rhs._privacyInfoTag {return false}
    if lhs._parentalControlInfoTag != rhs._parentalControlInfoTag {return false}
    if lhs.gameLevelInfoTags != rhs.gameLevelInfoTags {return false}
    if lhs.gameStatusTags != rhs.gameStatusTags {return false}
    if lhs.gameAccountTags != rhs.gameAccountTags {return false}
    if lhs._securityStatusTag != rhs._securityStatusTag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameAccountFieldTags: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameAccountFieldTags"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "game_level_info_tag"),
    3: .standard(proto: "game_time_info_tag"),
    4: .standard(proto: "game_status_tag"),
    5: .standard(proto: "raf_info_tag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularFixed32Field(value: &self._gameLevelInfoTag)
      case 3: try decoder.decodeSingularFixed32Field(value: &self._gameTimeInfoTag)
      case 4: try decoder.decodeSingularFixed32Field(value: &self._gameStatusTag)
      case 5: try decoder.decodeSingularFixed32Field(value: &self._rafInfoTag)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._gameLevelInfoTag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    if let v = self._gameTimeInfoTag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    }
    if let v = self._gameStatusTag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
    }
    if let v = self._rafInfoTag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameAccountFieldTags, rhs: Bgs_Protocol_Account_V1_GameAccountFieldTags) -> Bool {
    if lhs._gameLevelInfoTag != rhs._gameLevelInfoTag {return false}
    if lhs._gameTimeInfoTag != rhs._gameTimeInfoTag {return false}
    if lhs._gameStatusTag != rhs._gameStatusTag {return false}
    if lhs._rafInfoTag != rhs._rafInfoTag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_AccountFieldOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountFieldOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "all_fields"),
    2: .standard(proto: "field_account_level_info"),
    3: .standard(proto: "field_privacy_info"),
    4: .standard(proto: "field_parental_control_info"),
    6: .standard(proto: "field_game_level_info"),
    7: .standard(proto: "field_game_status"),
    8: .standard(proto: "field_game_accounts"),
    9: .standard(proto: "field_security_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._allFields)
      case 2: try decoder.decodeSingularBoolField(value: &self._fieldAccountLevelInfo)
      case 3: try decoder.decodeSingularBoolField(value: &self._fieldPrivacyInfo)
      case 4: try decoder.decodeSingularBoolField(value: &self._fieldParentalControlInfo)
      case 6: try decoder.decodeSingularBoolField(value: &self._fieldGameLevelInfo)
      case 7: try decoder.decodeSingularBoolField(value: &self._fieldGameStatus)
      case 8: try decoder.decodeSingularBoolField(value: &self._fieldGameAccounts)
      case 9: try decoder.decodeSingularBoolField(value: &self._fieldSecurityStatus)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._allFields {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._fieldAccountLevelInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._fieldPrivacyInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._fieldParentalControlInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._fieldGameLevelInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._fieldGameStatus {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if let v = self._fieldGameAccounts {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._fieldSecurityStatus {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_AccountFieldOptions, rhs: Bgs_Protocol_Account_V1_AccountFieldOptions) -> Bool {
    if lhs._allFields != rhs._allFields {return false}
    if lhs._fieldAccountLevelInfo != rhs._fieldAccountLevelInfo {return false}
    if lhs._fieldPrivacyInfo != rhs._fieldPrivacyInfo {return false}
    if lhs._fieldParentalControlInfo != rhs._fieldParentalControlInfo {return false}
    if lhs._fieldGameLevelInfo != rhs._fieldGameLevelInfo {return false}
    if lhs._fieldGameStatus != rhs._fieldGameStatus {return false}
    if lhs._fieldGameAccounts != rhs._fieldGameAccounts {return false}
    if lhs._fieldSecurityStatus != rhs._fieldSecurityStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameAccountFieldOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameAccountFieldOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "all_fields"),
    2: .standard(proto: "field_game_level_info"),
    3: .standard(proto: "field_game_time_info"),
    4: .standard(proto: "field_game_status"),
    5: .standard(proto: "field_raf_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._allFields)
      case 2: try decoder.decodeSingularBoolField(value: &self._fieldGameLevelInfo)
      case 3: try decoder.decodeSingularBoolField(value: &self._fieldGameTimeInfo)
      case 4: try decoder.decodeSingularBoolField(value: &self._fieldGameStatus)
      case 5: try decoder.decodeSingularBoolField(value: &self._fieldRafInfo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._allFields {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._fieldGameLevelInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._fieldGameTimeInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._fieldGameStatus {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._fieldRafInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameAccountFieldOptions, rhs: Bgs_Protocol_Account_V1_GameAccountFieldOptions) -> Bool {
    if lhs._allFields != rhs._allFields {return false}
    if lhs._fieldGameLevelInfo != rhs._fieldGameLevelInfo {return false}
    if lhs._fieldGameTimeInfo != rhs._fieldGameTimeInfo {return false}
    if lhs._fieldGameStatus != rhs._fieldGameStatus {return false}
    if lhs._fieldRafInfo != rhs._fieldRafInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_SubscriberReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberReference"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "object_id"),
    2: .standard(proto: "entity_id"),
    3: .standard(proto: "account_options"),
    4: .standard(proto: "account_tags"),
    5: .standard(proto: "game_account_options"),
    6: .standard(proto: "game_account_tags"),
    7: .standard(proto: "subscriber_id"),
  ]

  fileprivate class _StorageClass {
    var _objectID: UInt64? = nil
    var _entityID: Bgs_Protocol_EntityId? = nil
    var _accountOptions: Bgs_Protocol_Account_V1_AccountFieldOptions? = nil
    var _accountTags: Bgs_Protocol_Account_V1_AccountFieldTags? = nil
    var _gameAccountOptions: Bgs_Protocol_Account_V1_GameAccountFieldOptions? = nil
    var _gameAccountTags: Bgs_Protocol_Account_V1_GameAccountFieldTags? = nil
    var _subscriberID: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _objectID = source._objectID
      _entityID = source._entityID
      _accountOptions = source._accountOptions
      _accountTags = source._accountTags
      _gameAccountOptions = source._gameAccountOptions
      _gameAccountTags = source._gameAccountTags
      _subscriberID = source._subscriberID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._entityID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._objectID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._entityID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._accountOptions)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._accountTags)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._gameAccountOptions)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._gameAccountTags)
        case 7: try decoder.decodeSingularUInt64Field(value: &_storage._subscriberID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._objectID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._entityID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._accountOptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._accountTags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._gameAccountOptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._gameAccountTags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._subscriberID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_SubscriberReference, rhs: Bgs_Protocol_Account_V1_SubscriberReference) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._objectID != rhs_storage._objectID {return false}
        if _storage._entityID != rhs_storage._entityID {return false}
        if _storage._accountOptions != rhs_storage._accountOptions {return false}
        if _storage._accountTags != rhs_storage._accountTags {return false}
        if _storage._gameAccountOptions != rhs_storage._gameAccountOptions {return false}
        if _storage._gameAccountTags != rhs_storage._gameAccountTags {return false}
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_AccountLevelInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountLevelInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "licenses"),
    4: .standard(proto: "default_currency"),
    5: .same(proto: "country"),
    6: .standard(proto: "preferred_region"),
    7: .standard(proto: "full_name"),
    8: .standard(proto: "battle_tag"),
    9: .same(proto: "muted"),
    10: .standard(proto: "manual_review"),
    11: .standard(proto: "account_paid_any"),
    12: .standard(proto: "identity_check_status"),
    13: .same(proto: "email"),
    14: .standard(proto: "headless_account"),
    15: .standard(proto: "test_account"),
    17: .standard(proto: "is_sms_protected"),
    18: .standard(proto: "ratings_board_minimum_age"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.licenses) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeRepeatedMessageField(value: &self.licenses)
      case 4: try decoder.decodeSingularFixed32Field(value: &self._defaultCurrency)
      case 5: try decoder.decodeSingularStringField(value: &self._country)
      case 6: try decoder.decodeSingularUInt32Field(value: &self._preferredRegion)
      case 7: try decoder.decodeSingularStringField(value: &self._fullName)
      case 8: try decoder.decodeSingularStringField(value: &self._battleTag)
      case 9: try decoder.decodeSingularBoolField(value: &self._muted)
      case 10: try decoder.decodeSingularBoolField(value: &self._manualReview)
      case 11: try decoder.decodeSingularBoolField(value: &self._accountPaidAny)
      case 12: try decoder.decodeSingularEnumField(value: &self._identityCheckStatus)
      case 13: try decoder.decodeSingularStringField(value: &self._email)
      case 14: try decoder.decodeSingularBoolField(value: &self._headlessAccount)
      case 15: try decoder.decodeSingularBoolField(value: &self._testAccount)
      case 17: try decoder.decodeSingularBoolField(value: &self._isSmsProtected)
      case 18: try decoder.decodeSingularUInt32Field(value: &self._ratingsBoardMinimumAge)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.licenses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.licenses, fieldNumber: 3)
    }
    if let v = self._defaultCurrency {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
    }
    if let v = self._country {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._preferredRegion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._fullName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._battleTag {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    if let v = self._muted {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if let v = self._manualReview {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    if let v = self._accountPaidAny {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    }
    if let v = self._identityCheckStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 12)
    }
    if let v = self._email {
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    }
    if let v = self._headlessAccount {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
    }
    if let v = self._testAccount {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
    }
    if let v = self._isSmsProtected {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
    }
    if let v = self._ratingsBoardMinimumAge {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 18)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_AccountLevelInfo, rhs: Bgs_Protocol_Account_V1_AccountLevelInfo) -> Bool {
    if lhs.licenses != rhs.licenses {return false}
    if lhs._defaultCurrency != rhs._defaultCurrency {return false}
    if lhs._country != rhs._country {return false}
    if lhs._preferredRegion != rhs._preferredRegion {return false}
    if lhs._fullName != rhs._fullName {return false}
    if lhs._battleTag != rhs._battleTag {return false}
    if lhs._muted != rhs._muted {return false}
    if lhs._manualReview != rhs._manualReview {return false}
    if lhs._accountPaidAny != rhs._accountPaidAny {return false}
    if lhs._identityCheckStatus != rhs._identityCheckStatus {return false}
    if lhs._email != rhs._email {return false}
    if lhs._headlessAccount != rhs._headlessAccount {return false}
    if lhs._testAccount != rhs._testAccount {return false}
    if lhs._isSmsProtected != rhs._isSmsProtected {return false}
    if lhs._ratingsBoardMinimumAge != rhs._ratingsBoardMinimumAge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_PrivacyInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PrivacyInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "is_using_rid"),
    4: .standard(proto: "is_visible_for_view_friends"),
    5: .standard(proto: "is_hidden_from_friend_finder"),
    6: .standard(proto: "game_info_privacy"),
    7: .standard(proto: "only_allow_friend_whispers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularBoolField(value: &self._isUsingRid)
      case 4: try decoder.decodeSingularBoolField(value: &self._isVisibleForViewFriends)
      case 5: try decoder.decodeSingularBoolField(value: &self._isHiddenFromFriendFinder)
      case 6: try decoder.decodeSingularEnumField(value: &self._gameInfoPrivacy)
      case 7: try decoder.decodeSingularBoolField(value: &self._onlyAllowFriendWhispers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._isUsingRid {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._isVisibleForViewFriends {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._isHiddenFromFriendFinder {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._gameInfoPrivacy {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    if let v = self._onlyAllowFriendWhispers {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_PrivacyInfo, rhs: Bgs_Protocol_Account_V1_PrivacyInfo) -> Bool {
    if lhs._isUsingRid != rhs._isUsingRid {return false}
    if lhs._isVisibleForViewFriends != rhs._isVisibleForViewFriends {return false}
    if lhs._isHiddenFromFriendFinder != rhs._isHiddenFromFriendFinder {return false}
    if lhs._gameInfoPrivacy != rhs._gameInfoPrivacy {return false}
    if lhs._onlyAllowFriendWhispers != rhs._onlyAllowFriendWhispers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_PrivacyInfo.GameInfoPrivacy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRIVACY_ME"),
    1: .same(proto: "PRIVACY_FRIENDS"),
    2: .same(proto: "PRIVACY_EVERYONE"),
  ]
}

extension Bgs_Protocol_Account_V1_ParentalControlInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ParentalControlInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "timezone"),
    4: .standard(proto: "minutes_per_day"),
    5: .standard(proto: "minutes_per_week"),
    6: .standard(proto: "can_receive_voice"),
    7: .standard(proto: "can_send_voice"),
    8: .standard(proto: "play_schedule"),
    9: .standard(proto: "can_join_group"),
    10: .standard(proto: "can_use_profile"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularStringField(value: &self._timezone)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._minutesPerDay)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._minutesPerWeek)
      case 6: try decoder.decodeSingularBoolField(value: &self._canReceiveVoice)
      case 7: try decoder.decodeSingularBoolField(value: &self._canSendVoice)
      case 8: try decoder.decodeRepeatedBoolField(value: &self.playSchedule)
      case 9: try decoder.decodeSingularBoolField(value: &self._canJoinGroup)
      case 10: try decoder.decodeSingularBoolField(value: &self._canUseProfile)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timezone {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._minutesPerDay {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._minutesPerWeek {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._canReceiveVoice {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._canSendVoice {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if !self.playSchedule.isEmpty {
      try visitor.visitRepeatedBoolField(value: self.playSchedule, fieldNumber: 8)
    }
    if let v = self._canJoinGroup {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if let v = self._canUseProfile {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_ParentalControlInfo, rhs: Bgs_Protocol_Account_V1_ParentalControlInfo) -> Bool {
    if lhs._timezone != rhs._timezone {return false}
    if lhs._minutesPerDay != rhs._minutesPerDay {return false}
    if lhs._minutesPerWeek != rhs._minutesPerWeek {return false}
    if lhs._canReceiveVoice != rhs._canReceiveVoice {return false}
    if lhs._canSendVoice != rhs._canSendVoice {return false}
    if lhs.playSchedule != rhs.playSchedule {return false}
    if lhs._canJoinGroup != rhs._canJoinGroup {return false}
    if lhs._canUseProfile != rhs._canUseProfile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameLevelInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameLevelInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "is_trial"),
    5: .standard(proto: "is_lifetime"),
    6: .standard(proto: "is_restricted"),
    7: .standard(proto: "is_beta"),
    8: .same(proto: "name"),
    9: .same(proto: "program"),
    10: .same(proto: "licenses"),
    11: .standard(proto: "realm_permissions"),
    12: .standard(proto: "last_logout_time_ms"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.licenses) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4: try decoder.decodeSingularBoolField(value: &self._isTrial)
      case 5: try decoder.decodeSingularBoolField(value: &self._isLifetime)
      case 6: try decoder.decodeSingularBoolField(value: &self._isRestricted)
      case 7: try decoder.decodeSingularBoolField(value: &self._isBeta)
      case 8: try decoder.decodeSingularStringField(value: &self._name)
      case 9: try decoder.decodeSingularFixed32Field(value: &self._program)
      case 10: try decoder.decodeRepeatedMessageField(value: &self.licenses)
      case 11: try decoder.decodeSingularUInt32Field(value: &self._realmPermissions)
      case 12: try decoder.decodeSingularUInt64Field(value: &self._lastLogoutTimeMs)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._isTrial {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._isLifetime {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._isRestricted {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._isBeta {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 9)
    }
    if !self.licenses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.licenses, fieldNumber: 10)
    }
    if let v = self._realmPermissions {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
    }
    if let v = self._lastLogoutTimeMs {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameLevelInfo, rhs: Bgs_Protocol_Account_V1_GameLevelInfo) -> Bool {
    if lhs._isTrial != rhs._isTrial {return false}
    if lhs._isLifetime != rhs._isLifetime {return false}
    if lhs._isRestricted != rhs._isRestricted {return false}
    if lhs._isBeta != rhs._isBeta {return false}
    if lhs._name != rhs._name {return false}
    if lhs._program != rhs._program {return false}
    if lhs.licenses != rhs.licenses {return false}
    if lhs._realmPermissions != rhs._realmPermissions {return false}
    if lhs._lastLogoutTimeMs != rhs._lastLogoutTimeMs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameTimeInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameTimeInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "is_unlimited_play_time"),
    5: .standard(proto: "play_time_expires"),
    6: .standard(proto: "is_subscription"),
    7: .standard(proto: "is_recurring_subscription"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularBoolField(value: &self._isUnlimitedPlayTime)
      case 5: try decoder.decodeSingularUInt64Field(value: &self._playTimeExpires)
      case 6: try decoder.decodeSingularBoolField(value: &self._isSubscription)
      case 7: try decoder.decodeSingularBoolField(value: &self._isRecurringSubscription)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._isUnlimitedPlayTime {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._playTimeExpires {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
    }
    if let v = self._isSubscription {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._isRecurringSubscription {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameTimeInfo, rhs: Bgs_Protocol_Account_V1_GameTimeInfo) -> Bool {
    if lhs._isUnlimitedPlayTime != rhs._isUnlimitedPlayTime {return false}
    if lhs._playTimeExpires != rhs._playTimeExpires {return false}
    if lhs._isSubscription != rhs._isSubscription {return false}
    if lhs._isRecurringSubscription != rhs._isRecurringSubscription {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameTimeRemainingInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameTimeRemainingInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "minutes_remaining"),
    2: .standard(proto: "parental_daily_minutes_remaining"),
    3: .standard(proto: "parental_weekly_minutes_remaining"),
    4: .standard(proto: "seconds_remaining_until_kick"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._minutesRemaining)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._parentalDailyMinutesRemaining)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._parentalWeeklyMinutesRemaining)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._secondsRemainingUntilKick)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._minutesRemaining {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._parentalDailyMinutesRemaining {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._parentalWeeklyMinutesRemaining {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._secondsRemainingUntilKick {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameTimeRemainingInfo, rhs: Bgs_Protocol_Account_V1_GameTimeRemainingInfo) -> Bool {
    if lhs._minutesRemaining != rhs._minutesRemaining {return false}
    if lhs._parentalDailyMinutesRemaining != rhs._parentalDailyMinutesRemaining {return false}
    if lhs._parentalWeeklyMinutesRemaining != rhs._parentalWeeklyMinutesRemaining {return false}
    if lhs._secondsRemainingUntilKick != rhs._secondsRemainingUntilKick {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "is_suspended"),
    5: .standard(proto: "is_banned"),
    6: .standard(proto: "suspension_expires"),
    7: .same(proto: "program"),
    8: .standard(proto: "is_locked"),
    9: .standard(proto: "is_bam_unlockable"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4: try decoder.decodeSingularBoolField(value: &self._isSuspended)
      case 5: try decoder.decodeSingularBoolField(value: &self._isBanned)
      case 6: try decoder.decodeSingularUInt64Field(value: &self._suspensionExpires)
      case 7: try decoder.decodeSingularFixed32Field(value: &self._program)
      case 8: try decoder.decodeSingularBoolField(value: &self._isLocked)
      case 9: try decoder.decodeSingularBoolField(value: &self._isBamUnlockable)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._isSuspended {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._isBanned {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._suspensionExpires {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
    }
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 7)
    }
    if let v = self._isLocked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._isBamUnlockable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameStatus, rhs: Bgs_Protocol_Account_V1_GameStatus) -> Bool {
    if lhs._isSuspended != rhs._isSuspended {return false}
    if lhs._isBanned != rhs._isBanned {return false}
    if lhs._suspensionExpires != rhs._suspensionExpires {return false}
    if lhs._program != rhs._program {return false}
    if lhs._isLocked != rhs._isLocked {return false}
    if lhs._isBamUnlockable != rhs._isBamUnlockable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_RAFInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RAFInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "raf_info"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._rafInfo)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._rafInfo {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_RAFInfo, rhs: Bgs_Protocol_Account_V1_RAFInfo) -> Bool {
    if lhs._rafInfo != rhs._rafInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameSessionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameSessionInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "start_time"),
    4: .same(proto: "location"),
    5: .standard(proto: "has_benefactor"),
    6: .standard(proto: "is_using_igr"),
    7: .standard(proto: "parental_controls_active"),
    8: .standard(proto: "start_time_sec"),
    9: .standard(proto: "igr_id"),
  ]

  fileprivate class _StorageClass {
    var _startTime: UInt32? = nil
    var _location: Bgs_Protocol_Account_V1_GameSessionLocation? = nil
    var _hasBenefactor_p: Bool? = nil
    var _isUsingIgr: Bool? = nil
    var _parentalControlsActive: Bool? = nil
    var _startTimeSec: UInt64? = nil
    var _igrID: Bgs_Protocol_Account_V1_IgrId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _startTime = source._startTime
      _location = source._location
      _hasBenefactor_p = source._hasBenefactor_p
      _isUsingIgr = source._isUsingIgr
      _parentalControlsActive = source._parentalControlsActive
      _startTimeSec = source._startTimeSec
      _igrID = source._igrID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._igrID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._startTime)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._hasBenefactor_p)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._isUsingIgr)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._parentalControlsActive)
        case 8: try decoder.decodeSingularUInt64Field(value: &_storage._startTimeSec)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._igrID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._startTime {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._hasBenefactor_p {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      }
      if let v = _storage._isUsingIgr {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      }
      if let v = _storage._parentalControlsActive {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      }
      if let v = _storage._startTimeSec {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._igrID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameSessionInfo, rhs: Bgs_Protocol_Account_V1_GameSessionInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._hasBenefactor_p != rhs_storage._hasBenefactor_p {return false}
        if _storage._isUsingIgr != rhs_storage._isUsingIgr {return false}
        if _storage._parentalControlsActive != rhs_storage._parentalControlsActive {return false}
        if _storage._startTimeSec != rhs_storage._startTimeSec {return false}
        if _storage._igrID != rhs_storage._igrID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameSessionUpdateInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameSessionUpdateInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    8: .same(proto: "cais"),
  ]

  fileprivate class _StorageClass {
    var _cais: Bgs_Protocol_Account_V1_CAIS? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cais = source._cais
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 8: try decoder.decodeSingularMessageField(value: &_storage._cais)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cais {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameSessionUpdateInfo, rhs: Bgs_Protocol_Account_V1_GameSessionUpdateInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cais != rhs_storage._cais {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameSessionLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameSessionLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ip_address"),
    2: .same(proto: "country"),
    3: .same(proto: "city"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._ipAddress)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._country)
      case 3: try decoder.decodeSingularStringField(value: &self._city)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._ipAddress {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._country {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._city {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameSessionLocation, rhs: Bgs_Protocol_Account_V1_GameSessionLocation) -> Bool {
    if lhs._ipAddress != rhs._ipAddress {return false}
    if lhs._country != rhs._country {return false}
    if lhs._city != rhs._city {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_CAIS: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CAIS"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "played_minutes"),
    2: .standard(proto: "rested_minutes"),
    3: .standard(proto: "last_heard_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._playedMinutes)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._restedMinutes)
      case 3: try decoder.decodeSingularUInt64Field(value: &self._lastHeardTime)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._playedMinutes {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._restedMinutes {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._lastHeardTime {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_CAIS, rhs: Bgs_Protocol_Account_V1_CAIS) -> Bool {
    if lhs._playedMinutes != rhs._playedMinutes {return false}
    if lhs._restedMinutes != rhs._restedMinutes {return false}
    if lhs._lastHeardTime != rhs._lastHeardTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameAccountList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameAccountList"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "region"),
    4: .same(proto: "handle"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.handle) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularUInt32Field(value: &self._region)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.handle)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._region {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if !self.handle.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.handle, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameAccountList, rhs: Bgs_Protocol_Account_V1_GameAccountList) -> Bool {
    if lhs._region != rhs._region {return false}
    if lhs.handle != rhs.handle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_SecurityStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SecurityStatus"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sms_protect_enabled"),
    2: .standard(proto: "email_verified"),
    3: .standard(proto: "authenticator_enabled"),
    4: .standard(proto: "sqa_enabled"),
    5: .standard(proto: "authenticator_required"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._smsProtectEnabled)
      case 2: try decoder.decodeSingularBoolField(value: &self._emailVerified)
      case 3: try decoder.decodeSingularBoolField(value: &self._authenticatorEnabled)
      case 4: try decoder.decodeSingularBoolField(value: &self._sqaEnabled)
      case 5: try decoder.decodeSingularBoolField(value: &self._authenticatorRequired)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._smsProtectEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._emailVerified {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._authenticatorEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._sqaEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._authenticatorRequired {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_SecurityStatus, rhs: Bgs_Protocol_Account_V1_SecurityStatus) -> Bool {
    if lhs._smsProtectEnabled != rhs._smsProtectEnabled {return false}
    if lhs._emailVerified != rhs._emailVerified {return false}
    if lhs._authenticatorEnabled != rhs._authenticatorEnabled {return false}
    if lhs._sqaEnabled != rhs._sqaEnabled {return false}
    if lhs._authenticatorRequired != rhs._authenticatorRequired {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_AccountState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_level_info"),
    2: .standard(proto: "privacy_info"),
    3: .standard(proto: "parental_control_info"),
    5: .standard(proto: "game_level_info"),
    6: .standard(proto: "game_status"),
    7: .standard(proto: "game_accounts"),
    8: .standard(proto: "security_status"),
  ]

  fileprivate class _StorageClass {
    var _accountLevelInfo: Bgs_Protocol_Account_V1_AccountLevelInfo? = nil
    var _privacyInfo: Bgs_Protocol_Account_V1_PrivacyInfo? = nil
    var _parentalControlInfo: Bgs_Protocol_Account_V1_ParentalControlInfo? = nil
    var _gameLevelInfo: [Bgs_Protocol_Account_V1_GameLevelInfo] = []
    var _gameStatus: [Bgs_Protocol_Account_V1_GameStatus] = []
    var _gameAccounts: [Bgs_Protocol_Account_V1_GameAccountList] = []
    var _securityStatus: Bgs_Protocol_Account_V1_SecurityStatus? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountLevelInfo = source._accountLevelInfo
      _privacyInfo = source._privacyInfo
      _parentalControlInfo = source._parentalControlInfo
      _gameLevelInfo = source._gameLevelInfo
      _gameStatus = source._gameStatus
      _gameAccounts = source._gameAccounts
      _securityStatus = source._securityStatus
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountLevelInfo, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._gameLevelInfo) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._gameAccounts) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._accountLevelInfo)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._privacyInfo)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._parentalControlInfo)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._gameLevelInfo)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._gameStatus)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._gameAccounts)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._securityStatus)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountLevelInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._privacyInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._parentalControlInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._gameLevelInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gameLevelInfo, fieldNumber: 5)
      }
      if !_storage._gameStatus.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gameStatus, fieldNumber: 6)
      }
      if !_storage._gameAccounts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gameAccounts, fieldNumber: 7)
      }
      if let v = _storage._securityStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_AccountState, rhs: Bgs_Protocol_Account_V1_AccountState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountLevelInfo != rhs_storage._accountLevelInfo {return false}
        if _storage._privacyInfo != rhs_storage._privacyInfo {return false}
        if _storage._parentalControlInfo != rhs_storage._parentalControlInfo {return false}
        if _storage._gameLevelInfo != rhs_storage._gameLevelInfo {return false}
        if _storage._gameStatus != rhs_storage._gameStatus {return false}
        if _storage._gameAccounts != rhs_storage._gameAccounts {return false}
        if _storage._securityStatus != rhs_storage._securityStatus {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_AccountStateTagged: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AccountStateTagged"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_state"),
    2: .standard(proto: "account_tags"),
  ]

  fileprivate class _StorageClass {
    var _accountState: Bgs_Protocol_Account_V1_AccountState? = nil
    var _accountTags: Bgs_Protocol_Account_V1_AccountFieldTags? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountState = source._accountState
      _accountTags = source._accountTags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountState, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._accountState)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._accountTags)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._accountTags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_AccountStateTagged, rhs: Bgs_Protocol_Account_V1_AccountStateTagged) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountState != rhs_storage._accountState {return false}
        if _storage._accountTags != rhs_storage._accountTags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameAccountState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameAccountState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_level_info"),
    2: .standard(proto: "game_time_info"),
    3: .standard(proto: "game_status"),
    4: .standard(proto: "raf_info"),
  ]

  fileprivate class _StorageClass {
    var _gameLevelInfo: Bgs_Protocol_Account_V1_GameLevelInfo? = nil
    var _gameTimeInfo: Bgs_Protocol_Account_V1_GameTimeInfo? = nil
    var _gameStatus: Bgs_Protocol_Account_V1_GameStatus? = nil
    var _rafInfo: Bgs_Protocol_Account_V1_RAFInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gameLevelInfo = source._gameLevelInfo
      _gameTimeInfo = source._gameTimeInfo
      _gameStatus = source._gameStatus
      _rafInfo = source._rafInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._gameLevelInfo, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._gameLevelInfo)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._gameTimeInfo)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._gameStatus)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._rafInfo)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._gameLevelInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._gameTimeInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._gameStatus {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._rafInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameAccountState, rhs: Bgs_Protocol_Account_V1_GameAccountState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._gameLevelInfo != rhs_storage._gameLevelInfo {return false}
        if _storage._gameTimeInfo != rhs_storage._gameTimeInfo {return false}
        if _storage._gameStatus != rhs_storage._gameStatus {return false}
        if _storage._rafInfo != rhs_storage._rafInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_GameAccountStateTagged: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameAccountStateTagged"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_account_state"),
    2: .standard(proto: "game_account_tags"),
  ]

  fileprivate class _StorageClass {
    var _gameAccountState: Bgs_Protocol_Account_V1_GameAccountState? = nil
    var _gameAccountTags: Bgs_Protocol_Account_V1_GameAccountFieldTags? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gameAccountState = source._gameAccountState
      _gameAccountTags = source._gameAccountTags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._gameAccountState, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._gameAccountState)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._gameAccountTags)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._gameAccountState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._gameAccountTags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_GameAccountStateTagged, rhs: Bgs_Protocol_Account_V1_GameAccountStateTagged) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._gameAccountState != rhs_storage._gameAccountState {return false}
        if _storage._gameAccountTags != rhs_storage._gameAccountTags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_AuthorizedData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthorizedData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "license"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._data)
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.license)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._data {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if !self.license.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.license, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_AuthorizedData, rhs: Bgs_Protocol_Account_V1_AuthorizedData) -> Bool {
    if lhs._data != rhs._data {return false}
    if lhs.license != rhs.license {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_IgrId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IgrId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_account"),
    2: .standard(proto: "external_id"),
  ]

  fileprivate class _StorageClass {
    var _type: Bgs_Protocol_Account_V1_IgrId.OneOf_Type?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if case .gameAccount(let v)? = _storage._type, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Bgs_Protocol_Account_V1_GameAccountHandle?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .gameAccount(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .gameAccount(v)}
        case 2:
          if _storage._type != nil {try decoder.handleConflictingOneOf()}
          var v: UInt32?
          try decoder.decodeSingularFixed32Field(value: &v)
          if let v = v {_storage._type = .externalID(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._type {
      case .gameAccount(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .externalID(let v)?:
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_IgrId, rhs: Bgs_Protocol_Account_V1_IgrId) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Account_V1_IgrAddress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IgrAddress"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_address"),
    2: .same(proto: "region"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._clientAddress)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._region)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._clientAddress {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._region {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Account_V1_IgrAddress, rhs: Bgs_Protocol_Account_V1_IgrAddress) -> Bool {
    if lhs._clientAddress != rhs._clientAddress {return false}
    if lhs._region != rhs._region {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
