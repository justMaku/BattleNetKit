// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/report_types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Report_V1_ReportType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var userDescription: String {
    get {return _storage._userDescription ?? String()}
    set {_uniqueStorage()._userDescription = newValue}
  }
  /// Returns true if `userDescription` has been explicitly set.
  public var hasUserDescription: Bool {return _storage._userDescription != nil}
  /// Clears the value of `userDescription`. Subsequent reads from it will return its default value.
  public mutating func clearUserDescription() {_uniqueStorage()._userDescription = nil}

  public var type: OneOf_Type? {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var customReport: Bgs_Protocol_Report_V1_CustomReport {
    get {
      if case .customReport(let v)? = _storage._type {return v}
      return Bgs_Protocol_Report_V1_CustomReport()
    }
    set {_uniqueStorage()._type = .customReport(newValue)}
  }

  public var spamReport: Bgs_Protocol_Report_V1_SpamReport {
    get {
      if case .spamReport(let v)? = _storage._type {return v}
      return Bgs_Protocol_Report_V1_SpamReport()
    }
    set {_uniqueStorage()._type = .spamReport(newValue)}
  }

  public var harassmentReport: Bgs_Protocol_Report_V1_HarassmentReport {
    get {
      if case .harassmentReport(let v)? = _storage._type {return v}
      return Bgs_Protocol_Report_V1_HarassmentReport()
    }
    set {_uniqueStorage()._type = .harassmentReport(newValue)}
  }

  public var realLifeThreatReport: Bgs_Protocol_Report_V1_RealLifeThreatReport {
    get {
      if case .realLifeThreatReport(let v)? = _storage._type {return v}
      return Bgs_Protocol_Report_V1_RealLifeThreatReport()
    }
    set {_uniqueStorage()._type = .realLifeThreatReport(newValue)}
  }

  public var inappropriateBattleTagReport: Bgs_Protocol_Report_V1_InappropriateBattleTagReport {
    get {
      if case .inappropriateBattleTagReport(let v)? = _storage._type {return v}
      return Bgs_Protocol_Report_V1_InappropriateBattleTagReport()
    }
    set {_uniqueStorage()._type = .inappropriateBattleTagReport(newValue)}
  }

  public var hackingReport: Bgs_Protocol_Report_V1_HackingReport {
    get {
      if case .hackingReport(let v)? = _storage._type {return v}
      return Bgs_Protocol_Report_V1_HackingReport()
    }
    set {_uniqueStorage()._type = .hackingReport(newValue)}
  }

  public var bottingReport: Bgs_Protocol_Report_V1_BottingReport {
    get {
      if case .bottingReport(let v)? = _storage._type {return v}
      return Bgs_Protocol_Report_V1_BottingReport()
    }
    set {_uniqueStorage()._type = .bottingReport(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case customReport(Bgs_Protocol_Report_V1_CustomReport)
    case spamReport(Bgs_Protocol_Report_V1_SpamReport)
    case harassmentReport(Bgs_Protocol_Report_V1_HarassmentReport)
    case realLifeThreatReport(Bgs_Protocol_Report_V1_RealLifeThreatReport)
    case inappropriateBattleTagReport(Bgs_Protocol_Report_V1_InappropriateBattleTagReport)
    case hackingReport(Bgs_Protocol_Report_V1_HackingReport)
    case bottingReport(Bgs_Protocol_Report_V1_BottingReport)

  #if !swift(>=4.1)
    public static func ==(lhs: Bgs_Protocol_Report_V1_ReportType.OneOf_Type, rhs: Bgs_Protocol_Report_V1_ReportType.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.customReport(let l), .customReport(let r)): return l == r
      case (.spamReport(let l), .spamReport(let r)): return l == r
      case (.harassmentReport(let l), .harassmentReport(let r)): return l == r
      case (.realLifeThreatReport(let l), .realLifeThreatReport(let r)): return l == r
      case (.inappropriateBattleTagReport(let l), .inappropriateBattleTagReport(let r)): return l == r
      case (.hackingReport(let l), .hackingReport(let r)): return l == r
      case (.bottingReport(let l), .bottingReport(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Report_V1_CustomReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: String {
    get {return _type ?? String()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {self._type = nil}

  public var programID: String {
    get {return _programID ?? String()}
    set {_programID = newValue}
  }
  /// Returns true if `programID` has been explicitly set.
  public var hasProgramID: Bool {return self._programID != nil}
  /// Clears the value of `programID`. Subsequent reads from it will return its default value.
  public mutating func clearProgramID() {self._programID = nil}

  public var attribute: [Bgs_Protocol_Attribute] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _type: String? = nil
  fileprivate var _programID: String? = nil
}

public struct Bgs_Protocol_Report_V1_SpamReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var target: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._target ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  public var hasTarget: Bool {return _storage._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  public mutating func clearTarget() {_uniqueStorage()._target = nil}

  public var source: Bgs_Protocol_Report_V1_SpamReport.SpamSource {
    get {return _storage._source ?? .other}
    set {_uniqueStorage()._source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  public mutating func clearSource() {_uniqueStorage()._source = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum SpamSource: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case other // = 1
    case friendInvitation // = 2
    case whisper // = 3
    case chat // = 4

    public init() {
      self = .other
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 1: self = .other
      case 2: self = .friendInvitation
      case 3: self = .whisper
      case 4: self = .chat
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .other: return 1
      case .friendInvitation: return 2
      case .whisper: return 3
      case .chat: return 4
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Bgs_Protocol_Report_V1_SpamReport.SpamSource: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct Bgs_Protocol_Report_V1_HarassmentReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var target: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._target ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  public var hasTarget: Bool {return _storage._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  public mutating func clearTarget() {_uniqueStorage()._target = nil}

  public var text: String {
    get {return _storage._text ?? String()}
    set {_uniqueStorage()._text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  public var hasText: Bool {return _storage._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  public mutating func clearText() {_uniqueStorage()._text = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Report_V1_RealLifeThreatReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var target: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._target ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  public var hasTarget: Bool {return _storage._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  public mutating func clearTarget() {_uniqueStorage()._target = nil}

  public var text: String {
    get {return _storage._text ?? String()}
    set {_uniqueStorage()._text = newValue}
  }
  /// Returns true if `text` has been explicitly set.
  public var hasText: Bool {return _storage._text != nil}
  /// Clears the value of `text`. Subsequent reads from it will return its default value.
  public mutating func clearText() {_uniqueStorage()._text = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Report_V1_InappropriateBattleTagReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var target: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._target ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  public var hasTarget: Bool {return _storage._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  public mutating func clearTarget() {_uniqueStorage()._target = nil}

  public var battleTag: String {
    get {return _storage._battleTag ?? String()}
    set {_uniqueStorage()._battleTag = newValue}
  }
  /// Returns true if `battleTag` has been explicitly set.
  public var hasBattleTag: Bool {return _storage._battleTag != nil}
  /// Clears the value of `battleTag`. Subsequent reads from it will return its default value.
  public mutating func clearBattleTag() {_uniqueStorage()._battleTag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Report_V1_HackingReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var target: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._target ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  public var hasTarget: Bool {return _storage._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  public mutating func clearTarget() {_uniqueStorage()._target = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Report_V1_BottingReport {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var target: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._target ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  public var hasTarget: Bool {return _storage._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  public mutating func clearTarget() {_uniqueStorage()._target = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Report_V1_Report {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var reportType: String {
    get {return _storage._reportType ?? String()}
    set {_uniqueStorage()._reportType = newValue}
  }
  /// Returns true if `reportType` has been explicitly set.
  public var hasReportType: Bool {return _storage._reportType != nil}
  /// Clears the value of `reportType`. Subsequent reads from it will return its default value.
  public mutating func clearReportType() {_uniqueStorage()._reportType = nil}

  public var attribute: [Bgs_Protocol_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var reportQos: Int32 {
    get {return _storage._reportQos ?? 0}
    set {_uniqueStorage()._reportQos = newValue}
  }
  /// Returns true if `reportQos` has been explicitly set.
  public var hasReportQos: Bool {return _storage._reportQos != nil}
  /// Clears the value of `reportQos`. Subsequent reads from it will return its default value.
  public mutating func clearReportQos() {_uniqueStorage()._reportQos = nil}

  public var reportingAccount: Bgs_Protocol_EntityId {
    get {return _storage._reportingAccount ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._reportingAccount = newValue}
  }
  /// Returns true if `reportingAccount` has been explicitly set.
  public var hasReportingAccount: Bool {return _storage._reportingAccount != nil}
  /// Clears the value of `reportingAccount`. Subsequent reads from it will return its default value.
  public mutating func clearReportingAccount() {_uniqueStorage()._reportingAccount = nil}

  public var reportingGameAccount: Bgs_Protocol_EntityId {
    get {return _storage._reportingGameAccount ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._reportingGameAccount = newValue}
  }
  /// Returns true if `reportingGameAccount` has been explicitly set.
  public var hasReportingGameAccount: Bool {return _storage._reportingGameAccount != nil}
  /// Clears the value of `reportingGameAccount`. Subsequent reads from it will return its default value.
  public mutating func clearReportingGameAccount() {_uniqueStorage()._reportingGameAccount = nil}

  public var reportTimestamp: UInt64 {
    get {return _storage._reportTimestamp ?? 0}
    set {_uniqueStorage()._reportTimestamp = newValue}
  }
  /// Returns true if `reportTimestamp` has been explicitly set.
  public var hasReportTimestamp: Bool {return _storage._reportTimestamp != nil}
  /// Clears the value of `reportTimestamp`. Subsequent reads from it will return its default value.
  public mutating func clearReportTimestamp() {_uniqueStorage()._reportTimestamp = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.report.v1"

extension Bgs_Protocol_Report_V1_ReportType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "user_description"),
    10: .standard(proto: "custom_report"),
    11: .standard(proto: "spam_report"),
    12: .standard(proto: "harassment_report"),
    13: .standard(proto: "real_life_threat_report"),
    14: .standard(proto: "inappropriate_battle_tag_report"),
    15: .standard(proto: "hacking_report"),
    16: .standard(proto: "botting_report"),
  ]

  fileprivate class _StorageClass {
    var _userDescription: String? = nil
    var _type: Bgs_Protocol_Report_V1_ReportType.OneOf_Type?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _userDescription = source._userDescription
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._type {
      case .customReport(let v)?: if !v.isInitialized {return false}
      case .spamReport(let v)?: if !v.isInitialized {return false}
      case .harassmentReport(let v)?: if !v.isInitialized {return false}
      case .realLifeThreatReport(let v)?: if !v.isInitialized {return false}
      case .inappropriateBattleTagReport(let v)?: if !v.isInitialized {return false}
      case .hackingReport(let v)?: if !v.isInitialized {return false}
      case .bottingReport(let v)?: if !v.isInitialized {return false}
      default: break
      }
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._userDescription)
        case 10:
          var v: Bgs_Protocol_Report_V1_CustomReport?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .customReport(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .customReport(v)}
        case 11:
          var v: Bgs_Protocol_Report_V1_SpamReport?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .spamReport(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .spamReport(v)}
        case 12:
          var v: Bgs_Protocol_Report_V1_HarassmentReport?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .harassmentReport(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .harassmentReport(v)}
        case 13:
          var v: Bgs_Protocol_Report_V1_RealLifeThreatReport?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .realLifeThreatReport(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .realLifeThreatReport(v)}
        case 14:
          var v: Bgs_Protocol_Report_V1_InappropriateBattleTagReport?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .inappropriateBattleTagReport(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .inappropriateBattleTagReport(v)}
        case 15:
          var v: Bgs_Protocol_Report_V1_HackingReport?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .hackingReport(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .hackingReport(v)}
        case 16:
          var v: Bgs_Protocol_Report_V1_BottingReport?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .bottingReport(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .bottingReport(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._userDescription {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      switch _storage._type {
      case .customReport(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .spamReport(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .harassmentReport(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .realLifeThreatReport(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .inappropriateBattleTagReport(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .hackingReport(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case .bottingReport(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V1_ReportType, rhs: Bgs_Protocol_Report_V1_ReportType) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._userDescription != rhs_storage._userDescription {return false}
        if _storage._type != rhs_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Report_V1_CustomReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "program_id"),
    3: .same(proto: "attribute"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.attribute) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._type)
      case 2: try decoder.decodeSingularStringField(value: &self._programID)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.attribute)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._programID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.attribute.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attribute, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V1_CustomReport, rhs: Bgs_Protocol_Report_V1_CustomReport) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._programID != rhs._programID {return false}
    if lhs.attribute != rhs.attribute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Report_V1_SpamReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SpamReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "source"),
  ]

  fileprivate class _StorageClass {
    var _target: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _source: Bgs_Protocol_Report_V1_SpamReport.SpamSource? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
      _source = source._source
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._target)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._source)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._source {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V1_SpamReport, rhs: Bgs_Protocol_Report_V1_SpamReport) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._target != rhs_storage._target {return false}
        if _storage._source != rhs_storage._source {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Report_V1_SpamReport.SpamSource: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "OTHER"),
    2: .same(proto: "FRIEND_INVITATION"),
    3: .same(proto: "WHISPER"),
    4: .same(proto: "CHAT"),
  ]
}

extension Bgs_Protocol_Report_V1_HarassmentReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HarassmentReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "text"),
  ]

  fileprivate class _StorageClass {
    var _target: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _text: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
      _text = source._text
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._target)
        case 2: try decoder.decodeSingularStringField(value: &_storage._text)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._text {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V1_HarassmentReport, rhs: Bgs_Protocol_Report_V1_HarassmentReport) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._target != rhs_storage._target {return false}
        if _storage._text != rhs_storage._text {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Report_V1_RealLifeThreatReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RealLifeThreatReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .same(proto: "text"),
  ]

  fileprivate class _StorageClass {
    var _target: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _text: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
      _text = source._text
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._target)
        case 2: try decoder.decodeSingularStringField(value: &_storage._text)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._text {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V1_RealLifeThreatReport, rhs: Bgs_Protocol_Report_V1_RealLifeThreatReport) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._target != rhs_storage._target {return false}
        if _storage._text != rhs_storage._text {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Report_V1_InappropriateBattleTagReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InappropriateBattleTagReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    2: .standard(proto: "battle_tag"),
  ]

  fileprivate class _StorageClass {
    var _target: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _battleTag: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
      _battleTag = source._battleTag
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._target)
        case 2: try decoder.decodeSingularStringField(value: &_storage._battleTag)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._battleTag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V1_InappropriateBattleTagReport, rhs: Bgs_Protocol_Report_V1_InappropriateBattleTagReport) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._target != rhs_storage._target {return false}
        if _storage._battleTag != rhs_storage._battleTag {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Report_V1_HackingReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HackingReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
  ]

  fileprivate class _StorageClass {
    var _target: Bgs_Protocol_Account_V1_GameAccountHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._target)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V1_HackingReport, rhs: Bgs_Protocol_Report_V1_HackingReport) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._target != rhs_storage._target {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Report_V1_BottingReport: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BottingReport"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
  ]

  fileprivate class _StorageClass {
    var _target: Bgs_Protocol_Account_V1_GameAccountHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._target)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V1_BottingReport, rhs: Bgs_Protocol_Report_V1_BottingReport) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._target != rhs_storage._target {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Report_V1_Report: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Report"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "report_type"),
    2: .same(proto: "attribute"),
    3: .standard(proto: "report_qos"),
    4: .standard(proto: "reporting_account"),
    5: .standard(proto: "reporting_game_account"),
    6: .standard(proto: "report_timestamp"),
  ]

  fileprivate class _StorageClass {
    var _reportType: String? = nil
    var _attribute: [Bgs_Protocol_Attribute] = []
    var _reportQos: Int32? = nil
    var _reportingAccount: Bgs_Protocol_EntityId? = nil
    var _reportingGameAccount: Bgs_Protocol_EntityId? = nil
    var _reportTimestamp: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _reportType = source._reportType
      _attribute = source._attribute
      _reportQos = source._reportQos
      _reportingAccount = source._reportingAccount
      _reportingGameAccount = source._reportingGameAccount
      _reportTimestamp = source._reportTimestamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._reportType == nil {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._attribute) {return false}
      if let v = _storage._reportingAccount, !v.isInitialized {return false}
      if let v = _storage._reportingGameAccount, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._reportType)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._reportQos)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._reportingAccount)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._reportingGameAccount)
        case 6: try decoder.decodeSingularFixed64Field(value: &_storage._reportTimestamp)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._reportType {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 2)
      }
      if let v = _storage._reportQos {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._reportingAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._reportingGameAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._reportTimestamp {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V1_Report, rhs: Bgs_Protocol_Report_V1_Report) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._reportType != rhs_storage._reportType {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._reportQos != rhs_storage._reportQos {return false}
        if _storage._reportingAccount != rhs_storage._reportingAccount {return false}
        if _storage._reportingGameAccount != rhs_storage._reportingGameAccount {return false}
        if _storage._reportTimestamp != rhs_storage._reportTimestamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
