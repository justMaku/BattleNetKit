// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: LogonRequest.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct LogonRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = "LogonRequest"

  public var program: String {
    get {return _program ?? String()}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var platform: String {
    get {return _platform ?? String()}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  public var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  public mutating func clearPlatform() {self._platform = nil}

  public var locale: String {
    get {return _locale ?? String()}
    set {_locale = newValue}
  }
  /// Returns true if `locale` has been explicitly set.
  public var hasLocale: Bool {return self._locale != nil}
  /// Clears the value of `locale`. Subsequent reads from it will return its default value.
  public mutating func clearLocale() {self._locale = nil}

  public var email: String {
    get {return _email ?? String()}
    set {_email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  public var hasEmail: Bool {return self._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  public mutating func clearEmail() {self._email = nil}

  public var version: String {
    get {return _version ?? String()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  public var applicationVersion: Int32 {
    get {return _applicationVersion ?? 0}
    set {_applicationVersion = newValue}
  }
  /// Returns true if `applicationVersion` has been explicitly set.
  public var hasApplicationVersion: Bool {return self._applicationVersion != nil}
  /// Clears the value of `applicationVersion`. Subsequent reads from it will return its default value.
  public mutating func clearApplicationVersion() {self._applicationVersion = nil}

  public var publicComputer: Bool {
    get {return _publicComputer ?? false}
    set {_publicComputer = newValue}
  }
  /// Returns true if `publicComputer` has been explicitly set.
  public var hasPublicComputer: Bool {return self._publicComputer != nil}
  /// Clears the value of `publicComputer`. Subsequent reads from it will return its default value.
  public mutating func clearPublicComputer() {self._publicComputer = nil}

  public var ssoID: Data {
    get {return _ssoID ?? SwiftProtobuf.Internal.emptyData}
    set {_ssoID = newValue}
  }
  /// Returns true if `ssoID` has been explicitly set.
  public var hasSsoID: Bool {return self._ssoID != nil}
  /// Clears the value of `ssoID`. Subsequent reads from it will return its default value.
  public mutating func clearSsoID() {self._ssoID = nil}

  public var disconnectOnCookieFail: Bool {
    get {return _disconnectOnCookieFail ?? false}
    set {_disconnectOnCookieFail = newValue}
  }
  /// Returns true if `disconnectOnCookieFail` has been explicitly set.
  public var hasDisconnectOnCookieFail: Bool {return self._disconnectOnCookieFail != nil}
  /// Clears the value of `disconnectOnCookieFail`. Subsequent reads from it will return its default value.
  public mutating func clearDisconnectOnCookieFail() {self._disconnectOnCookieFail = nil}

  public var allowLogonQueueNotifications: Bool {
    get {return _allowLogonQueueNotifications ?? false}
    set {_allowLogonQueueNotifications = newValue}
  }
  /// Returns true if `allowLogonQueueNotifications` has been explicitly set.
  public var hasAllowLogonQueueNotifications: Bool {return self._allowLogonQueueNotifications != nil}
  /// Clears the value of `allowLogonQueueNotifications`. Subsequent reads from it will return its default value.
  public mutating func clearAllowLogonQueueNotifications() {self._allowLogonQueueNotifications = nil}

  public var webClientVerification: Bool {
    get {return _webClientVerification ?? false}
    set {_webClientVerification = newValue}
  }
  /// Returns true if `webClientVerification` has been explicitly set.
  public var hasWebClientVerification: Bool {return self._webClientVerification != nil}
  /// Clears the value of `webClientVerification`. Subsequent reads from it will return its default value.
  public mutating func clearWebClientVerification() {self._webClientVerification = nil}

  public var cachedWebCredentials: Data {
    get {return _cachedWebCredentials ?? SwiftProtobuf.Internal.emptyData}
    set {_cachedWebCredentials = newValue}
  }
  /// Returns true if `cachedWebCredentials` has been explicitly set.
  public var hasCachedWebCredentials: Bool {return self._cachedWebCredentials != nil}
  /// Clears the value of `cachedWebCredentials`. Subsequent reads from it will return its default value.
  public mutating func clearCachedWebCredentials() {self._cachedWebCredentials = nil}

  public var userAgent: String {
    get {return _userAgent ?? String()}
    set {_userAgent = newValue}
  }
  /// Returns true if `userAgent` has been explicitly set.
  public var hasUserAgent: Bool {return self._userAgent != nil}
  /// Clears the value of `userAgent`. Subsequent reads from it will return its default value.
  public mutating func clearUserAgent() {self._userAgent = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._program)
      case 2: try decoder.decodeSingularStringField(value: &self._platform)
      case 3: try decoder.decodeSingularStringField(value: &self._locale)
      case 4: try decoder.decodeSingularStringField(value: &self._email)
      case 5: try decoder.decodeSingularStringField(value: &self._version)
      case 6: try decoder.decodeSingularInt32Field(value: &self._applicationVersion)
      case 7: try decoder.decodeSingularBoolField(value: &self._publicComputer)
      case 8: try decoder.decodeSingularBytesField(value: &self._ssoID)
      case 9: try decoder.decodeSingularBoolField(value: &self._disconnectOnCookieFail)
      case 10: try decoder.decodeSingularBoolField(value: &self._allowLogonQueueNotifications)
      case 11: try decoder.decodeSingularBoolField(value: &self._webClientVerification)
      case 12: try decoder.decodeSingularBytesField(value: &self._cachedWebCredentials)
      case 14: try decoder.decodeSingularStringField(value: &self._userAgent)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._program {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._platform {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._locale {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._email {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._version {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._applicationVersion {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._publicComputer {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if let v = self._ssoID {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 8)
    }
    if let v = self._disconnectOnCookieFail {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if let v = self._allowLogonQueueNotifications {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    if let v = self._webClientVerification {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    }
    if let v = self._cachedWebCredentials {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 12)
    }
    if let v = self._userAgent {
      try visitor.visitSingularStringField(value: v, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _program: String? = nil
  fileprivate var _platform: String? = nil
  fileprivate var _locale: String? = nil
  fileprivate var _email: String? = nil
  fileprivate var _version: String? = nil
  fileprivate var _applicationVersion: Int32? = nil
  fileprivate var _publicComputer: Bool? = nil
  fileprivate var _ssoID: Data? = nil
  fileprivate var _disconnectOnCookieFail: Bool? = nil
  fileprivate var _allowLogonQueueNotifications: Bool? = nil
  fileprivate var _webClientVerification: Bool? = nil
  fileprivate var _cachedWebCredentials: Data? = nil
  fileprivate var _userAgent: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension LogonRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "program"),
    2: .same(proto: "platform"),
    3: .same(proto: "locale"),
    4: .same(proto: "email"),
    5: .same(proto: "version"),
    6: .standard(proto: "application_version"),
    7: .standard(proto: "public_computer"),
    8: .standard(proto: "sso_id"),
    9: .standard(proto: "disconnect_on_cookie_fail"),
    10: .standard(proto: "allow_logon_queue_notifications"),
    11: .standard(proto: "web_client_verification"),
    12: .standard(proto: "cached_web_credentials"),
    14: .standard(proto: "user_agent"),
  ]

  public func _protobuf_generated_isEqualTo(other: LogonRequest) -> Bool {
    if self._program != other._program {return false}
    if self._platform != other._platform {return false}
    if self._locale != other._locale {return false}
    if self._email != other._email {return false}
    if self._version != other._version {return false}
    if self._applicationVersion != other._applicationVersion {return false}
    if self._publicComputer != other._publicComputer {return false}
    if self._ssoID != other._ssoID {return false}
    if self._disconnectOnCookieFail != other._disconnectOnCookieFail {return false}
    if self._allowLogonQueueNotifications != other._allowLogonQueueNotifications {return false}
    if self._webClientVerification != other._webClientVerification {return false}
    if self._cachedWebCredentials != other._cachedWebCredentials {return false}
    if self._userAgent != other._userAgent {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
