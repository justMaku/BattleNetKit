// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/api/client/v2/report_types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Bgs_Protocol_Report_V2_IssueType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case spam // = 0
  case harassment // = 1
  case offensiveContent // = 3
  case hacking // = 4
  case botting // = 5

  public init() {
    self = .spam
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .spam
    case 1: self = .harassment
    case 3: self = .offensiveContent
    case 4: self = .hacking
    case 5: self = .botting
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .spam: return 0
    case .harassment: return 1
    case .offensiveContent: return 3
    case .hacking: return 4
    case .botting: return 5
    }
  }

}

#if swift(>=4.2)

extension Bgs_Protocol_Report_V2_IssueType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum Bgs_Protocol_Report_V2_UserSource: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case other // = 0
  case whisper // = 1
  case profile // = 2
  case battleTag // = 3
  case chat // = 4
  case friendInvitation // = 5
  case voice // = 6

  public init() {
    self = .other
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .other
    case 1: self = .whisper
    case 2: self = .profile
    case 3: self = .battleTag
    case 4: self = .chat
    case 5: self = .friendInvitation
    case 6: self = .voice
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .other: return 0
    case .whisper: return 1
    case .profile: return 2
    case .battleTag: return 3
    case .chat: return 4
    case .friendInvitation: return 5
    case .voice: return 6
    }
  }

}

#if swift(>=4.2)

extension Bgs_Protocol_Report_V2_UserSource: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum Bgs_Protocol_Report_V2_ClubSource: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case other // = 0
  case message // = 1
  case clubName // = 2
  case streamName // = 3

  public init() {
    self = .other
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .other
    case 1: self = .message
    case 2: self = .clubName
    case 3: self = .streamName
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .other: return 0
    case .message: return 1
    case .clubName: return 2
    case .streamName: return 3
    }
  }

}

#if swift(>=4.2)

extension Bgs_Protocol_Report_V2_ClubSource: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct Bgs_Protocol_Report_V2_ReportItem {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: OneOf_Type? {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var messageID: Bgs_Protocol_MessageId {
    get {
      if case .messageID(let v)? = _storage._type {return v}
      return Bgs_Protocol_MessageId()
    }
    set {_uniqueStorage()._type = .messageID(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case messageID(Bgs_Protocol_MessageId)

  #if !swift(>=4.1)
    public static func ==(lhs: Bgs_Protocol_Report_V2_ReportItem.OneOf_Type, rhs: Bgs_Protocol_Report_V2_ReportItem.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.messageID(let l), .messageID(let r)): return l == r
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Report_V2_UserOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var targetID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._targetID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_uniqueStorage()._targetID = nil}

  public var type: Bgs_Protocol_Report_V2_IssueType {
    get {return _storage._type ?? .spam}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var source: Bgs_Protocol_Report_V2_UserSource {
    get {return _storage._source ?? .other}
    set {_uniqueStorage()._source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  public mutating func clearSource() {_uniqueStorage()._source = nil}

  public var item: Bgs_Protocol_Report_V2_ReportItem {
    get {return _storage._item ?? Bgs_Protocol_Report_V2_ReportItem()}
    set {_uniqueStorage()._item = newValue}
  }
  /// Returns true if `item` has been explicitly set.
  public var hasItem: Bool {return _storage._item != nil}
  /// Clears the value of `item`. Subsequent reads from it will return its default value.
  public mutating func clearItem() {_uniqueStorage()._item = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Report_V2_ClubOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var streamID: UInt64 {
    get {return _storage._streamID ?? 0}
    set {_uniqueStorage()._streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return _storage._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {_uniqueStorage()._streamID = nil}

  public var type: Bgs_Protocol_Report_V2_IssueType {
    get {return _storage._type ?? .spam}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var source: Bgs_Protocol_Report_V2_ClubSource {
    get {return _storage._source ?? .other}
    set {_uniqueStorage()._source = newValue}
  }
  /// Returns true if `source` has been explicitly set.
  public var hasSource: Bool {return _storage._source != nil}
  /// Clears the value of `source`. Subsequent reads from it will return its default value.
  public mutating func clearSource() {_uniqueStorage()._source = nil}

  public var item: Bgs_Protocol_Report_V2_ReportItem {
    get {return _storage._item ?? Bgs_Protocol_Report_V2_ReportItem()}
    set {_uniqueStorage()._item = newValue}
  }
  /// Returns true if `item` has been explicitly set.
  public var hasItem: Bool {return _storage._item != nil}
  /// Clears the value of `item`. Subsequent reads from it will return its default value.
  public mutating func clearItem() {_uniqueStorage()._item = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.report.v2"

extension Bgs_Protocol_Report_V2_IssueType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ISSUE_TYPE_SPAM"),
    1: .same(proto: "ISSUE_TYPE_HARASSMENT"),
    3: .same(proto: "ISSUE_TYPE_OFFENSIVE_CONTENT"),
    4: .same(proto: "ISSUE_TYPE_HACKING"),
    5: .same(proto: "ISSUE_TYPE_BOTTING"),
  ]
}

extension Bgs_Protocol_Report_V2_UserSource: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "USER_SOURCE_OTHER"),
    1: .same(proto: "USER_SOURCE_WHISPER"),
    2: .same(proto: "USER_SOURCE_PROFILE"),
    3: .same(proto: "USER_SOURCE_BATTLE_TAG"),
    4: .same(proto: "USER_SOURCE_CHAT"),
    5: .same(proto: "USER_SOURCE_FRIEND_INVITATION"),
    6: .same(proto: "USER_SOURCE_VOICE"),
  ]
}

extension Bgs_Protocol_Report_V2_ClubSource: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CLUB_SOURCE_OTHER"),
    1: .same(proto: "CLUB_SOURCE_MESSAGE"),
    2: .same(proto: "CLUB_SOURCE_CLUB_NAME"),
    3: .same(proto: "CLUB_SOURCE_STREAM_NAME"),
  ]
}

extension Bgs_Protocol_Report_V2_ReportItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReportItem"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "message_id"),
  ]

  fileprivate class _StorageClass {
    var _type: Bgs_Protocol_Report_V2_ReportItem.OneOf_Type?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Bgs_Protocol_MessageId?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .messageID(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .messageID(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if case .messageID(let v)? = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V2_ReportItem, rhs: Bgs_Protocol_Report_V2_ReportItem) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Report_V2_UserOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_id"),
    2: .same(proto: "type"),
    3: .same(proto: "source"),
    4: .same(proto: "item"),
  ]

  fileprivate class _StorageClass {
    var _targetID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _type: Bgs_Protocol_Report_V2_IssueType? = nil
    var _source: Bgs_Protocol_Report_V2_UserSource? = nil
    var _item: Bgs_Protocol_Report_V2_ReportItem? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _targetID = source._targetID
      _type = source._type
      _source = source._source
      _item = source._item
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._targetID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._source)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._item)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
      if let v = _storage._source {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      }
      if let v = _storage._item {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V2_UserOptions, rhs: Bgs_Protocol_Report_V2_UserOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._targetID != rhs_storage._targetID {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._item != rhs_storage._item {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Report_V2_ClubOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "club_id"),
    2: .standard(proto: "stream_id"),
    3: .same(proto: "type"),
    4: .same(proto: "source"),
    5: .same(proto: "item"),
  ]

  fileprivate class _StorageClass {
    var _clubID: UInt64? = nil
    var _streamID: UInt64? = nil
    var _type: Bgs_Protocol_Report_V2_IssueType? = nil
    var _source: Bgs_Protocol_Report_V2_ClubSource? = nil
    var _item: Bgs_Protocol_Report_V2_ReportItem? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _clubID = source._clubID
      _streamID = source._streamID
      _type = source._type
      _source = source._source
      _item = source._item
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._streamID)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._source)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._item)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._streamID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      }
      if let v = _storage._source {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
      }
      if let v = _storage._item {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V2_ClubOptions, rhs: Bgs_Protocol_Report_V2_ClubOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._streamID != rhs_storage._streamID {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._item != rhs_storage._item {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
