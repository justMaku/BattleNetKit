// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/whisper_listener.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Whisper_V1_WhisperNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var whisper: Bgs_Protocol_Whisper_V1_Whisper {
    get {return _storage._whisper ?? Bgs_Protocol_Whisper_V1_Whisper()}
    set {_uniqueStorage()._whisper = newValue}
  }
  /// Returns true if `whisper` has been explicitly set.
  public var hasWhisper: Bool {return _storage._whisper != nil}
  /// Clears the value of `whisper`. Subsequent reads from it will return its default value.
  public mutating func clearWhisper() {_uniqueStorage()._whisper = nil}

  public var senderBattleTag: String {
    get {return _storage._senderBattleTag ?? String()}
    set {_uniqueStorage()._senderBattleTag = newValue}
  }
  /// Returns true if `senderBattleTag` has been explicitly set.
  public var hasSenderBattleTag: Bool {return _storage._senderBattleTag != nil}
  /// Clears the value of `senderBattleTag`. Subsequent reads from it will return its default value.
  public mutating func clearSenderBattleTag() {_uniqueStorage()._senderBattleTag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Whisper_V1_WhisperEchoNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var whisper: Bgs_Protocol_Whisper_V1_Whisper {
    get {return _storage._whisper ?? Bgs_Protocol_Whisper_V1_Whisper()}
    set {_uniqueStorage()._whisper = newValue}
  }
  /// Returns true if `whisper` has been explicitly set.
  public var hasWhisper: Bool {return _storage._whisper != nil}
  /// Clears the value of `whisper`. Subsequent reads from it will return its default value.
  public mutating func clearWhisper() {_uniqueStorage()._whisper = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Whisper_V1_TypingIndicatorNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var senderID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._senderID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._senderID = newValue}
  }
  /// Returns true if `senderID` has been explicitly set.
  public var hasSenderID: Bool {return _storage._senderID != nil}
  /// Clears the value of `senderID`. Subsequent reads from it will return its default value.
  public mutating func clearSenderID() {_uniqueStorage()._senderID = nil}

  public var action: Bgs_Protocol_TypingIndicator {
    get {return _storage._action ?? .typingStart}
    set {_uniqueStorage()._action = newValue}
  }
  /// Returns true if `action` has been explicitly set.
  public var hasAction: Bool {return _storage._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
  public mutating func clearAction() {_uniqueStorage()._action = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Whisper_V1_AdvanceViewTimeNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var senderID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._senderID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._senderID = newValue}
  }
  /// Returns true if `senderID` has been explicitly set.
  public var hasSenderID: Bool {return _storage._senderID != nil}
  /// Clears the value of `senderID`. Subsequent reads from it will return its default value.
  public mutating func clearSenderID() {_uniqueStorage()._senderID = nil}

  public var viewTime: UInt64 {
    get {return _storage._viewTime ?? 0}
    set {_uniqueStorage()._viewTime = newValue}
  }
  /// Returns true if `viewTime` has been explicitly set.
  public var hasViewTime: Bool {return _storage._viewTime != nil}
  /// Clears the value of `viewTime`. Subsequent reads from it will return its default value.
  public mutating func clearViewTime() {_uniqueStorage()._viewTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Whisper_V1_WhisperUpdatedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var whisper: Bgs_Protocol_Whisper_V1_Whisper {
    get {return _storage._whisper ?? Bgs_Protocol_Whisper_V1_Whisper()}
    set {_uniqueStorage()._whisper = newValue}
  }
  /// Returns true if `whisper` has been explicitly set.
  public var hasWhisper: Bool {return _storage._whisper != nil}
  /// Clears the value of `whisper`. Subsequent reads from it will return its default value.
  public mutating func clearWhisper() {_uniqueStorage()._whisper = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Whisper_V1_AdvanceClearTimeNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var subscriberID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var senderID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._senderID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._senderID = newValue}
  }
  /// Returns true if `senderID` has been explicitly set.
  public var hasSenderID: Bool {return _storage._senderID != nil}
  /// Clears the value of `senderID`. Subsequent reads from it will return its default value.
  public mutating func clearSenderID() {_uniqueStorage()._senderID = nil}

  public var clearTime_p: UInt64 {
    get {return _storage._clearTime_p ?? 0}
    set {_uniqueStorage()._clearTime_p = newValue}
  }
  /// Returns true if `clearTime_p` has been explicitly set.
  public var hasClearTime_p: Bool {return _storage._clearTime_p != nil}
  /// Clears the value of `clearTime_p`. Subsequent reads from it will return its default value.
  public mutating func clearClearTime_p() {_uniqueStorage()._clearTime_p = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.whisper.v1"

extension Bgs_Protocol_Whisper_V1_WhisperNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WhisperNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subscriber_id"),
    2: .same(proto: "whisper"),
    3: .standard(proto: "sender_battle_tag"),
  ]

  fileprivate class _StorageClass {
    var _subscriberID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _whisper: Bgs_Protocol_Whisper_V1_Whisper? = nil
    var _senderBattleTag: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _subscriberID = source._subscriberID
      _whisper = source._whisper
      _senderBattleTag = source._senderBattleTag
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      if let v = _storage._whisper, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._whisper)
        case 3: try decoder.decodeSingularStringField(value: &_storage._senderBattleTag)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._whisper {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._senderBattleTag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Whisper_V1_WhisperNotification, rhs: Bgs_Protocol_Whisper_V1_WhisperNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._whisper != rhs_storage._whisper {return false}
        if _storage._senderBattleTag != rhs_storage._senderBattleTag {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Whisper_V1_WhisperEchoNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WhisperEchoNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subscriber_id"),
    2: .same(proto: "whisper"),
  ]

  fileprivate class _StorageClass {
    var _subscriberID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _whisper: Bgs_Protocol_Whisper_V1_Whisper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _subscriberID = source._subscriberID
      _whisper = source._whisper
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      if let v = _storage._whisper, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._whisper)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._whisper {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Whisper_V1_WhisperEchoNotification, rhs: Bgs_Protocol_Whisper_V1_WhisperEchoNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._whisper != rhs_storage._whisper {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Whisper_V1_TypingIndicatorNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TypingIndicatorNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subscriber_id"),
    2: .standard(proto: "sender_id"),
    3: .same(proto: "action"),
  ]

  fileprivate class _StorageClass {
    var _subscriberID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _senderID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _action: Bgs_Protocol_TypingIndicator? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _subscriberID = source._subscriberID
      _senderID = source._senderID
      _action = source._action
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      if let v = _storage._senderID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._senderID)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._action)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._senderID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._action {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Whisper_V1_TypingIndicatorNotification, rhs: Bgs_Protocol_Whisper_V1_TypingIndicatorNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._senderID != rhs_storage._senderID {return false}
        if _storage._action != rhs_storage._action {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Whisper_V1_AdvanceViewTimeNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdvanceViewTimeNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subscriber_id"),
    2: .standard(proto: "sender_id"),
    3: .standard(proto: "view_time"),
  ]

  fileprivate class _StorageClass {
    var _subscriberID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _senderID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _viewTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _subscriberID = source._subscriberID
      _senderID = source._senderID
      _viewTime = source._viewTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      if let v = _storage._senderID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._senderID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._viewTime)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._senderID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._viewTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Whisper_V1_AdvanceViewTimeNotification, rhs: Bgs_Protocol_Whisper_V1_AdvanceViewTimeNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._senderID != rhs_storage._senderID {return false}
        if _storage._viewTime != rhs_storage._viewTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Whisper_V1_WhisperUpdatedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WhisperUpdatedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subscriber_id"),
    2: .same(proto: "whisper"),
  ]

  fileprivate class _StorageClass {
    var _subscriberID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _whisper: Bgs_Protocol_Whisper_V1_Whisper? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _subscriberID = source._subscriberID
      _whisper = source._whisper
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      if let v = _storage._whisper, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._whisper)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._whisper {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Whisper_V1_WhisperUpdatedNotification, rhs: Bgs_Protocol_Whisper_V1_WhisperUpdatedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._whisper != rhs_storage._whisper {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Whisper_V1_AdvanceClearTimeNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdvanceClearTimeNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "subscriber_id"),
    2: .standard(proto: "sender_id"),
    3: .standard(proto: "clear_time"),
  ]

  fileprivate class _StorageClass {
    var _subscriberID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _senderID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _clearTime_p: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _subscriberID = source._subscriberID
      _senderID = source._senderID
      _clearTime_p = source._clearTime_p
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      if let v = _storage._senderID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._senderID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clearTime_p)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._senderID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._clearTime_p {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Whisper_V1_AdvanceClearTimeNotification, rhs: Bgs_Protocol_Whisper_V1_AdvanceClearTimeNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._senderID != rhs_storage._senderID {return false}
        if _storage._clearTime_p != rhs_storage._clearTime_p {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
