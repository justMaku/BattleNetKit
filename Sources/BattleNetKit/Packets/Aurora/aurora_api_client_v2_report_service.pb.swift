// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/api/client/v2/report_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Report_V2_SubmitReportRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._agentID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var userDescription: String {
    get {return _storage._userDescription ?? String()}
    set {_uniqueStorage()._userDescription = newValue}
  }
  /// Returns true if `userDescription` has been explicitly set.
  public var hasUserDescription: Bool {return _storage._userDescription != nil}
  /// Clears the value of `userDescription`. Subsequent reads from it will return its default value.
  public mutating func clearUserDescription() {_uniqueStorage()._userDescription = nil}

  public var program: UInt32 {
    get {return _storage._program ?? 0}
    set {_uniqueStorage()._program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return _storage._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {_uniqueStorage()._program = nil}

  public var type: OneOf_Type? {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var userOptions: Bgs_Protocol_Report_V2_UserOptions {
    get {
      if case .userOptions(let v)? = _storage._type {return v}
      return Bgs_Protocol_Report_V2_UserOptions()
    }
    set {_uniqueStorage()._type = .userOptions(newValue)}
  }

  public var clubOptions: Bgs_Protocol_Report_V2_ClubOptions {
    get {
      if case .clubOptions(let v)? = _storage._type {return v}
      return Bgs_Protocol_Report_V2_ClubOptions()
    }
    set {_uniqueStorage()._type = .clubOptions(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case userOptions(Bgs_Protocol_Report_V2_UserOptions)
    case clubOptions(Bgs_Protocol_Report_V2_ClubOptions)

  #if !swift(>=4.1)
    public static func ==(lhs: Bgs_Protocol_Report_V2_SubmitReportRequest.OneOf_Type, rhs: Bgs_Protocol_Report_V2_SubmitReportRequest.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.userOptions(let l), .userOptions(let r)): return l == r
      case (.clubOptions(let l), .clubOptions(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.report.v2"

extension Bgs_Protocol_Report_V2_SubmitReportRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmitReportRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "user_description"),
    3: .same(proto: "program"),
    10: .standard(proto: "user_options"),
    11: .standard(proto: "club_options"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _userDescription: String? = nil
    var _program: UInt32? = nil
    var _type: Bgs_Protocol_Report_V2_SubmitReportRequest.OneOf_Type?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _userDescription = source._userDescription
      _program = source._program
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if case .userOptions(let v)? = _storage._type, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._userDescription)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._program)
        case 10:
          var v: Bgs_Protocol_Report_V2_UserOptions?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .userOptions(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .userOptions(v)}
        case 11:
          var v: Bgs_Protocol_Report_V2_ClubOptions?
          if let current = _storage._type {
            try decoder.handleConflictingOneOf()
            if case .clubOptions(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._type = .clubOptions(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._userDescription {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._program {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      switch _storage._type {
      case .userOptions(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .clubOptions(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Report_V2_SubmitReportRequest, rhs: Bgs_Protocol_Report_V2_SubmitReportRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._userDescription != rhs_storage._userDescription {return false}
        if _storage._program != rhs_storage._program {return false}
        if _storage._type != rhs_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
