// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/club_core.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Club_V1_AvatarId {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: UInt32? = nil
}

public struct Bgs_Protocol_Club_V1_SetBroadcastOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: String {
    get {return _content ?? String()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {self._content = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _content: String? = nil
}

public struct Bgs_Protocol_Club_V1_Broadcast {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var content: String {
    get {return _storage._content ?? String()}
    set {_uniqueStorage()._content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return _storage._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {_uniqueStorage()._content = nil}

  public var creator: Bgs_Protocol_Club_V1_MemberDescription {
    get {return _storage._creator ?? Bgs_Protocol_Club_V1_MemberDescription()}
    set {_uniqueStorage()._creator = newValue}
  }
  /// Returns true if `creator` has been explicitly set.
  public var hasCreator: Bool {return _storage._creator != nil}
  /// Clears the value of `creator`. Subsequent reads from it will return its default value.
  public mutating func clearCreator() {_uniqueStorage()._creator = nil}

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_uniqueStorage()._creationTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_UniqueClubType {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {self._name = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _program: UInt32? = nil
  fileprivate var _name: String? = nil
}

public struct Bgs_Protocol_Club_V1_ClubCreateOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: Bgs_Protocol_Club_V1_UniqueClubType {
    get {return _storage._type ?? Bgs_Protocol_Club_V1_UniqueClubType()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  public var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  public var avatar: Bgs_Protocol_Club_V1_AvatarId {
    get {return _storage._avatar ?? Bgs_Protocol_Club_V1_AvatarId()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  public var privacyLevel: Bgs_Protocol_Club_V1_PrivacyLevel {
    get {return _storage._privacyLevel ?? .closed}
    set {_uniqueStorage()._privacyLevel = newValue}
  }
  /// Returns true if `privacyLevel` has been explicitly set.
  public var hasPrivacyLevel: Bool {return _storage._privacyLevel != nil}
  /// Clears the value of `privacyLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacyLevel() {_uniqueStorage()._privacyLevel = nil}

  public var shortName: String {
    get {return _storage._shortName ?? String()}
    set {_uniqueStorage()._shortName = newValue}
  }
  /// Returns true if `shortName` has been explicitly set.
  public var hasShortName: Bool {return _storage._shortName != nil}
  /// Clears the value of `shortName`. Subsequent reads from it will return its default value.
  public mutating func clearShortName() {_uniqueStorage()._shortName = nil}

  public var member: Bgs_Protocol_Club_V1_CreateMemberOptions {
    get {return _storage._member ?? Bgs_Protocol_Club_V1_CreateMemberOptions()}
    set {_uniqueStorage()._member = newValue}
  }
  /// Returns true if `member` has been explicitly set.
  public var hasMember: Bool {return _storage._member != nil}
  /// Clears the value of `member`. Subsequent reads from it will return its default value.
  public mutating func clearMember() {_uniqueStorage()._member = nil}

  public var stream: Bgs_Protocol_Club_V1_CreateStreamOptions {
    get {return _storage._stream ?? Bgs_Protocol_Club_V1_CreateStreamOptions()}
    set {_uniqueStorage()._stream = newValue}
  }
  /// Returns true if `stream` has been explicitly set.
  public var hasStream: Bool {return _storage._stream != nil}
  /// Clears the value of `stream`. Subsequent reads from it will return its default value.
  public mutating func clearStream() {_uniqueStorage()._stream = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_Club {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var type: Bgs_Protocol_Club_V1_UniqueClubType {
    get {return _storage._type ?? Bgs_Protocol_Club_V1_UniqueClubType()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  public var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  public var broadcast: Bgs_Protocol_Club_V1_Broadcast {
    get {return _storage._broadcast ?? Bgs_Protocol_Club_V1_Broadcast()}
    set {_uniqueStorage()._broadcast = newValue}
  }
  /// Returns true if `broadcast` has been explicitly set.
  public var hasBroadcast: Bool {return _storage._broadcast != nil}
  /// Clears the value of `broadcast`. Subsequent reads from it will return its default value.
  public mutating func clearBroadcast() {_uniqueStorage()._broadcast = nil}

  public var avatar: Bgs_Protocol_Club_V1_AvatarId {
    get {return _storage._avatar ?? Bgs_Protocol_Club_V1_AvatarId()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  public var privacyLevel: Bgs_Protocol_Club_V1_PrivacyLevel {
    get {return _storage._privacyLevel ?? .closed}
    set {_uniqueStorage()._privacyLevel = newValue}
  }
  /// Returns true if `privacyLevel` has been explicitly set.
  public var hasPrivacyLevel: Bool {return _storage._privacyLevel != nil}
  /// Clears the value of `privacyLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacyLevel() {_uniqueStorage()._privacyLevel = nil}

  public var visibilityLevel: Bgs_Protocol_Club_V1_VisibilityLevel {
    get {return _storage._visibilityLevel ?? .private}
    set {_uniqueStorage()._visibilityLevel = newValue}
  }
  /// Returns true if `visibilityLevel` has been explicitly set.
  public var hasVisibilityLevel: Bool {return _storage._visibilityLevel != nil}
  /// Clears the value of `visibilityLevel`. Subsequent reads from it will return its default value.
  public mutating func clearVisibilityLevel() {_uniqueStorage()._visibilityLevel = nil}

  public var memberCount: UInt32 {
    get {return _storage._memberCount ?? 0}
    set {_uniqueStorage()._memberCount = newValue}
  }
  /// Returns true if `memberCount` has been explicitly set.
  public var hasMemberCount: Bool {return _storage._memberCount != nil}
  /// Clears the value of `memberCount`. Subsequent reads from it will return its default value.
  public mutating func clearMemberCount() {_uniqueStorage()._memberCount = nil}

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_uniqueStorage()._creationTime = nil}

  public var streamPosition: Bgs_Protocol_Club_V1_StreamPosition {
    get {return _storage._streamPosition ?? Bgs_Protocol_Club_V1_StreamPosition()}
    set {_uniqueStorage()._streamPosition = newValue}
  }
  /// Returns true if `streamPosition` has been explicitly set.
  public var hasStreamPosition: Bool {return _storage._streamPosition != nil}
  /// Clears the value of `streamPosition`. Subsequent reads from it will return its default value.
  public mutating func clearStreamPosition() {_uniqueStorage()._streamPosition = nil}

  public var roleSet: Bgs_Protocol_Club_V1_ClubRoleSet {
    get {return _storage._roleSet ?? Bgs_Protocol_Club_V1_ClubRoleSet()}
    set {_uniqueStorage()._roleSet = newValue}
  }
  /// Returns true if `roleSet` has been explicitly set.
  public var hasRoleSet: Bool {return _storage._roleSet != nil}
  /// Clears the value of `roleSet`. Subsequent reads from it will return its default value.
  public mutating func clearRoleSet() {_uniqueStorage()._roleSet = nil}

  public var leader: [Bgs_Protocol_Club_V1_MemberDescription] {
    get {return _storage._leader}
    set {_uniqueStorage()._leader = newValue}
  }

  public var shortName: String {
    get {return _storage._shortName ?? String()}
    set {_uniqueStorage()._shortName = newValue}
  }
  /// Returns true if `shortName` has been explicitly set.
  public var hasShortName: Bool {return _storage._shortName != nil}
  /// Clears the value of `shortName`. Subsequent reads from it will return its default value.
  public mutating func clearShortName() {_uniqueStorage()._shortName = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var type: Bgs_Protocol_Club_V1_UniqueClubType {
    get {return _storage._type ?? Bgs_Protocol_Club_V1_UniqueClubType()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_uniqueStorage()._type = nil}

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  public var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  public var avatar: Bgs_Protocol_Club_V1_AvatarId {
    get {return _storage._avatar ?? Bgs_Protocol_Club_V1_AvatarId()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  public var privacyLevel: Bgs_Protocol_Club_V1_PrivacyLevel {
    get {return _storage._privacyLevel ?? .closed}
    set {_uniqueStorage()._privacyLevel = newValue}
  }
  /// Returns true if `privacyLevel` has been explicitly set.
  public var hasPrivacyLevel: Bool {return _storage._privacyLevel != nil}
  /// Clears the value of `privacyLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacyLevel() {_uniqueStorage()._privacyLevel = nil}

  public var visibilityLevel: Bgs_Protocol_Club_V1_VisibilityLevel {
    get {return _storage._visibilityLevel ?? .private}
    set {_uniqueStorage()._visibilityLevel = newValue}
  }
  /// Returns true if `visibilityLevel` has been explicitly set.
  public var hasVisibilityLevel: Bool {return _storage._visibilityLevel != nil}
  /// Clears the value of `visibilityLevel`. Subsequent reads from it will return its default value.
  public mutating func clearVisibilityLevel() {_uniqueStorage()._visibilityLevel = nil}

  public var memberCount: UInt32 {
    get {return _storage._memberCount ?? 0}
    set {_uniqueStorage()._memberCount = newValue}
  }
  /// Returns true if `memberCount` has been explicitly set.
  public var hasMemberCount: Bool {return _storage._memberCount != nil}
  /// Clears the value of `memberCount`. Subsequent reads from it will return its default value.
  public mutating func clearMemberCount() {_uniqueStorage()._memberCount = nil}

  public var leader: [Bgs_Protocol_Club_V1_MemberDescription] {
    get {return _storage._leader}
    set {_uniqueStorage()._leader = newValue}
  }

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_uniqueStorage()._creationTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubView {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var marker: Bgs_Protocol_ViewMarker {
    get {return _storage._marker ?? Bgs_Protocol_ViewMarker()}
    set {_uniqueStorage()._marker = newValue}
  }
  /// Returns true if `marker` has been explicitly set.
  public var hasMarker: Bool {return _storage._marker != nil}
  /// Clears the value of `marker`. Subsequent reads from it will return its default value.
  public mutating func clearMarker() {_uniqueStorage()._marker = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubStateOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  public var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  public var broadcast: Bgs_Protocol_Club_V1_SetBroadcastOptions {
    get {return _storage._broadcast ?? Bgs_Protocol_Club_V1_SetBroadcastOptions()}
    set {_uniqueStorage()._broadcast = newValue}
  }
  /// Returns true if `broadcast` has been explicitly set.
  public var hasBroadcast: Bool {return _storage._broadcast != nil}
  /// Clears the value of `broadcast`. Subsequent reads from it will return its default value.
  public mutating func clearBroadcast() {_uniqueStorage()._broadcast = nil}

  public var avatar: Bgs_Protocol_Club_V1_AvatarId {
    get {return _storage._avatar ?? Bgs_Protocol_Club_V1_AvatarId()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  public var privacyLevel: Bgs_Protocol_Club_V1_PrivacyLevel {
    get {return _storage._privacyLevel ?? .closed}
    set {_uniqueStorage()._privacyLevel = newValue}
  }
  /// Returns true if `privacyLevel` has been explicitly set.
  public var hasPrivacyLevel: Bool {return _storage._privacyLevel != nil}
  /// Clears the value of `privacyLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacyLevel() {_uniqueStorage()._privacyLevel = nil}

  public var streamPosition: Bgs_Protocol_Club_V1_StreamPosition {
    get {return _storage._streamPosition ?? Bgs_Protocol_Club_V1_StreamPosition()}
    set {_uniqueStorage()._streamPosition = newValue}
  }
  /// Returns true if `streamPosition` has been explicitly set.
  public var hasStreamPosition: Bool {return _storage._streamPosition != nil}
  /// Clears the value of `streamPosition`. Subsequent reads from it will return its default value.
  public mutating func clearStreamPosition() {_uniqueStorage()._streamPosition = nil}

  public var shortName: String {
    get {return _storage._shortName ?? String()}
    set {_uniqueStorage()._shortName = newValue}
  }
  /// Returns true if `shortName` has been explicitly set.
  public var hasShortName: Bool {return _storage._shortName != nil}
  /// Clears the value of `shortName`. Subsequent reads from it will return its default value.
  public mutating func clearShortName() {_uniqueStorage()._shortName = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubStateAssignment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  public var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  public var broadcast: Bgs_Protocol_Club_V1_Broadcast {
    get {return _storage._broadcast ?? Bgs_Protocol_Club_V1_Broadcast()}
    set {_uniqueStorage()._broadcast = newValue}
  }
  /// Returns true if `broadcast` has been explicitly set.
  public var hasBroadcast: Bool {return _storage._broadcast != nil}
  /// Clears the value of `broadcast`. Subsequent reads from it will return its default value.
  public mutating func clearBroadcast() {_uniqueStorage()._broadcast = nil}

  public var avatar: Bgs_Protocol_Club_V1_AvatarId {
    get {return _storage._avatar ?? Bgs_Protocol_Club_V1_AvatarId()}
    set {_uniqueStorage()._avatar = newValue}
  }
  /// Returns true if `avatar` has been explicitly set.
  public var hasAvatar: Bool {return _storage._avatar != nil}
  /// Clears the value of `avatar`. Subsequent reads from it will return its default value.
  public mutating func clearAvatar() {_uniqueStorage()._avatar = nil}

  public var privacyLevel: Bgs_Protocol_Club_V1_PrivacyLevel {
    get {return _storage._privacyLevel ?? .closed}
    set {_uniqueStorage()._privacyLevel = newValue}
  }
  /// Returns true if `privacyLevel` has been explicitly set.
  public var hasPrivacyLevel: Bool {return _storage._privacyLevel != nil}
  /// Clears the value of `privacyLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacyLevel() {_uniqueStorage()._privacyLevel = nil}

  public var streamPosition: Bgs_Protocol_Club_V1_StreamPosition {
    get {return _storage._streamPosition ?? Bgs_Protocol_Club_V1_StreamPosition()}
    set {_uniqueStorage()._streamPosition = newValue}
  }
  /// Returns true if `streamPosition` has been explicitly set.
  public var hasStreamPosition: Bool {return _storage._streamPosition != nil}
  /// Clears the value of `streamPosition`. Subsequent reads from it will return its default value.
  public mutating func clearStreamPosition() {_uniqueStorage()._streamPosition = nil}

  public var shortName: String {
    get {return _storage._shortName ?? String()}
    set {_uniqueStorage()._shortName = newValue}
  }
  /// Returns true if `shortName` has been explicitly set.
  public var hasShortName: Bool {return _storage._shortName != nil}
  /// Clears the value of `shortName`. Subsequent reads from it will return its default value.
  public mutating func clearShortName() {_uniqueStorage()._shortName = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var streamID: UInt64 {
    get {return _streamID ?? 0}
    set {_streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return self._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {self._streamID = nil}

  public var filter: Bgs_Protocol_Club_V1_StreamNotificationFilter {
    get {return _filter ?? .none}
    set {_filter = newValue}
  }
  /// Returns true if `filter` has been explicitly set.
  public var hasFilter: Bool {return self._filter != nil}
  /// Clears the value of `filter`. Subsequent reads from it will return its default value.
  public mutating func clearFilter() {self._filter = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _streamID: UInt64? = nil
  fileprivate var _filter: Bgs_Protocol_Club_V1_StreamNotificationFilter? = nil
}

public struct Bgs_Protocol_Club_V1_ClubSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var stream: [Bgs_Protocol_Club_V1_StreamSettings] = []

  public var streamNotificationFilterAll: Bool {
    get {return _streamNotificationFilterAll ?? false}
    set {_streamNotificationFilterAll = newValue}
  }
  /// Returns true if `streamNotificationFilterAll` has been explicitly set.
  public var hasStreamNotificationFilterAll: Bool {return self._streamNotificationFilterAll != nil}
  /// Clears the value of `streamNotificationFilterAll`. Subsequent reads from it will return its default value.
  public mutating func clearStreamNotificationFilterAll() {self._streamNotificationFilterAll = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _streamNotificationFilterAll: Bool? = nil
}

public struct Bgs_Protocol_Club_V1_ClubSettingsOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var stream: [Bgs_Protocol_Club_V1_StreamSettings] {
    get {return _storage._stream}
    set {_uniqueStorage()._stream = newValue}
  }

  public var settings: Bgs_Protocol_Club_V1_ClubSettings {
    get {return _storage._settings ?? Bgs_Protocol_Club_V1_ClubSettings()}
    set {_uniqueStorage()._settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  public var hasSettings: Bool {return _storage._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  public mutating func clearSettings() {_uniqueStorage()._settings = nil}

  public var version: UInt32 {
    get {return _storage._version ?? 0}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {_uniqueStorage()._version = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubSettingsAssignment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var stream: [Bgs_Protocol_Club_V1_StreamSettings] {
    get {return _storage._stream}
    set {_uniqueStorage()._stream = newValue}
  }

  public var settings: Bgs_Protocol_Club_V1_ClubSettings {
    get {return _storage._settings ?? Bgs_Protocol_Club_V1_ClubSettings()}
    set {_uniqueStorage()._settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  public var hasSettings: Bool {return _storage._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  public mutating func clearSettings() {_uniqueStorage()._settings = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.club.v1"

extension Bgs_Protocol_Club_V1_AvatarId: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AvatarId"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_AvatarId, rhs: Bgs_Protocol_Club_V1_AvatarId) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_SetBroadcastOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetBroadcastOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._content)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_SetBroadcastOptions, rhs: Bgs_Protocol_Club_V1_SetBroadcastOptions) -> Bool {
    if lhs._content != rhs._content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_Broadcast: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Broadcast"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "content"),
    2: .same(proto: "creator"),
    3: .standard(proto: "creation_time"),
  ]

  fileprivate class _StorageClass {
    var _content: String? = nil
    var _creator: Bgs_Protocol_Club_V1_MemberDescription? = nil
    var _creationTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _content = source._content
      _creator = source._creator
      _creationTime = source._creationTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._creator, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._content)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._creator)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._content {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._creator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_Broadcast, rhs: Bgs_Protocol_Club_V1_Broadcast) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._content != rhs_storage._content {return false}
        if _storage._creator != rhs_storage._creator {return false}
        if _storage._creationTime != rhs_storage._creationTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_UniqueClubType: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UniqueClubType"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "program"),
    2: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._program)
      case 2: try decoder.decodeSingularStringField(value: &self._name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_UniqueClubType, rhs: Bgs_Protocol_Club_V1_UniqueClubType) -> Bool {
    if lhs._program != rhs._program {return false}
    if lhs._name != rhs._name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubCreateOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubCreateOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "attribute"),
    3: .same(proto: "name"),
    4: .same(proto: "description"),
    5: .same(proto: "avatar"),
    6: .standard(proto: "privacy_level"),
    7: .standard(proto: "short_name"),
    10: .same(proto: "member"),
    11: .same(proto: "stream"),
  ]

  fileprivate class _StorageClass {
    var _type: Bgs_Protocol_Club_V1_UniqueClubType? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _name: String? = nil
    var _description_p: String? = nil
    var _avatar: Bgs_Protocol_Club_V1_AvatarId? = nil
    var _privacyLevel: Bgs_Protocol_Club_V1_PrivacyLevel? = nil
    var _shortName: String? = nil
    var _member: Bgs_Protocol_Club_V1_CreateMemberOptions? = nil
    var _stream: Bgs_Protocol_Club_V1_CreateStreamOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _attribute = source._attribute
      _name = source._name
      _description_p = source._description_p
      _avatar = source._avatar
      _privacyLevel = source._privacyLevel
      _shortName = source._shortName
      _member = source._member
      _stream = source._stream
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._member, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._avatar)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._privacyLevel)
        case 7: try decoder.decodeSingularStringField(value: &_storage._shortName)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._member)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._stream)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 2)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._privacyLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
      }
      if let v = _storage._shortName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if let v = _storage._member {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._stream {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubCreateOptions, rhs: Bgs_Protocol_Club_V1_ClubCreateOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._privacyLevel != rhs_storage._privacyLevel {return false}
        if _storage._shortName != rhs_storage._shortName {return false}
        if _storage._member != rhs_storage._member {return false}
        if _storage._stream != rhs_storage._stream {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_Club: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Club"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "attribute"),
    4: .same(proto: "name"),
    5: .same(proto: "description"),
    6: .same(proto: "broadcast"),
    7: .same(proto: "avatar"),
    8: .standard(proto: "privacy_level"),
    9: .standard(proto: "visibility_level"),
    10: .standard(proto: "member_count"),
    11: .standard(proto: "creation_time"),
    12: .standard(proto: "stream_position"),
    13: .standard(proto: "role_set"),
    14: .same(proto: "leader"),
    15: .standard(proto: "short_name"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64? = nil
    var _type: Bgs_Protocol_Club_V1_UniqueClubType? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _name: String? = nil
    var _description_p: String? = nil
    var _broadcast: Bgs_Protocol_Club_V1_Broadcast? = nil
    var _avatar: Bgs_Protocol_Club_V1_AvatarId? = nil
    var _privacyLevel: Bgs_Protocol_Club_V1_PrivacyLevel? = nil
    var _visibilityLevel: Bgs_Protocol_Club_V1_VisibilityLevel? = nil
    var _memberCount: UInt32? = nil
    var _creationTime: UInt64? = nil
    var _streamPosition: Bgs_Protocol_Club_V1_StreamPosition? = nil
    var _roleSet: Bgs_Protocol_Club_V1_ClubRoleSet? = nil
    var _leader: [Bgs_Protocol_Club_V1_MemberDescription] = []
    var _shortName: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _type = source._type
      _attribute = source._attribute
      _name = source._name
      _description_p = source._description_p
      _broadcast = source._broadcast
      _avatar = source._avatar
      _privacyLevel = source._privacyLevel
      _visibilityLevel = source._visibilityLevel
      _memberCount = source._memberCount
      _creationTime = source._creationTime
      _streamPosition = source._streamPosition
      _roleSet = source._roleSet
      _leader = source._leader
      _shortName = source._shortName
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._broadcast, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._leader) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._broadcast)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._avatar)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._privacyLevel)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._visibilityLevel)
        case 10: try decoder.decodeSingularUInt32Field(value: &_storage._memberCount)
        case 11: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._streamPosition)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._roleSet)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._leader)
        case 15: try decoder.decodeSingularStringField(value: &_storage._shortName)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 3)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._broadcast {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._privacyLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
      }
      if let v = _storage._visibilityLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
      }
      if let v = _storage._memberCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 11)
      }
      if let v = _storage._streamPosition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._roleSet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if !_storage._leader.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._leader, fieldNumber: 14)
      }
      if let v = _storage._shortName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_Club, rhs: Bgs_Protocol_Club_V1_Club) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._broadcast != rhs_storage._broadcast {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._privacyLevel != rhs_storage._privacyLevel {return false}
        if _storage._visibilityLevel != rhs_storage._visibilityLevel {return false}
        if _storage._memberCount != rhs_storage._memberCount {return false}
        if _storage._creationTime != rhs_storage._creationTime {return false}
        if _storage._streamPosition != rhs_storage._streamPosition {return false}
        if _storage._roleSet != rhs_storage._roleSet {return false}
        if _storage._leader != rhs_storage._leader {return false}
        if _storage._shortName != rhs_storage._shortName {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubDescription"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "name"),
    4: .same(proto: "description"),
    5: .same(proto: "avatar"),
    6: .standard(proto: "privacy_level"),
    7: .standard(proto: "visibility_level"),
    8: .standard(proto: "member_count"),
    9: .same(proto: "leader"),
    10: .standard(proto: "creation_time"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64? = nil
    var _type: Bgs_Protocol_Club_V1_UniqueClubType? = nil
    var _name: String? = nil
    var _description_p: String? = nil
    var _avatar: Bgs_Protocol_Club_V1_AvatarId? = nil
    var _privacyLevel: Bgs_Protocol_Club_V1_PrivacyLevel? = nil
    var _visibilityLevel: Bgs_Protocol_Club_V1_VisibilityLevel? = nil
    var _memberCount: UInt32? = nil
    var _leader: [Bgs_Protocol_Club_V1_MemberDescription] = []
    var _creationTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _type = source._type
      _name = source._name
      _description_p = source._description_p
      _avatar = source._avatar
      _privacyLevel = source._privacyLevel
      _visibilityLevel = source._visibilityLevel
      _memberCount = source._memberCount
      _leader = source._leader
      _creationTime = source._creationTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._leader) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._avatar)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._privacyLevel)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._visibilityLevel)
        case 8: try decoder.decodeSingularUInt32Field(value: &_storage._memberCount)
        case 9: try decoder.decodeRepeatedMessageField(value: &_storage._leader)
        case 10: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._privacyLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
      }
      if let v = _storage._visibilityLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
      }
      if let v = _storage._memberCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
      }
      if !_storage._leader.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._leader, fieldNumber: 9)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubDescription, rhs: Bgs_Protocol_Club_V1_ClubDescription) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._privacyLevel != rhs_storage._privacyLevel {return false}
        if _storage._visibilityLevel != rhs_storage._visibilityLevel {return false}
        if _storage._memberCount != rhs_storage._memberCount {return false}
        if _storage._leader != rhs_storage._leader {return false}
        if _storage._creationTime != rhs_storage._creationTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubView: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubView"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "club_id"),
    2: .same(proto: "marker"),
  ]

  fileprivate class _StorageClass {
    var _clubID: UInt64? = nil
    var _marker: Bgs_Protocol_ViewMarker? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _clubID = source._clubID
      _marker = source._marker
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._marker)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._marker {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubView, rhs: Bgs_Protocol_Club_V1_ClubView) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._marker != rhs_storage._marker {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubStateOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubStateOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attribute"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "broadcast"),
    5: .same(proto: "avatar"),
    6: .standard(proto: "privacy_level"),
    7: .standard(proto: "stream_position"),
    8: .standard(proto: "short_name"),
  ]

  fileprivate class _StorageClass {
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _name: String? = nil
    var _description_p: String? = nil
    var _broadcast: Bgs_Protocol_Club_V1_SetBroadcastOptions? = nil
    var _avatar: Bgs_Protocol_Club_V1_AvatarId? = nil
    var _privacyLevel: Bgs_Protocol_Club_V1_PrivacyLevel? = nil
    var _streamPosition: Bgs_Protocol_Club_V1_StreamPosition? = nil
    var _shortName: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _attribute = source._attribute
      _name = source._name
      _description_p = source._description_p
      _broadcast = source._broadcast
      _avatar = source._avatar
      _privacyLevel = source._privacyLevel
      _streamPosition = source._streamPosition
      _shortName = source._shortName
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._broadcast)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._avatar)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._privacyLevel)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._streamPosition)
        case 8: try decoder.decodeSingularStringField(value: &_storage._shortName)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 1)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._broadcast {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._privacyLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
      }
      if let v = _storage._streamPosition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._shortName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubStateOptions, rhs: Bgs_Protocol_Club_V1_ClubStateOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._broadcast != rhs_storage._broadcast {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._privacyLevel != rhs_storage._privacyLevel {return false}
        if _storage._streamPosition != rhs_storage._streamPosition {return false}
        if _storage._shortName != rhs_storage._shortName {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubStateAssignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubStateAssignment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "club_id"),
    2: .same(proto: "attribute"),
    3: .same(proto: "name"),
    4: .same(proto: "description"),
    5: .same(proto: "broadcast"),
    6: .same(proto: "avatar"),
    7: .standard(proto: "privacy_level"),
    8: .standard(proto: "stream_position"),
    9: .standard(proto: "short_name"),
  ]

  fileprivate class _StorageClass {
    var _clubID: UInt64? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _name: String? = nil
    var _description_p: String? = nil
    var _broadcast: Bgs_Protocol_Club_V1_Broadcast? = nil
    var _avatar: Bgs_Protocol_Club_V1_AvatarId? = nil
    var _privacyLevel: Bgs_Protocol_Club_V1_PrivacyLevel? = nil
    var _streamPosition: Bgs_Protocol_Club_V1_StreamPosition? = nil
    var _shortName: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _clubID = source._clubID
      _attribute = source._attribute
      _name = source._name
      _description_p = source._description_p
      _broadcast = source._broadcast
      _avatar = source._avatar
      _privacyLevel = source._privacyLevel
      _streamPosition = source._streamPosition
      _shortName = source._shortName
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._broadcast, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._broadcast)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._avatar)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._privacyLevel)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._streamPosition)
        case 9: try decoder.decodeSingularStringField(value: &_storage._shortName)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 2)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._broadcast {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._avatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._privacyLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
      }
      if let v = _storage._streamPosition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._shortName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubStateAssignment, rhs: Bgs_Protocol_Club_V1_ClubStateAssignment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._broadcast != rhs_storage._broadcast {return false}
        if _storage._avatar != rhs_storage._avatar {return false}
        if _storage._privacyLevel != rhs_storage._privacyLevel {return false}
        if _storage._streamPosition != rhs_storage._streamPosition {return false}
        if _storage._shortName != rhs_storage._shortName {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stream_id"),
    2: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._streamID)
      case 2: try decoder.decodeSingularEnumField(value: &self._filter)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._streamID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._filter {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_StreamSettings, rhs: Bgs_Protocol_Club_V1_StreamSettings) -> Bool {
    if lhs._streamID != rhs._streamID {return false}
    if lhs._filter != rhs._filter {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stream"),
    2: .standard(proto: "stream_notification_filter_all"),
    3: .same(proto: "attribute"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.stream)
      case 2: try decoder.decodeSingularBoolField(value: &self._streamNotificationFilterAll)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.attribute)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.stream.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stream, fieldNumber: 1)
    }
    if let v = self._streamNotificationFilterAll {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if !self.attribute.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attribute, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubSettings, rhs: Bgs_Protocol_Club_V1_ClubSettings) -> Bool {
    if lhs.stream != rhs.stream {return false}
    if lhs._streamNotificationFilterAll != rhs._streamNotificationFilterAll {return false}
    if lhs.attribute != rhs.attribute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubSettingsOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubSettingsOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stream"),
    2: .same(proto: "settings"),
    3: .same(proto: "version"),
  ]

  fileprivate class _StorageClass {
    var _stream: [Bgs_Protocol_Club_V1_StreamSettings] = []
    var _settings: Bgs_Protocol_Club_V1_ClubSettings? = nil
    var _version: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _stream = source._stream
      _settings = source._settings
      _version = source._version
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._stream)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._settings)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._version)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._stream.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._stream, fieldNumber: 1)
      }
      if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._version {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubSettingsOptions, rhs: Bgs_Protocol_Club_V1_ClubSettingsOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._stream != rhs_storage._stream {return false}
        if _storage._settings != rhs_storage._settings {return false}
        if _storage._version != rhs_storage._version {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubSettingsAssignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubSettingsAssignment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "stream"),
    2: .same(proto: "settings"),
  ]

  fileprivate class _StorageClass {
    var _stream: [Bgs_Protocol_Club_V1_StreamSettings] = []
    var _settings: Bgs_Protocol_Club_V1_ClubSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _stream = source._stream
      _settings = source._settings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._stream)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._settings)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._stream.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._stream, fieldNumber: 1)
      }
      if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubSettingsAssignment, rhs: Bgs_Protocol_Club_V1_ClubSettingsAssignment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._stream != rhs_storage._stream {return false}
        if _storage._settings != rhs_storage._settings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
