// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/channel_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Channel_V1_RemoveMemberRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var memberID: Bgs_Protocol_EntityId {
    get {return _storage._memberID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_uniqueStorage()._memberID = nil}

  public var reason: UInt32 {
    get {return _storage._reason ?? 0}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_uniqueStorage()._reason = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V1_SendMessageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var message: Bgs_Protocol_Channel_V1_Message {
    get {return _storage._message ?? Bgs_Protocol_Channel_V1_Message()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {_uniqueStorage()._message = nil}

  public var requiredPrivileges: UInt64 {
    get {return _storage._requiredPrivileges ?? 0}
    set {_uniqueStorage()._requiredPrivileges = newValue}
  }
  /// Returns true if `requiredPrivileges` has been explicitly set.
  public var hasRequiredPrivileges: Bool {return _storage._requiredPrivileges != nil}
  /// Clears the value of `requiredPrivileges`. Subsequent reads from it will return its default value.
  public mutating func clearRequiredPrivileges() {_uniqueStorage()._requiredPrivileges = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V1_UpdateChannelStateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var stateChange: Bgs_Protocol_Channel_V1_ChannelState {
    get {return _storage._stateChange ?? Bgs_Protocol_Channel_V1_ChannelState()}
    set {_uniqueStorage()._stateChange = newValue}
  }
  /// Returns true if `stateChange` has been explicitly set.
  public var hasStateChange: Bool {return _storage._stateChange != nil}
  /// Clears the value of `stateChange`. Subsequent reads from it will return its default value.
  public mutating func clearStateChange() {_uniqueStorage()._stateChange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V1_UpdateMemberStateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var stateChange: [Bgs_Protocol_Channel_V1_Member] {
    get {return _storage._stateChange}
    set {_uniqueStorage()._stateChange = newValue}
  }

  public var removedRole: [UInt32] {
    get {return _storage._removedRole}
    set {_uniqueStorage()._removedRole = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V1_DissolveRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var reason: UInt32 {
    get {return _storage._reason ?? 0}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_uniqueStorage()._reason = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V1_JoinNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var self_p: Bgs_Protocol_Channel_V1_Member {
    get {return _storage._self_p ?? Bgs_Protocol_Channel_V1_Member()}
    set {_uniqueStorage()._self_p = newValue}
  }
  /// Returns true if `self_p` has been explicitly set.
  public var hasSelf_p: Bool {return _storage._self_p != nil}
  /// Clears the value of `self_p`. Subsequent reads from it will return its default value.
  public mutating func clearSelf_p() {_uniqueStorage()._self_p = nil}

  public var member: [Bgs_Protocol_Channel_V1_Member] {
    get {return _storage._member}
    set {_uniqueStorage()._member = newValue}
  }

  public var channelState: Bgs_Protocol_Channel_V1_ChannelState {
    get {return _storage._channelState ?? Bgs_Protocol_Channel_V1_ChannelState()}
    set {_uniqueStorage()._channelState = newValue}
  }
  /// Returns true if `channelState` has been explicitly set.
  public var hasChannelState: Bool {return _storage._channelState != nil}
  /// Clears the value of `channelState`. Subsequent reads from it will return its default value.
  public mutating func clearChannelState() {_uniqueStorage()._channelState = nil}

  public var channelID: Bgs_Protocol_Channel_V1_ChannelId {
    get {return _storage._channelID ?? Bgs_Protocol_Channel_V1_ChannelId()}
    set {_uniqueStorage()._channelID = newValue}
  }
  /// Returns true if `channelID` has been explicitly set.
  public var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
  public mutating func clearChannelID() {_uniqueStorage()._channelID = nil}

  public var subscriberID: Bgs_Protocol_Channel_V1_SubscriberId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Channel_V1_SubscriberId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var presenceSubscriberID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._presenceSubscriberID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._presenceSubscriberID = newValue}
  }
  /// Returns true if `presenceSubscriberID` has been explicitly set.
  public var hasPresenceSubscriberID: Bool {return _storage._presenceSubscriberID != nil}
  /// Clears the value of `presenceSubscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearPresenceSubscriberID() {_uniqueStorage()._presenceSubscriberID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V1_MemberAddedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var member: Bgs_Protocol_Channel_V1_Member {
    get {return _storage._member ?? Bgs_Protocol_Channel_V1_Member()}
    set {_uniqueStorage()._member = newValue}
  }
  /// Returns true if `member` has been explicitly set.
  public var hasMember: Bool {return _storage._member != nil}
  /// Clears the value of `member`. Subsequent reads from it will return its default value.
  public mutating func clearMember() {_uniqueStorage()._member = nil}

  public var channelID: Bgs_Protocol_Channel_V1_ChannelId {
    get {return _storage._channelID ?? Bgs_Protocol_Channel_V1_ChannelId()}
    set {_uniqueStorage()._channelID = newValue}
  }
  /// Returns true if `channelID` has been explicitly set.
  public var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
  public mutating func clearChannelID() {_uniqueStorage()._channelID = nil}

  public var subscriberID: Bgs_Protocol_Channel_V1_SubscriberId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Channel_V1_SubscriberId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V1_LeaveNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var memberID: Bgs_Protocol_EntityId {
    get {return _storage._memberID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_uniqueStorage()._memberID = nil}

  public var reason: UInt32 {
    get {return _storage._reason ?? 0}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_uniqueStorage()._reason = nil}

  public var channelID: Bgs_Protocol_Channel_V1_ChannelId {
    get {return _storage._channelID ?? Bgs_Protocol_Channel_V1_ChannelId()}
    set {_uniqueStorage()._channelID = newValue}
  }
  /// Returns true if `channelID` has been explicitly set.
  public var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
  public mutating func clearChannelID() {_uniqueStorage()._channelID = nil}

  public var subscriberID: Bgs_Protocol_Channel_V1_SubscriberId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Channel_V1_SubscriberId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V1_MemberRemovedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var memberID: Bgs_Protocol_EntityId {
    get {return _storage._memberID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_uniqueStorage()._memberID = nil}

  public var reason: UInt32 {
    get {return _storage._reason ?? 0}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_uniqueStorage()._reason = nil}

  public var channelID: Bgs_Protocol_Channel_V1_ChannelId {
    get {return _storage._channelID ?? Bgs_Protocol_Channel_V1_ChannelId()}
    set {_uniqueStorage()._channelID = newValue}
  }
  /// Returns true if `channelID` has been explicitly set.
  public var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
  public mutating func clearChannelID() {_uniqueStorage()._channelID = nil}

  public var subscriberID: Bgs_Protocol_Channel_V1_SubscriberId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Channel_V1_SubscriberId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V1_SendMessageNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var message: Bgs_Protocol_Channel_V1_Message {
    get {return _storage._message ?? Bgs_Protocol_Channel_V1_Message()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {_uniqueStorage()._message = nil}

  public var requiredPrivileges: UInt64 {
    get {return _storage._requiredPrivileges ?? 0}
    set {_uniqueStorage()._requiredPrivileges = newValue}
  }
  /// Returns true if `requiredPrivileges` has been explicitly set.
  public var hasRequiredPrivileges: Bool {return _storage._requiredPrivileges != nil}
  /// Clears the value of `requiredPrivileges`. Subsequent reads from it will return its default value.
  public mutating func clearRequiredPrivileges() {_uniqueStorage()._requiredPrivileges = nil}

  public var battleTag: String {
    get {return _storage._battleTag ?? String()}
    set {_uniqueStorage()._battleTag = newValue}
  }
  /// Returns true if `battleTag` has been explicitly set.
  public var hasBattleTag: Bool {return _storage._battleTag != nil}
  /// Clears the value of `battleTag`. Subsequent reads from it will return its default value.
  public mutating func clearBattleTag() {_uniqueStorage()._battleTag = nil}

  public var channelID: Bgs_Protocol_Channel_V1_ChannelId {
    get {return _storage._channelID ?? Bgs_Protocol_Channel_V1_ChannelId()}
    set {_uniqueStorage()._channelID = newValue}
  }
  /// Returns true if `channelID` has been explicitly set.
  public var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
  public mutating func clearChannelID() {_uniqueStorage()._channelID = nil}

  public var subscriberID: Bgs_Protocol_Channel_V1_SubscriberId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Channel_V1_SubscriberId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V1_UpdateChannelStateNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var stateChange: Bgs_Protocol_Channel_V1_ChannelState {
    get {return _storage._stateChange ?? Bgs_Protocol_Channel_V1_ChannelState()}
    set {_uniqueStorage()._stateChange = newValue}
  }
  /// Returns true if `stateChange` has been explicitly set.
  public var hasStateChange: Bool {return _storage._stateChange != nil}
  /// Clears the value of `stateChange`. Subsequent reads from it will return its default value.
  public mutating func clearStateChange() {_uniqueStorage()._stateChange = nil}

  public var channelID: Bgs_Protocol_Channel_V1_ChannelId {
    get {return _storage._channelID ?? Bgs_Protocol_Channel_V1_ChannelId()}
    set {_uniqueStorage()._channelID = newValue}
  }
  /// Returns true if `channelID` has been explicitly set.
  public var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
  public mutating func clearChannelID() {_uniqueStorage()._channelID = nil}

  public var subscriberID: Bgs_Protocol_Channel_V1_SubscriberId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Channel_V1_SubscriberId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var presenceSubscriberID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._presenceSubscriberID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._presenceSubscriberID = newValue}
  }
  /// Returns true if `presenceSubscriberID` has been explicitly set.
  public var hasPresenceSubscriberID: Bool {return _storage._presenceSubscriberID != nil}
  /// Clears the value of `presenceSubscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearPresenceSubscriberID() {_uniqueStorage()._presenceSubscriberID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V1_UpdateMemberStateNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var stateChange: [Bgs_Protocol_Channel_V1_Member] {
    get {return _storage._stateChange}
    set {_uniqueStorage()._stateChange = newValue}
  }

  public var channelID: Bgs_Protocol_Channel_V1_ChannelId {
    get {return _storage._channelID ?? Bgs_Protocol_Channel_V1_ChannelId()}
    set {_uniqueStorage()._channelID = newValue}
  }
  /// Returns true if `channelID` has been explicitly set.
  public var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
  public mutating func clearChannelID() {_uniqueStorage()._channelID = nil}

  public var subscriberID: Bgs_Protocol_Channel_V1_SubscriberId {
    get {return _storage._subscriberID ?? Bgs_Protocol_Channel_V1_SubscriberId()}
    set {_uniqueStorage()._subscriberID = newValue}
  }
  /// Returns true if `subscriberID` has been explicitly set.
  public var hasSubscriberID: Bool {return _storage._subscriberID != nil}
  /// Clears the value of `subscriberID`. Subsequent reads from it will return its default value.
  public mutating func clearSubscriberID() {_uniqueStorage()._subscriberID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.channel.v1"

extension Bgs_Protocol_Channel_V1_RemoveMemberRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoveMemberRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "member_id"),
    3: .same(proto: "reason"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _memberID: Bgs_Protocol_EntityId? = nil
    var _reason: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _memberID = source._memberID
      _reason = source._reason
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._memberID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._memberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._reason)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._reason {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_V1_RemoveMemberRequest, rhs: Bgs_Protocol_Channel_V1_RemoveMemberRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._memberID != rhs_storage._memberID {return false}
        if _storage._reason != rhs_storage._reason {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V1_SendMessageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SendMessageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .same(proto: "message"),
    3: .standard(proto: "required_privileges"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _message: Bgs_Protocol_Channel_V1_Message? = nil
    var _requiredPrivileges: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _message = source._message
      _requiredPrivileges = source._requiredPrivileges
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._message == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._message, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._message)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._requiredPrivileges)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._requiredPrivileges {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_V1_SendMessageRequest, rhs: Bgs_Protocol_Channel_V1_SendMessageRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._requiredPrivileges != rhs_storage._requiredPrivileges {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V1_UpdateChannelStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateChannelStateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "state_change"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _stateChange: Bgs_Protocol_Channel_V1_ChannelState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _stateChange = source._stateChange
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._stateChange == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._stateChange, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._stateChange)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._stateChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_V1_UpdateChannelStateRequest, rhs: Bgs_Protocol_Channel_V1_UpdateChannelStateRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._stateChange != rhs_storage._stateChange {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V1_UpdateMemberStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateMemberStateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "state_change"),
    3: .standard(proto: "removed_role"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _stateChange: [Bgs_Protocol_Channel_V1_Member] = []
    var _removedRole: [UInt32] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _stateChange = source._stateChange
      _removedRole = source._removedRole
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._stateChange) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._stateChange)
        case 3: try decoder.decodeRepeatedUInt32Field(value: &_storage._removedRole)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._stateChange.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._stateChange, fieldNumber: 2)
      }
      if !_storage._removedRole.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._removedRole, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_V1_UpdateMemberStateRequest, rhs: Bgs_Protocol_Channel_V1_UpdateMemberStateRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._stateChange != rhs_storage._stateChange {return false}
        if _storage._removedRole != rhs_storage._removedRole {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V1_DissolveRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DissolveRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .same(proto: "reason"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _reason: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _reason = source._reason
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._reason)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._reason {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_V1_DissolveRequest, rhs: Bgs_Protocol_Channel_V1_DissolveRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._reason != rhs_storage._reason {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V1_JoinNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JoinNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "self"),
    2: .same(proto: "member"),
    3: .standard(proto: "channel_state"),
    4: .standard(proto: "channel_id"),
    5: .standard(proto: "subscriber_id"),
    6: .standard(proto: "presence_subscriber_id"),
  ]

  fileprivate class _StorageClass {
    var _self_p: Bgs_Protocol_Channel_V1_Member? = nil
    var _member: [Bgs_Protocol_Channel_V1_Member] = []
    var _channelState: Bgs_Protocol_Channel_V1_ChannelState? = nil
    var _channelID: Bgs_Protocol_Channel_V1_ChannelId? = nil
    var _subscriberID: Bgs_Protocol_Channel_V1_SubscriberId? = nil
    var _presenceSubscriberID: Bgs_Protocol_Account_V1_AccountId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _self_p = source._self_p
      _member = source._member
      _channelState = source._channelState
      _channelID = source._channelID
      _subscriberID = source._subscriberID
      _presenceSubscriberID = source._presenceSubscriberID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._channelState == nil {return false}
      if let v = _storage._self_p, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._member) {return false}
      if let v = _storage._channelState, !v.isInitialized {return false}
      if let v = _storage._channelID, !v.isInitialized {return false}
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      if let v = _storage._presenceSubscriberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._self_p)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._member)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._channelState)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._channelID)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._presenceSubscriberID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._self_p {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._member.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._member, fieldNumber: 2)
      }
      if let v = _storage._channelState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._channelID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._presenceSubscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_V1_JoinNotification, rhs: Bgs_Protocol_Channel_V1_JoinNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._self_p != rhs_storage._self_p {return false}
        if _storage._member != rhs_storage._member {return false}
        if _storage._channelState != rhs_storage._channelState {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._presenceSubscriberID != rhs_storage._presenceSubscriberID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V1_MemberAddedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberAddedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "member"),
    2: .standard(proto: "channel_id"),
    3: .standard(proto: "subscriber_id"),
  ]

  fileprivate class _StorageClass {
    var _member: Bgs_Protocol_Channel_V1_Member? = nil
    var _channelID: Bgs_Protocol_Channel_V1_ChannelId? = nil
    var _subscriberID: Bgs_Protocol_Channel_V1_SubscriberId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _member = source._member
      _channelID = source._channelID
      _subscriberID = source._subscriberID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._member == nil {return false}
      if let v = _storage._member, !v.isInitialized {return false}
      if let v = _storage._channelID, !v.isInitialized {return false}
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._member)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._channelID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._member {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._channelID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_V1_MemberAddedNotification, rhs: Bgs_Protocol_Channel_V1_MemberAddedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._member != rhs_storage._member {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V1_LeaveNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LeaveNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "member_id"),
    3: .same(proto: "reason"),
    4: .standard(proto: "channel_id"),
    5: .standard(proto: "subscriber_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _memberID: Bgs_Protocol_EntityId? = nil
    var _reason: UInt32? = nil
    var _channelID: Bgs_Protocol_Channel_V1_ChannelId? = nil
    var _subscriberID: Bgs_Protocol_Channel_V1_SubscriberId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _memberID = source._memberID
      _reason = source._reason
      _channelID = source._channelID
      _subscriberID = source._subscriberID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._memberID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._memberID, !v.isInitialized {return false}
      if let v = _storage._channelID, !v.isInitialized {return false}
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._reason)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._channelID)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._reason {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._channelID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_V1_LeaveNotification, rhs: Bgs_Protocol_Channel_V1_LeaveNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._memberID != rhs_storage._memberID {return false}
        if _storage._reason != rhs_storage._reason {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V1_MemberRemovedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberRemovedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "member_id"),
    3: .same(proto: "reason"),
    4: .standard(proto: "channel_id"),
    5: .standard(proto: "subscriber_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _memberID: Bgs_Protocol_EntityId? = nil
    var _reason: UInt32? = nil
    var _channelID: Bgs_Protocol_Channel_V1_ChannelId? = nil
    var _subscriberID: Bgs_Protocol_Channel_V1_SubscriberId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _memberID = source._memberID
      _reason = source._reason
      _channelID = source._channelID
      _subscriberID = source._subscriberID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._memberID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._memberID, !v.isInitialized {return false}
      if let v = _storage._channelID, !v.isInitialized {return false}
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._reason)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._channelID)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._reason {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._channelID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_V1_MemberRemovedNotification, rhs: Bgs_Protocol_Channel_V1_MemberRemovedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._memberID != rhs_storage._memberID {return false}
        if _storage._reason != rhs_storage._reason {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V1_SendMessageNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SendMessageNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .same(proto: "message"),
    3: .standard(proto: "required_privileges"),
    4: .standard(proto: "battle_tag"),
    5: .standard(proto: "channel_id"),
    6: .standard(proto: "subscriber_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _message: Bgs_Protocol_Channel_V1_Message? = nil
    var _requiredPrivileges: UInt64? = nil
    var _battleTag: String? = nil
    var _channelID: Bgs_Protocol_Channel_V1_ChannelId? = nil
    var _subscriberID: Bgs_Protocol_Channel_V1_SubscriberId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _message = source._message
      _requiredPrivileges = source._requiredPrivileges
      _battleTag = source._battleTag
      _channelID = source._channelID
      _subscriberID = source._subscriberID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._message == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._message, !v.isInitialized {return false}
      if let v = _storage._channelID, !v.isInitialized {return false}
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._message)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._requiredPrivileges)
        case 4: try decoder.decodeSingularStringField(value: &_storage._battleTag)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._channelID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._requiredPrivileges {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._battleTag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._channelID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_V1_SendMessageNotification, rhs: Bgs_Protocol_Channel_V1_SendMessageNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._requiredPrivileges != rhs_storage._requiredPrivileges {return false}
        if _storage._battleTag != rhs_storage._battleTag {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V1_UpdateChannelStateNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateChannelStateNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "state_change"),
    3: .standard(proto: "channel_id"),
    4: .standard(proto: "subscriber_id"),
    5: .standard(proto: "presence_subscriber_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _stateChange: Bgs_Protocol_Channel_V1_ChannelState? = nil
    var _channelID: Bgs_Protocol_Channel_V1_ChannelId? = nil
    var _subscriberID: Bgs_Protocol_Channel_V1_SubscriberId? = nil
    var _presenceSubscriberID: Bgs_Protocol_Account_V1_AccountId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _stateChange = source._stateChange
      _channelID = source._channelID
      _subscriberID = source._subscriberID
      _presenceSubscriberID = source._presenceSubscriberID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._stateChange == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._stateChange, !v.isInitialized {return false}
      if let v = _storage._channelID, !v.isInitialized {return false}
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      if let v = _storage._presenceSubscriberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._stateChange)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._channelID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._presenceSubscriberID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._stateChange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._channelID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._presenceSubscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_V1_UpdateChannelStateNotification, rhs: Bgs_Protocol_Channel_V1_UpdateChannelStateNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._stateChange != rhs_storage._stateChange {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        if _storage._presenceSubscriberID != rhs_storage._presenceSubscriberID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V1_UpdateMemberStateNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateMemberStateNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "state_change"),
    4: .standard(proto: "channel_id"),
    5: .standard(proto: "subscriber_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _stateChange: [Bgs_Protocol_Channel_V1_Member] = []
    var _channelID: Bgs_Protocol_Channel_V1_ChannelId? = nil
    var _subscriberID: Bgs_Protocol_Channel_V1_SubscriberId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _stateChange = source._stateChange
      _channelID = source._channelID
      _subscriberID = source._subscriberID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._stateChange) {return false}
      if let v = _storage._channelID, !v.isInitialized {return false}
      if let v = _storage._subscriberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._stateChange)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._channelID)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._subscriberID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._stateChange.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._stateChange, fieldNumber: 2)
      }
      if let v = _storage._channelID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._subscriberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_V1_UpdateMemberStateNotification, rhs: Bgs_Protocol_Channel_V1_UpdateMemberStateNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._stateChange != rhs_storage._stateChange {return false}
        if _storage._channelID != rhs_storage._channelID {return false}
        if _storage._subscriberID != rhs_storage._subscriberID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
