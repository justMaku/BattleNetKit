// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/rpc_types.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_NO_RESPONSE: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NO_RESPONSE"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Bgs_Protocol_Address: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Address"

  public var address: String {
    get {return _address ?? String()}
    set {_address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  public var hasAddress: Bool {return self._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  public mutating func clearAddress() {self._address = nil}

  public var port: UInt32 {
    get {return _port ?? 0}
    set {_port = newValue}
  }
  /// Returns true if `port` has been explicitly set.
  public var hasPort: Bool {return self._port != nil}
  /// Clears the value of `port`. Subsequent reads from it will return its default value.
  public mutating func clearPort() {self._port = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if self._address == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._address)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._port)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._address {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._port {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _address: String? = nil
  fileprivate var _port: UInt32? = nil
}

public struct Bgs_Protocol_ProcessId: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ProcessId"

  public var label: UInt32 {
    get {return _label ?? 0}
    set {_label = newValue}
  }
  /// Returns true if `label` has been explicitly set.
  public var hasLabel: Bool {return self._label != nil}
  /// Clears the value of `label`. Subsequent reads from it will return its default value.
  public mutating func clearLabel() {self._label = nil}

  public var epoch: UInt32 {
    get {return _epoch ?? 0}
    set {_epoch = newValue}
  }
  /// Returns true if `epoch` has been explicitly set.
  public var hasEpoch: Bool {return self._epoch != nil}
  /// Clears the value of `epoch`. Subsequent reads from it will return its default value.
  public mutating func clearEpoch() {self._epoch = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if self._label == nil {return false}
    if self._epoch == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._label)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._epoch)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._label {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._epoch {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _label: UInt32? = nil
  fileprivate var _epoch: UInt32? = nil
}

public struct Bgs_Protocol_ObjectAddress: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ObjectAddress"

  public var host: Bgs_Protocol_ProcessId {
    get {return _storage._host ?? Bgs_Protocol_ProcessId()}
    set {_uniqueStorage()._host = newValue}
  }
  /// Returns true if `host` has been explicitly set.
  public var hasHost: Bool {return _storage._host != nil}
  /// Clears the value of `host`. Subsequent reads from it will return its default value.
  public mutating func clearHost() {_storage._host = nil}

  public var objectID: UInt64 {
    get {return _storage._objectID ?? 0}
    set {_uniqueStorage()._objectID = newValue}
  }
  /// Returns true if `objectID` has been explicitly set.
  public var hasObjectID: Bool {return _storage._objectID != nil}
  /// Clears the value of `objectID`. Subsequent reads from it will return its default value.
  public mutating func clearObjectID() {_storage._objectID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._host == nil {return false}
      if let v = _storage._host, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._host)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._objectID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._host {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._objectID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_NoData: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".NoData"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Bgs_Protocol_ErrorInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ErrorInfo"

  public var objectAddress: Bgs_Protocol_ObjectAddress {
    get {return _storage._objectAddress ?? Bgs_Protocol_ObjectAddress()}
    set {_uniqueStorage()._objectAddress = newValue}
  }
  /// Returns true if `objectAddress` has been explicitly set.
  public var hasObjectAddress: Bool {return _storage._objectAddress != nil}
  /// Clears the value of `objectAddress`. Subsequent reads from it will return its default value.
  public mutating func clearObjectAddress() {_storage._objectAddress = nil}

  public var status: UInt32 {
    get {return _storage._status ?? 0}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_storage._status = nil}

  public var serviceHash: UInt32 {
    get {return _storage._serviceHash ?? 0}
    set {_uniqueStorage()._serviceHash = newValue}
  }
  /// Returns true if `serviceHash` has been explicitly set.
  public var hasServiceHash: Bool {return _storage._serviceHash != nil}
  /// Clears the value of `serviceHash`. Subsequent reads from it will return its default value.
  public mutating func clearServiceHash() {_storage._serviceHash = nil}

  public var methodID: UInt32 {
    get {return _storage._methodID ?? 0}
    set {_uniqueStorage()._methodID = newValue}
  }
  /// Returns true if `methodID` has been explicitly set.
  public var hasMethodID: Bool {return _storage._methodID != nil}
  /// Clears the value of `methodID`. Subsequent reads from it will return its default value.
  public mutating func clearMethodID() {_storage._methodID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._objectAddress == nil {return false}
      if _storage._status == nil {return false}
      if _storage._serviceHash == nil {return false}
      if _storage._methodID == nil {return false}
      if let v = _storage._objectAddress, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._objectAddress)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._status)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._serviceHash)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._methodID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._objectAddress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._status {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._serviceHash {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._methodID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_FanoutTarget: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FanoutTarget"

  public var clientID: String {
    get {return _clientID ?? String()}
    set {_clientID = newValue}
  }
  /// Returns true if `clientID` has been explicitly set.
  public var hasClientID: Bool {return self._clientID != nil}
  /// Clears the value of `clientID`. Subsequent reads from it will return its default value.
  public mutating func clearClientID() {self._clientID = nil}

  public var key: Data {
    get {return _key ?? SwiftProtobuf.Internal.emptyData}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {self._key = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._clientID)
      case 2: try decoder.decodeSingularBytesField(value: &self._key)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._clientID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._key {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _clientID: String? = nil
  fileprivate var _key: Data? = nil
}

public struct Bgs_Protocol_Header: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Header"

  public var serviceID: UInt32 {
    get {return _serviceID ?? 0}
    set {_serviceID = newValue}
  }
  /// Returns true if `serviceID` has been explicitly set.
  public var hasServiceID: Bool {return self._serviceID != nil}
  /// Clears the value of `serviceID`. Subsequent reads from it will return its default value.
  public mutating func clearServiceID() {self._serviceID = nil}

  public var methodID: UInt32 {
    get {return _methodID ?? 0}
    set {_methodID = newValue}
  }
  /// Returns true if `methodID` has been explicitly set.
  public var hasMethodID: Bool {return self._methodID != nil}
  /// Clears the value of `methodID`. Subsequent reads from it will return its default value.
  public mutating func clearMethodID() {self._methodID = nil}

  public var token: UInt32 {
    get {return _token ?? 0}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var objectID: UInt64 {
    get {return _objectID ?? 0}
    set {_objectID = newValue}
  }
  /// Returns true if `objectID` has been explicitly set.
  public var hasObjectID: Bool {return self._objectID != nil}
  /// Clears the value of `objectID`. Subsequent reads from it will return its default value.
  public mutating func clearObjectID() {self._objectID = nil}

  public var size: UInt32 {
    get {return _size ?? 0}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  public var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  public mutating func clearSize() {self._size = nil}

  public var status: UInt32 {
    get {return _status ?? 0}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {self._status = nil}

  public var error: [Bgs_Protocol_ErrorInfo] = []

  public var timeout: UInt64 {
    get {return _timeout ?? 0}
    set {_timeout = newValue}
  }
  /// Returns true if `timeout` has been explicitly set.
  public var hasTimeout: Bool {return self._timeout != nil}
  /// Clears the value of `timeout`. Subsequent reads from it will return its default value.
  public mutating func clearTimeout() {self._timeout = nil}

  public var isResponse: Bool {
    get {return _isResponse ?? false}
    set {_isResponse = newValue}
  }
  /// Returns true if `isResponse` has been explicitly set.
  public var hasIsResponse: Bool {return self._isResponse != nil}
  /// Clears the value of `isResponse`. Subsequent reads from it will return its default value.
  public mutating func clearIsResponse() {self._isResponse = nil}

  public var forwardTargets: [Bgs_Protocol_ProcessId] = []

  public var serviceHash: UInt32 {
    get {return _serviceHash ?? 0}
    set {_serviceHash = newValue}
  }
  /// Returns true if `serviceHash` has been explicitly set.
  public var hasServiceHash: Bool {return self._serviceHash != nil}
  /// Clears the value of `serviceHash`. Subsequent reads from it will return its default value.
  public mutating func clearServiceHash() {self._serviceHash = nil}

  public var clientID: String {
    get {return _clientID ?? String()}
    set {_clientID = newValue}
  }
  /// Returns true if `clientID` has been explicitly set.
  public var hasClientID: Bool {return self._clientID != nil}
  /// Clears the value of `clientID`. Subsequent reads from it will return its default value.
  public mutating func clearClientID() {self._clientID = nil}

  public var fanoutTarget: [Bgs_Protocol_FanoutTarget] = []

  public var clientIDFanoutTarget: [String] = []

  public var clientRecord: Data {
    get {return _clientRecord ?? SwiftProtobuf.Internal.emptyData}
    set {_clientRecord = newValue}
  }
  /// Returns true if `clientRecord` has been explicitly set.
  public var hasClientRecord: Bool {return self._clientRecord != nil}
  /// Clears the value of `clientRecord`. Subsequent reads from it will return its default value.
  public mutating func clearClientRecord() {self._clientRecord = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if self._serviceID == nil {return false}
    if self._token == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.error) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.forwardTargets) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._serviceID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._methodID)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._token)
      case 4: try decoder.decodeSingularUInt64Field(value: &self._objectID)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._size)
      case 6: try decoder.decodeSingularUInt32Field(value: &self._status)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.error)
      case 8: try decoder.decodeSingularUInt64Field(value: &self._timeout)
      case 9: try decoder.decodeSingularBoolField(value: &self._isResponse)
      case 10: try decoder.decodeRepeatedMessageField(value: &self.forwardTargets)
      case 11: try decoder.decodeSingularFixed32Field(value: &self._serviceHash)
      case 13: try decoder.decodeSingularStringField(value: &self._clientID)
      case 14: try decoder.decodeRepeatedMessageField(value: &self.fanoutTarget)
      case 15: try decoder.decodeRepeatedStringField(value: &self.clientIDFanoutTarget)
      case 16: try decoder.decodeSingularBytesField(value: &self._clientRecord)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._serviceID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._methodID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._token {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._objectID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    }
    if let v = self._size {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._status {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if !self.error.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.error, fieldNumber: 7)
    }
    if let v = self._timeout {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
    }
    if let v = self._isResponse {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if !self.forwardTargets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.forwardTargets, fieldNumber: 10)
    }
    if let v = self._serviceHash {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 11)
    }
    if let v = self._clientID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    }
    if !self.fanoutTarget.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fanoutTarget, fieldNumber: 14)
    }
    if !self.clientIDFanoutTarget.isEmpty {
      try visitor.visitRepeatedStringField(value: self.clientIDFanoutTarget, fieldNumber: 15)
    }
    if let v = self._clientRecord {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 16)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _serviceID: UInt32? = nil
  fileprivate var _methodID: UInt32? = nil
  fileprivate var _token: UInt32? = nil
  fileprivate var _objectID: UInt64? = nil
  fileprivate var _size: UInt32? = nil
  fileprivate var _status: UInt32? = nil
  fileprivate var _timeout: UInt64? = nil
  fileprivate var _isResponse: Bool? = nil
  fileprivate var _serviceHash: UInt32? = nil
  fileprivate var _clientID: String? = nil
  fileprivate var _clientRecord: Data? = nil
}

public struct Bgs_Protocol_KafkaHeader: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".KafkaHeader"

  public var serviceHash: UInt32 {
    get {return _storage._serviceHash ?? 0}
    set {_uniqueStorage()._serviceHash = newValue}
  }
  /// Returns true if `serviceHash` has been explicitly set.
  public var hasServiceHash: Bool {return _storage._serviceHash != nil}
  /// Clears the value of `serviceHash`. Subsequent reads from it will return its default value.
  public mutating func clearServiceHash() {_storage._serviceHash = nil}

  public var methodID: UInt32 {
    get {return _storage._methodID ?? 0}
    set {_uniqueStorage()._methodID = newValue}
  }
  /// Returns true if `methodID` has been explicitly set.
  public var hasMethodID: Bool {return _storage._methodID != nil}
  /// Clears the value of `methodID`. Subsequent reads from it will return its default value.
  public mutating func clearMethodID() {_storage._methodID = nil}

  public var token: UInt32 {
    get {return _storage._token ?? 0}
    set {_uniqueStorage()._token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return _storage._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {_storage._token = nil}

  public var objectID: UInt64 {
    get {return _storage._objectID ?? 0}
    set {_uniqueStorage()._objectID = newValue}
  }
  /// Returns true if `objectID` has been explicitly set.
  public var hasObjectID: Bool {return _storage._objectID != nil}
  /// Clears the value of `objectID`. Subsequent reads from it will return its default value.
  public mutating func clearObjectID() {_storage._objectID = nil}

  public var size: UInt32 {
    get {return _storage._size ?? 0}
    set {_uniqueStorage()._size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  public var hasSize: Bool {return _storage._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  public mutating func clearSize() {_storage._size = nil}

  public var status: UInt32 {
    get {return _storage._status ?? 0}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_storage._status = nil}

  public var timeout: UInt64 {
    get {return _storage._timeout ?? 0}
    set {_uniqueStorage()._timeout = newValue}
  }
  /// Returns true if `timeout` has been explicitly set.
  public var hasTimeout: Bool {return _storage._timeout != nil}
  /// Clears the value of `timeout`. Subsequent reads from it will return its default value.
  public mutating func clearTimeout() {_storage._timeout = nil}

  public var forwardTarget: Bgs_Protocol_ProcessId {
    get {return _storage._forwardTarget ?? Bgs_Protocol_ProcessId()}
    set {_uniqueStorage()._forwardTarget = newValue}
  }
  /// Returns true if `forwardTarget` has been explicitly set.
  public var hasForwardTarget: Bool {return _storage._forwardTarget != nil}
  /// Clears the value of `forwardTarget`. Subsequent reads from it will return its default value.
  public mutating func clearForwardTarget() {_storage._forwardTarget = nil}

  public var returnTopic: String {
    get {return _storage._returnTopic ?? String()}
    set {_uniqueStorage()._returnTopic = newValue}
  }
  /// Returns true if `returnTopic` has been explicitly set.
  public var hasReturnTopic: Bool {return _storage._returnTopic != nil}
  /// Clears the value of `returnTopic`. Subsequent reads from it will return its default value.
  public mutating func clearReturnTopic() {_storage._returnTopic = nil}

  public var clientID: String {
    get {return _storage._clientID ?? String()}
    set {_uniqueStorage()._clientID = newValue}
  }
  /// Returns true if `clientID` has been explicitly set.
  public var hasClientID: Bool {return _storage._clientID != nil}
  /// Clears the value of `clientID`. Subsequent reads from it will return its default value.
  public mutating func clearClientID() {_storage._clientID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._forwardTarget, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFixed32Field(value: &_storage._serviceHash)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._methodID)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._token)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._objectID)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._size)
        case 6: try decoder.decodeSingularUInt32Field(value: &_storage._status)
        case 7: try decoder.decodeSingularUInt64Field(value: &_storage._timeout)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._forwardTarget)
        case 9: try decoder.decodeSingularStringField(value: &_storage._returnTopic)
        case 11: try decoder.decodeSingularStringField(value: &_storage._clientID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._serviceHash {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._methodID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._token {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._objectID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._size {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._status {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._timeout {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._forwardTarget {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._returnTopic {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._clientID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol"

extension Bgs_Protocol_NO_RESPONSE: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_NO_RESPONSE) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Address: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .same(proto: "port"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Address) -> Bool {
    if self._address != other._address {return false}
    if self._port != other._port {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_ProcessId: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "epoch"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_ProcessId) -> Bool {
    if self._label != other._label {return false}
    if self._epoch != other._epoch {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_ObjectAddress: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .standard(proto: "object_id"),
  ]

  fileprivate class _StorageClass {
    var _host: Bgs_Protocol_ProcessId? = nil
    var _objectID: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _host = source._host
      _objectID = source._objectID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_ObjectAddress) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._host != other_storage._host {return false}
        if _storage._objectID != other_storage._objectID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_NoData: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_NoData) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_ErrorInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "object_address"),
    2: .same(proto: "status"),
    3: .standard(proto: "service_hash"),
    4: .standard(proto: "method_id"),
  ]

  fileprivate class _StorageClass {
    var _objectAddress: Bgs_Protocol_ObjectAddress? = nil
    var _status: UInt32? = nil
    var _serviceHash: UInt32? = nil
    var _methodID: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _objectAddress = source._objectAddress
      _status = source._status
      _serviceHash = source._serviceHash
      _methodID = source._methodID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_ErrorInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._objectAddress != other_storage._objectAddress {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._serviceHash != other_storage._serviceHash {return false}
        if _storage._methodID != other_storage._methodID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_FanoutTarget: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .same(proto: "key"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_FanoutTarget) -> Bool {
    if self._clientID != other._clientID {return false}
    if self._key != other._key {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Header: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_id"),
    2: .standard(proto: "method_id"),
    3: .same(proto: "token"),
    4: .standard(proto: "object_id"),
    5: .same(proto: "size"),
    6: .same(proto: "status"),
    7: .same(proto: "error"),
    8: .same(proto: "timeout"),
    9: .standard(proto: "is_response"),
    10: .standard(proto: "forward_targets"),
    11: .standard(proto: "service_hash"),
    13: .standard(proto: "client_id"),
    14: .standard(proto: "fanout_target"),
    15: .standard(proto: "client_id_fanout_target"),
    16: .standard(proto: "client_record"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Header) -> Bool {
    if self._serviceID != other._serviceID {return false}
    if self._methodID != other._methodID {return false}
    if self._token != other._token {return false}
    if self._objectID != other._objectID {return false}
    if self._size != other._size {return false}
    if self._status != other._status {return false}
    if self.error != other.error {return false}
    if self._timeout != other._timeout {return false}
    if self._isResponse != other._isResponse {return false}
    if self.forwardTargets != other.forwardTargets {return false}
    if self._serviceHash != other._serviceHash {return false}
    if self._clientID != other._clientID {return false}
    if self.fanoutTarget != other.fanoutTarget {return false}
    if self.clientIDFanoutTarget != other.clientIDFanoutTarget {return false}
    if self._clientRecord != other._clientRecord {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_KafkaHeader: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_hash"),
    2: .standard(proto: "method_id"),
    3: .same(proto: "token"),
    4: .standard(proto: "object_id"),
    5: .same(proto: "size"),
    6: .same(proto: "status"),
    7: .same(proto: "timeout"),
    8: .standard(proto: "forward_target"),
    9: .standard(proto: "return_topic"),
    11: .standard(proto: "client_id"),
  ]

  fileprivate class _StorageClass {
    var _serviceHash: UInt32? = nil
    var _methodID: UInt32? = nil
    var _token: UInt32? = nil
    var _objectID: UInt64? = nil
    var _size: UInt32? = nil
    var _status: UInt32? = nil
    var _timeout: UInt64? = nil
    var _forwardTarget: Bgs_Protocol_ProcessId? = nil
    var _returnTopic: String? = nil
    var _clientID: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _serviceHash = source._serviceHash
      _methodID = source._methodID
      _token = source._token
      _objectID = source._objectID
      _size = source._size
      _status = source._status
      _timeout = source._timeout
      _forwardTarget = source._forwardTarget
      _returnTopic = source._returnTopic
      _clientID = source._clientID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_KafkaHeader) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._serviceHash != other_storage._serviceHash {return false}
        if _storage._methodID != other_storage._methodID {return false}
        if _storage._token != other_storage._token {return false}
        if _storage._objectID != other_storage._objectID {return false}
        if _storage._size != other_storage._size {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._timeout != other_storage._timeout {return false}
        if _storage._forwardTarget != other_storage._forwardTarget {return false}
        if _storage._returnTopic != other_storage._returnTopic {return false}
        if _storage._clientID != other_storage._clientID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
