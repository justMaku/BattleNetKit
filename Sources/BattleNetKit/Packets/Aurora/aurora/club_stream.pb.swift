// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/club_stream.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Club_V1_StreamPosition: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StreamPosition"

  public var streamID: [UInt64] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt64Field(value: &self.streamID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.streamID.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.streamID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Bgs_Protocol_Club_V1_StreamAccess: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StreamAccess"

  public var role: [UInt32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.role)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.role.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.role, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Bgs_Protocol_Club_V1_CreateStreamOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CreateStreamOptions"

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  public var subject: String {
    get {return _storage._subject ?? String()}
    set {_uniqueStorage()._subject = newValue}
  }
  /// Returns true if `subject` has been explicitly set.
  public var hasSubject: Bool {return _storage._subject != nil}
  /// Clears the value of `subject`. Subsequent reads from it will return its default value.
  public mutating func clearSubject() {_storage._subject = nil}

  public var access: Bgs_Protocol_Club_V1_StreamAccess {
    get {return _storage._access ?? Bgs_Protocol_Club_V1_StreamAccess()}
    set {_uniqueStorage()._access = newValue}
  }
  /// Returns true if `access` has been explicitly set.
  public var hasAccess: Bool {return _storage._access != nil}
  /// Clears the value of `access`. Subsequent reads from it will return its default value.
  public mutating func clearAccess() {_storage._access = nil}

  public var voiceLevel: Bgs_Protocol_Club_V1_StreamVoiceLevel {
    get {return _storage._voiceLevel ?? .voiceLevelDisabled}
    set {_uniqueStorage()._voiceLevel = newValue}
  }
  /// Returns true if `voiceLevel` has been explicitly set.
  public var hasVoiceLevel: Bool {return _storage._voiceLevel != nil}
  /// Clears the value of `voiceLevel`. Subsequent reads from it will return its default value.
  public mutating func clearVoiceLevel() {_storage._voiceLevel = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularStringField(value: &_storage._subject)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._access)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._voiceLevel)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 1)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._subject {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._access {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._voiceLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_Stream: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Stream"

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_storage._clubID = nil}

  public var id: UInt64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_storage._id = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  public var subject: String {
    get {return _storage._subject ?? String()}
    set {_uniqueStorage()._subject = newValue}
  }
  /// Returns true if `subject` has been explicitly set.
  public var hasSubject: Bool {return _storage._subject != nil}
  /// Clears the value of `subject`. Subsequent reads from it will return its default value.
  public mutating func clearSubject() {_storage._subject = nil}

  public var access: Bgs_Protocol_Club_V1_StreamAccess {
    get {return _storage._access ?? Bgs_Protocol_Club_V1_StreamAccess()}
    set {_uniqueStorage()._access = newValue}
  }
  /// Returns true if `access` has been explicitly set.
  public var hasAccess: Bool {return _storage._access != nil}
  /// Clears the value of `access`. Subsequent reads from it will return its default value.
  public mutating func clearAccess() {_storage._access = nil}

  public var voiceLevel: Bgs_Protocol_Club_V1_StreamVoiceLevel {
    get {return _storage._voiceLevel ?? .voiceLevelDisabled}
    set {_uniqueStorage()._voiceLevel = newValue}
  }
  /// Returns true if `voiceLevel` has been explicitly set.
  public var hasVoiceLevel: Bool {return _storage._voiceLevel != nil}
  /// Clears the value of `voiceLevel`. Subsequent reads from it will return its default value.
  public mutating func clearVoiceLevel() {_storage._voiceLevel = nil}

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_storage._creationTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularStringField(value: &_storage._subject)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._access)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._voiceLevel)
        case 8: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._id {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 3)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._subject {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._access {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._voiceLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_MentionContent: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".MentionContent"

  public var all: Bool {
    get {return _all ?? false}
    set {_all = newValue}
  }
  /// Returns true if `all` has been explicitly set.
  public var hasAll: Bool {return self._all != nil}
  /// Clears the value of `all`. Subsequent reads from it will return its default value.
  public mutating func clearAll() {self._all = nil}

  public var here: Bool {
    get {return _here ?? false}
    set {_here = newValue}
  }
  /// Returns true if `here` has been explicitly set.
  public var hasHere: Bool {return self._here != nil}
  /// Clears the value of `here`. Subsequent reads from it will return its default value.
  public mutating func clearHere() {self._here = nil}

  public var memberID: [Bgs_Protocol_Club_V1_MemberId] = []

  public var role: [UInt32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.memberID) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._all)
      case 2: try decoder.decodeSingularBoolField(value: &self._here)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.memberID)
      case 4: try decoder.decodeRepeatedUInt32Field(value: &self.role)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._all {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._here {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if !self.memberID.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.memberID, fieldNumber: 3)
    }
    if !self.role.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.role, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _all: Bool? = nil
  fileprivate var _here: Bool? = nil
}

public struct Bgs_Protocol_Club_V1_CreateMessageOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CreateMessageOptions"

  public var content: String {
    get {return _storage._content ?? String()}
    set {_uniqueStorage()._content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return _storage._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {_storage._content = nil}

  public var mention: Bgs_Protocol_Club_V1_MentionContent {
    get {return _storage._mention ?? Bgs_Protocol_Club_V1_MentionContent()}
    set {_uniqueStorage()._mention = newValue}
  }
  /// Returns true if `mention` has been explicitly set.
  public var hasMention: Bool {return _storage._mention != nil}
  /// Clears the value of `mention`. Subsequent reads from it will return its default value.
  public mutating func clearMention() {_storage._mention = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mention, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularStringField(value: &_storage._content)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._mention)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._content {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._mention {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubStreamMessageContainer: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ClubStreamMessageContainer"

  public var message: [Bgs_Protocol_Club_V1_StreamMessage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.message) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.message)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Bgs_Protocol_Club_V1_ContentChain: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ContentChain"

  public var content: String {
    get {return _storage._content ?? String()}
    set {_uniqueStorage()._content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return _storage._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {_storage._content = nil}

  public var embed: [Bgs_Protocol_EmbedInfo] {
    get {return _storage._embed}
    set {_uniqueStorage()._embed = newValue}
  }

  public var mention: Bgs_Protocol_Club_V1_MentionContent {
    get {return _storage._mention ?? Bgs_Protocol_Club_V1_MentionContent()}
    set {_uniqueStorage()._mention = newValue}
  }
  /// Returns true if `mention` has been explicitly set.
  public var hasMention: Bool {return _storage._mention != nil}
  /// Clears the value of `mention`. Subsequent reads from it will return its default value.
  public mutating func clearMention() {_storage._mention = nil}

  public var editTime: UInt64 {
    get {return _storage._editTime ?? 0}
    set {_uniqueStorage()._editTime = newValue}
  }
  /// Returns true if `editTime` has been explicitly set.
  public var hasEditTime: Bool {return _storage._editTime != nil}
  /// Clears the value of `editTime`. Subsequent reads from it will return its default value.
  public mutating func clearEditTime() {_storage._editTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mention, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 5: try decoder.decodeSingularStringField(value: &_storage._content)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._embed)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._mention)
        case 8: try decoder.decodeSingularUInt64Field(value: &_storage._editTime)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._content {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if !_storage._embed.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._embed, fieldNumber: 6)
      }
      if let v = _storage._mention {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._editTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamMessage: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StreamMessage"

  public var id: Bgs_Protocol_MessageId {
    get {return _storage._id ?? Bgs_Protocol_MessageId()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_storage._id = nil}

  public var author: Bgs_Protocol_Club_V1_MemberDescription {
    get {return _storage._author ?? Bgs_Protocol_Club_V1_MemberDescription()}
    set {_uniqueStorage()._author = newValue}
  }
  /// Returns true if `author` has been explicitly set.
  public var hasAuthor: Bool {return _storage._author != nil}
  /// Clears the value of `author`. Subsequent reads from it will return its default value.
  public mutating func clearAuthor() {_storage._author = nil}

  public var contentChain: [Bgs_Protocol_Club_V1_ContentChain] {
    get {return _storage._contentChain}
    set {_uniqueStorage()._contentChain = newValue}
  }

  public var destroyer: Bgs_Protocol_Club_V1_MemberDescription {
    get {return _storage._destroyer ?? Bgs_Protocol_Club_V1_MemberDescription()}
    set {_uniqueStorage()._destroyer = newValue}
  }
  /// Returns true if `destroyer` has been explicitly set.
  public var hasDestroyer: Bool {return _storage._destroyer != nil}
  /// Clears the value of `destroyer`. Subsequent reads from it will return its default value.
  public mutating func clearDestroyer() {_storage._destroyer = nil}

  public var destroyed: Bool {
    get {return _storage._destroyed ?? false}
    set {_uniqueStorage()._destroyed = newValue}
  }
  /// Returns true if `destroyed` has been explicitly set.
  public var hasDestroyed: Bool {return _storage._destroyed != nil}
  /// Clears the value of `destroyed`. Subsequent reads from it will return its default value.
  public mutating func clearDestroyed() {_storage._destroyed = nil}

  public var destroyTime: UInt64 {
    get {return _storage._destroyTime ?? 0}
    set {_uniqueStorage()._destroyTime = newValue}
  }
  /// Returns true if `destroyTime` has been explicitly set.
  public var hasDestroyTime: Bool {return _storage._destroyTime != nil}
  /// Clears the value of `destroyTime`. Subsequent reads from it will return its default value.
  public mutating func clearDestroyTime() {_storage._destroyTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._author, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._contentChain) {return false}
      if let v = _storage._destroyer, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 3: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._author)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._contentChain)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._destroyer)
        case 16: try decoder.decodeSingularBoolField(value: &_storage._destroyed)
        case 17: try decoder.decodeSingularUInt64Field(value: &_storage._destroyTime)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._author {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._contentChain.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._contentChain, fieldNumber: 6)
      }
      if let v = _storage._destroyer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._destroyed {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      }
      if let v = _storage._destroyTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamMention: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StreamMention"

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_storage._clubID = nil}

  public var streamID: UInt64 {
    get {return _storage._streamID ?? 0}
    set {_uniqueStorage()._streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return _storage._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {_storage._streamID = nil}

  public var messageID: Bgs_Protocol_MessageId {
    get {return _storage._messageID ?? Bgs_Protocol_MessageId()}
    set {_uniqueStorage()._messageID = newValue}
  }
  /// Returns true if `messageID` has been explicitly set.
  public var hasMessageID: Bool {return _storage._messageID != nil}
  /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
  public mutating func clearMessageID() {_storage._messageID = nil}

  public var author: Bgs_Protocol_Club_V1_MemberDescription {
    get {return _storage._author ?? Bgs_Protocol_Club_V1_MemberDescription()}
    set {_uniqueStorage()._author = newValue}
  }
  /// Returns true if `author` has been explicitly set.
  public var hasAuthor: Bool {return _storage._author != nil}
  /// Clears the value of `author`. Subsequent reads from it will return its default value.
  public mutating func clearAuthor() {_storage._author = nil}

  public var destroyed: Bool {
    get {return _storage._destroyed ?? false}
    set {_uniqueStorage()._destroyed = newValue}
  }
  /// Returns true if `destroyed` has been explicitly set.
  public var hasDestroyed: Bool {return _storage._destroyed != nil}
  /// Clears the value of `destroyed`. Subsequent reads from it will return its default value.
  public mutating func clearDestroyed() {_storage._destroyed = nil}

  public var mentionID: Bgs_Protocol_TimeSeriesId {
    get {return _storage._mentionID ?? Bgs_Protocol_TimeSeriesId()}
    set {_uniqueStorage()._mentionID = newValue}
  }
  /// Returns true if `mentionID` has been explicitly set.
  public var hasMentionID: Bool {return _storage._mentionID != nil}
  /// Clears the value of `mentionID`. Subsequent reads from it will return its default value.
  public mutating func clearMentionID() {_storage._mentionID = nil}

  public var memberID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._memberID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_storage._memberID = nil}

  public var message: Bgs_Protocol_Club_V1_StreamMessage {
    get {return _storage._message ?? Bgs_Protocol_Club_V1_StreamMessage()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {_storage._message = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._author, !v.isInitialized {return false}
      if let v = _storage._memberID, !v.isInitialized {return false}
      if let v = _storage._message, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._streamID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._messageID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._author)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._destroyed)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._mentionID)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._message)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._streamID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._messageID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._author {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._destroyed {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      }
      if let v = _storage._mentionID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamView: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StreamView"

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_storage._clubID = nil}

  public var streamID: UInt64 {
    get {return _storage._streamID ?? 0}
    set {_uniqueStorage()._streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return _storage._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {_storage._streamID = nil}

  public var marker: Bgs_Protocol_ViewMarker {
    get {return _storage._marker ?? Bgs_Protocol_ViewMarker()}
    set {_uniqueStorage()._marker = newValue}
  }
  /// Returns true if `marker` has been explicitly set.
  public var hasMarker: Bool {return _storage._marker != nil}
  /// Clears the value of `marker`. Subsequent reads from it will return its default value.
  public mutating func clearMarker() {_storage._marker = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._streamID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._marker)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._streamID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._marker {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamAdvanceViewTime: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StreamAdvanceViewTime"

  public var streamID: UInt64 {
    get {return _streamID ?? 0}
    set {_streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return self._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {self._streamID = nil}

  public var viewTime: UInt64 {
    get {return _viewTime ?? 0}
    set {_viewTime = newValue}
  }
  /// Returns true if `viewTime` has been explicitly set.
  public var hasViewTime: Bool {return self._viewTime != nil}
  /// Clears the value of `viewTime`. Subsequent reads from it will return its default value.
  public mutating func clearViewTime() {self._viewTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._streamID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._viewTime)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._streamID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._viewTime {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _streamID: UInt64? = nil
  fileprivate var _viewTime: UInt64? = nil
}

public struct Bgs_Protocol_Club_V1_StreamEventTime: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StreamEventTime"

  public var streamID: UInt64 {
    get {return _streamID ?? 0}
    set {_streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return self._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {self._streamID = nil}

  public var eventTime: UInt64 {
    get {return _eventTime ?? 0}
    set {_eventTime = newValue}
  }
  /// Returns true if `eventTime` has been explicitly set.
  public var hasEventTime: Bool {return self._eventTime != nil}
  /// Clears the value of `eventTime`. Subsequent reads from it will return its default value.
  public mutating func clearEventTime() {self._eventTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._streamID)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._eventTime)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._streamID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._eventTime {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _streamID: UInt64? = nil
  fileprivate var _eventTime: UInt64? = nil
}

public struct Bgs_Protocol_Club_V1_StreamMentionView: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StreamMentionView"

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_storage._clubID = nil}

  public var streamID: UInt64 {
    get {return _storage._streamID ?? 0}
    set {_uniqueStorage()._streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return _storage._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {_storage._streamID = nil}

  public var marker: Bgs_Protocol_ViewMarker {
    get {return _storage._marker ?? Bgs_Protocol_ViewMarker()}
    set {_uniqueStorage()._marker = newValue}
  }
  /// Returns true if `marker` has been explicitly set.
  public var hasMarker: Bool {return _storage._marker != nil}
  /// Clears the value of `marker`. Subsequent reads from it will return its default value.
  public mutating func clearMarker() {_storage._marker = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._streamID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._marker)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._streamID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._marker {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamStateOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StreamStateOptions"

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  public var subject: String {
    get {return _storage._subject ?? String()}
    set {_uniqueStorage()._subject = newValue}
  }
  /// Returns true if `subject` has been explicitly set.
  public var hasSubject: Bool {return _storage._subject != nil}
  /// Clears the value of `subject`. Subsequent reads from it will return its default value.
  public mutating func clearSubject() {_storage._subject = nil}

  public var access: Bgs_Protocol_Club_V1_StreamAccess {
    get {return _storage._access ?? Bgs_Protocol_Club_V1_StreamAccess()}
    set {_uniqueStorage()._access = newValue}
  }
  /// Returns true if `access` has been explicitly set.
  public var hasAccess: Bool {return _storage._access != nil}
  /// Clears the value of `access`. Subsequent reads from it will return its default value.
  public mutating func clearAccess() {_storage._access = nil}

  public var voiceLevel: Bgs_Protocol_Club_V1_StreamVoiceLevel {
    get {return _storage._voiceLevel ?? .voiceLevelDisabled}
    set {_uniqueStorage()._voiceLevel = newValue}
  }
  /// Returns true if `voiceLevel` has been explicitly set.
  public var hasVoiceLevel: Bool {return _storage._voiceLevel != nil}
  /// Clears the value of `voiceLevel`. Subsequent reads from it will return its default value.
  public mutating func clearVoiceLevel() {_storage._voiceLevel = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularStringField(value: &_storage._subject)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._access)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._voiceLevel)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 1)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._subject {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._access {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._voiceLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamStateAssignment: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StreamStateAssignment"

  public var streamID: UInt64 {
    get {return _storage._streamID ?? 0}
    set {_uniqueStorage()._streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return _storage._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {_storage._streamID = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  public var subject: String {
    get {return _storage._subject ?? String()}
    set {_uniqueStorage()._subject = newValue}
  }
  /// Returns true if `subject` has been explicitly set.
  public var hasSubject: Bool {return _storage._subject != nil}
  /// Clears the value of `subject`. Subsequent reads from it will return its default value.
  public mutating func clearSubject() {_storage._subject = nil}

  public var access: Bgs_Protocol_Club_V1_StreamAccess {
    get {return _storage._access ?? Bgs_Protocol_Club_V1_StreamAccess()}
    set {_uniqueStorage()._access = newValue}
  }
  /// Returns true if `access` has been explicitly set.
  public var hasAccess: Bool {return _storage._access != nil}
  /// Clears the value of `access`. Subsequent reads from it will return its default value.
  public mutating func clearAccess() {_storage._access = nil}

  public var streamSubscriptionRemoved: Bool {
    get {return _storage._streamSubscriptionRemoved ?? false}
    set {_uniqueStorage()._streamSubscriptionRemoved = newValue}
  }
  /// Returns true if `streamSubscriptionRemoved` has been explicitly set.
  public var hasStreamSubscriptionRemoved: Bool {return _storage._streamSubscriptionRemoved != nil}
  /// Clears the value of `streamSubscriptionRemoved`. Subsequent reads from it will return its default value.
  public mutating func clearStreamSubscriptionRemoved() {_storage._streamSubscriptionRemoved = nil}

  public var voiceLevel: Bgs_Protocol_Club_V1_StreamVoiceLevel {
    get {return _storage._voiceLevel ?? .voiceLevelDisabled}
    set {_uniqueStorage()._voiceLevel = newValue}
  }
  /// Returns true if `voiceLevel` has been explicitly set.
  public var hasVoiceLevel: Bool {return _storage._voiceLevel != nil}
  /// Clears the value of `voiceLevel`. Subsequent reads from it will return its default value.
  public mutating func clearVoiceLevel() {_storage._voiceLevel = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._streamID)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._subject)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._access)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._streamSubscriptionRemoved)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._voiceLevel)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._streamID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 2)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._subject {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._access {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._streamSubscriptionRemoved {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      }
      if let v = _storage._voiceLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamTypingIndicator: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StreamTypingIndicator"

  public var authorID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._authorID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._authorID = newValue}
  }
  /// Returns true if `authorID` has been explicitly set.
  public var hasAuthorID: Bool {return _storage._authorID != nil}
  /// Clears the value of `authorID`. Subsequent reads from it will return its default value.
  public mutating func clearAuthorID() {_storage._authorID = nil}

  public var indicator: Bgs_Protocol_TypingIndicator {
    get {return _storage._indicator ?? .typingStart}
    set {_uniqueStorage()._indicator = newValue}
  }
  /// Returns true if `indicator` has been explicitly set.
  public var hasIndicator: Bool {return _storage._indicator != nil}
  /// Clears the value of `indicator`. Subsequent reads from it will return its default value.
  public mutating func clearIndicator() {_storage._indicator = nil}

  public var epoch: UInt64 {
    get {return _storage._epoch ?? 0}
    set {_uniqueStorage()._epoch = newValue}
  }
  /// Returns true if `epoch` has been explicitly set.
  public var hasEpoch: Bool {return _storage._epoch != nil}
  /// Clears the value of `epoch`. Subsequent reads from it will return its default value.
  public mutating func clearEpoch() {_storage._epoch = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._authorID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._authorID)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._indicator)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._epoch)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._authorID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._indicator {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
      if let v = _storage._epoch {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.club.v1"

extension Bgs_Protocol_Club_V1_StreamPosition: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stream_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_StreamPosition) -> Bool {
    if self.streamID != other.streamID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamAccess: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "role"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_StreamAccess) -> Bool {
    if self.role != other.role {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_CreateStreamOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attribute"),
    2: .same(proto: "name"),
    3: .same(proto: "subject"),
    4: .same(proto: "access"),
    5: .standard(proto: "voice_level"),
  ]

  fileprivate class _StorageClass {
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _name: String? = nil
    var _subject: String? = nil
    var _access: Bgs_Protocol_Club_V1_StreamAccess? = nil
    var _voiceLevel: Bgs_Protocol_Club_V1_StreamVoiceLevel? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _attribute = source._attribute
      _name = source._name
      _subject = source._subject
      _access = source._access
      _voiceLevel = source._voiceLevel
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_CreateStreamOptions) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._attribute != other_storage._attribute {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._subject != other_storage._subject {return false}
        if _storage._access != other_storage._access {return false}
        if _storage._voiceLevel != other_storage._voiceLevel {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_Stream: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "club_id"),
    2: .same(proto: "id"),
    3: .same(proto: "attribute"),
    4: .same(proto: "name"),
    5: .same(proto: "subject"),
    6: .same(proto: "access"),
    7: .standard(proto: "voice_level"),
    8: .standard(proto: "creation_time"),
  ]

  fileprivate class _StorageClass {
    var _clubID: UInt64? = nil
    var _id: UInt64? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _name: String? = nil
    var _subject: String? = nil
    var _access: Bgs_Protocol_Club_V1_StreamAccess? = nil
    var _voiceLevel: Bgs_Protocol_Club_V1_StreamVoiceLevel? = nil
    var _creationTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _clubID = source._clubID
      _id = source._id
      _attribute = source._attribute
      _name = source._name
      _subject = source._subject
      _access = source._access
      _voiceLevel = source._voiceLevel
      _creationTime = source._creationTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_Stream) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._clubID != other_storage._clubID {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._attribute != other_storage._attribute {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._subject != other_storage._subject {return false}
        if _storage._access != other_storage._access {return false}
        if _storage._voiceLevel != other_storage._voiceLevel {return false}
        if _storage._creationTime != other_storage._creationTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MentionContent: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "all"),
    2: .same(proto: "here"),
    3: .standard(proto: "member_id"),
    4: .same(proto: "role"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_MentionContent) -> Bool {
    if self._all != other._all {return false}
    if self._here != other._here {return false}
    if self.memberID != other.memberID {return false}
    if self.role != other.role {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_CreateMessageOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "content"),
    3: .same(proto: "mention"),
  ]

  fileprivate class _StorageClass {
    var _content: String? = nil
    var _mention: Bgs_Protocol_Club_V1_MentionContent? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _content = source._content
      _mention = source._mention
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_CreateMessageOptions) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._content != other_storage._content {return false}
        if _storage._mention != other_storage._mention {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubStreamMessageContainer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_ClubStreamMessageContainer) -> Bool {
    if self.message != other.message {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ContentChain: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    5: .same(proto: "content"),
    6: .same(proto: "embed"),
    7: .same(proto: "mention"),
    8: .standard(proto: "edit_time"),
  ]

  fileprivate class _StorageClass {
    var _content: String? = nil
    var _embed: [Bgs_Protocol_EmbedInfo] = []
    var _mention: Bgs_Protocol_Club_V1_MentionContent? = nil
    var _editTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _content = source._content
      _embed = source._embed
      _mention = source._mention
      _editTime = source._editTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_ContentChain) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._content != other_storage._content {return false}
        if _storage._embed != other_storage._embed {return false}
        if _storage._mention != other_storage._mention {return false}
        if _storage._editTime != other_storage._editTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "id"),
    4: .same(proto: "author"),
    6: .standard(proto: "content_chain"),
    15: .same(proto: "destroyer"),
    16: .same(proto: "destroyed"),
    17: .standard(proto: "destroy_time"),
  ]

  fileprivate class _StorageClass {
    var _id: Bgs_Protocol_MessageId? = nil
    var _author: Bgs_Protocol_Club_V1_MemberDescription? = nil
    var _contentChain: [Bgs_Protocol_Club_V1_ContentChain] = []
    var _destroyer: Bgs_Protocol_Club_V1_MemberDescription? = nil
    var _destroyed: Bool? = nil
    var _destroyTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _author = source._author
      _contentChain = source._contentChain
      _destroyer = source._destroyer
      _destroyed = source._destroyed
      _destroyTime = source._destroyTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_StreamMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._author != other_storage._author {return false}
        if _storage._contentChain != other_storage._contentChain {return false}
        if _storage._destroyer != other_storage._destroyer {return false}
        if _storage._destroyed != other_storage._destroyed {return false}
        if _storage._destroyTime != other_storage._destroyTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamMention: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "club_id"),
    2: .standard(proto: "stream_id"),
    3: .standard(proto: "message_id"),
    4: .same(proto: "author"),
    5: .same(proto: "destroyed"),
    6: .standard(proto: "mention_id"),
    7: .standard(proto: "member_id"),
    8: .same(proto: "message"),
  ]

  fileprivate class _StorageClass {
    var _clubID: UInt64? = nil
    var _streamID: UInt64? = nil
    var _messageID: Bgs_Protocol_MessageId? = nil
    var _author: Bgs_Protocol_Club_V1_MemberDescription? = nil
    var _destroyed: Bool? = nil
    var _mentionID: Bgs_Protocol_TimeSeriesId? = nil
    var _memberID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _message: Bgs_Protocol_Club_V1_StreamMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _clubID = source._clubID
      _streamID = source._streamID
      _messageID = source._messageID
      _author = source._author
      _destroyed = source._destroyed
      _mentionID = source._mentionID
      _memberID = source._memberID
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_StreamMention) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._clubID != other_storage._clubID {return false}
        if _storage._streamID != other_storage._streamID {return false}
        if _storage._messageID != other_storage._messageID {return false}
        if _storage._author != other_storage._author {return false}
        if _storage._destroyed != other_storage._destroyed {return false}
        if _storage._mentionID != other_storage._mentionID {return false}
        if _storage._memberID != other_storage._memberID {return false}
        if _storage._message != other_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamView: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "club_id"),
    2: .standard(proto: "stream_id"),
    3: .same(proto: "marker"),
  ]

  fileprivate class _StorageClass {
    var _clubID: UInt64? = nil
    var _streamID: UInt64? = nil
    var _marker: Bgs_Protocol_ViewMarker? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _clubID = source._clubID
      _streamID = source._streamID
      _marker = source._marker
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_StreamView) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._clubID != other_storage._clubID {return false}
        if _storage._streamID != other_storage._streamID {return false}
        if _storage._marker != other_storage._marker {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamAdvanceViewTime: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stream_id"),
    2: .standard(proto: "view_time"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_StreamAdvanceViewTime) -> Bool {
    if self._streamID != other._streamID {return false}
    if self._viewTime != other._viewTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamEventTime: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stream_id"),
    2: .standard(proto: "event_time"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_StreamEventTime) -> Bool {
    if self._streamID != other._streamID {return false}
    if self._eventTime != other._eventTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamMentionView: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "club_id"),
    2: .standard(proto: "stream_id"),
    3: .same(proto: "marker"),
  ]

  fileprivate class _StorageClass {
    var _clubID: UInt64? = nil
    var _streamID: UInt64? = nil
    var _marker: Bgs_Protocol_ViewMarker? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _clubID = source._clubID
      _streamID = source._streamID
      _marker = source._marker
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_StreamMentionView) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._clubID != other_storage._clubID {return false}
        if _storage._streamID != other_storage._streamID {return false}
        if _storage._marker != other_storage._marker {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamStateOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attribute"),
    2: .same(proto: "name"),
    3: .same(proto: "subject"),
    4: .same(proto: "access"),
    5: .standard(proto: "voice_level"),
  ]

  fileprivate class _StorageClass {
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _name: String? = nil
    var _subject: String? = nil
    var _access: Bgs_Protocol_Club_V1_StreamAccess? = nil
    var _voiceLevel: Bgs_Protocol_Club_V1_StreamVoiceLevel? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _attribute = source._attribute
      _name = source._name
      _subject = source._subject
      _access = source._access
      _voiceLevel = source._voiceLevel
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_StreamStateOptions) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._attribute != other_storage._attribute {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._subject != other_storage._subject {return false}
        if _storage._access != other_storage._access {return false}
        if _storage._voiceLevel != other_storage._voiceLevel {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamStateAssignment: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stream_id"),
    2: .same(proto: "attribute"),
    3: .same(proto: "name"),
    4: .same(proto: "subject"),
    5: .same(proto: "access"),
    6: .standard(proto: "stream_subscription_removed"),
    7: .standard(proto: "voice_level"),
  ]

  fileprivate class _StorageClass {
    var _streamID: UInt64? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _name: String? = nil
    var _subject: String? = nil
    var _access: Bgs_Protocol_Club_V1_StreamAccess? = nil
    var _streamSubscriptionRemoved: Bool? = nil
    var _voiceLevel: Bgs_Protocol_Club_V1_StreamVoiceLevel? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _streamID = source._streamID
      _attribute = source._attribute
      _name = source._name
      _subject = source._subject
      _access = source._access
      _streamSubscriptionRemoved = source._streamSubscriptionRemoved
      _voiceLevel = source._voiceLevel
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_StreamStateAssignment) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._streamID != other_storage._streamID {return false}
        if _storage._attribute != other_storage._attribute {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._subject != other_storage._subject {return false}
        if _storage._access != other_storage._access {return false}
        if _storage._streamSubscriptionRemoved != other_storage._streamSubscriptionRemoved {return false}
        if _storage._voiceLevel != other_storage._voiceLevel {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamTypingIndicator: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "author_id"),
    2: .same(proto: "indicator"),
    3: .same(proto: "epoch"),
  ]

  fileprivate class _StorageClass {
    var _authorID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _indicator: Bgs_Protocol_TypingIndicator? = nil
    var _epoch: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _authorID = source._authorID
      _indicator = source._indicator
      _epoch = source._epoch
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Club_V1_StreamTypingIndicator) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._authorID != other_storage._authorID {return false}
        if _storage._indicator != other_storage._indicator {return false}
        if _storage._epoch != other_storage._epoch {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
