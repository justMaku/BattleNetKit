// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/api/client/v2/channel_types.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Channel_V2_ChannelId: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ChannelId"

  public var host: Bgs_Protocol_ProcessId {
    get {return _storage._host ?? Bgs_Protocol_ProcessId()}
    set {_uniqueStorage()._host = newValue}
  }
  /// Returns true if `host` has been explicitly set.
  public var hasHost: Bool {return _storage._host != nil}
  /// Clears the value of `host`. Subsequent reads from it will return its default value.
  public mutating func clearHost() {_storage._host = nil}

  public var id: UInt32 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_storage._id = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._host, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._host)
        case 3: try decoder.decodeSingularFixed32Field(value: &_storage._id)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._host {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._id {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_UniqueChannelType: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".UniqueChannelType"

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var channelType: String {
    get {return _channelType ?? String()}
    set {_channelType = newValue}
  }
  /// Returns true if `channelType` has been explicitly set.
  public var hasChannelType: Bool {return self._channelType != nil}
  /// Clears the value of `channelType`. Subsequent reads from it will return its default value.
  public mutating func clearChannelType() {self._channelType = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularFixed32Field(value: &self._program)
      case 3: try decoder.decodeSingularStringField(value: &self._channelType)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    if let v = self._channelType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _program: UInt32? = nil
  fileprivate var _channelType: String? = nil
}

public struct Bgs_Protocol_Channel_V2_RoleAssignment: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".RoleAssignment"

  public var memberID: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._memberID ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_storage._memberID = nil}

  public var role: [UInt32] {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 2: try decoder.decodeRepeatedUInt32Field(value: &_storage._role)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._role.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._role, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_AttributeAssignment: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AttributeAssignment"

  public var memberID: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._memberID ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_storage._memberID = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_CreateMemberOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CreateMemberOptions"

  public var memberID: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._memberID ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_storage._memberID = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_Member: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Member"

  public var id: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._id ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_storage._id = nil}

  public var battleTag: String {
    get {return _storage._battleTag ?? String()}
    set {_uniqueStorage()._battleTag = newValue}
  }
  /// Returns true if `battleTag` has been explicitly set.
  public var hasBattleTag: Bool {return _storage._battleTag != nil}
  /// Clears the value of `battleTag`. Subsequent reads from it will return its default value.
  public mutating func clearBattleTag() {_storage._battleTag = nil}

  public var voiceID: String {
    get {return _storage._voiceID ?? String()}
    set {_uniqueStorage()._voiceID = newValue}
  }
  /// Returns true if `voiceID` has been explicitly set.
  public var hasVoiceID: Bool {return _storage._voiceID != nil}
  /// Clears the value of `voiceID`. Subsequent reads from it will return its default value.
  public mutating func clearVoiceID() {_storage._voiceID = nil}

  public var role: [UInt32] {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._battleTag)
        case 3: try decoder.decodeSingularStringField(value: &_storage._voiceID)
        case 4: try decoder.decodeRepeatedUInt32Field(value: &_storage._role)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._battleTag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._voiceID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if !_storage._role.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._role, fieldNumber: 4)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_CreateChannelOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CreateChannelOptions"

  public var type: Bgs_Protocol_Channel_V2_UniqueChannelType {
    get {return _storage._type ?? Bgs_Protocol_Channel_V2_UniqueChannelType()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_storage._type = nil}

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  public var privacyLevel: Bgs_Protocol_Channel_V2_PrivacyLevel {
    get {return _storage._privacyLevel ?? .open}
    set {_uniqueStorage()._privacyLevel = newValue}
  }
  /// Returns true if `privacyLevel` has been explicitly set.
  public var hasPrivacyLevel: Bool {return _storage._privacyLevel != nil}
  /// Clears the value of `privacyLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacyLevel() {_storage._privacyLevel = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var member: Bgs_Protocol_Channel_V2_CreateMemberOptions {
    get {return _storage._member ?? Bgs_Protocol_Channel_V2_CreateMemberOptions()}
    set {_uniqueStorage()._member = newValue}
  }
  /// Returns true if `member` has been explicitly set.
  public var hasMember: Bool {return _storage._member != nil}
  /// Clears the value of `member`. Subsequent reads from it will return its default value.
  public mutating func clearMember() {_storage._member = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._member, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._privacyLevel)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._member)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._privacyLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 4)
      }
      if let v = _storage._member {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_PublicChannelType: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".PublicChannelType"

  public var type: Bgs_Protocol_Channel_V2_UniqueChannelType {
    get {return _storage._type ?? Bgs_Protocol_Channel_V2_UniqueChannelType()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_storage._type = nil}

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  public var identity: String {
    get {return _storage._identity ?? String()}
    set {_uniqueStorage()._identity = newValue}
  }
  /// Returns true if `identity` has been explicitly set.
  public var hasIdentity: Bool {return _storage._identity != nil}
  /// Clears the value of `identity`. Subsequent reads from it will return its default value.
  public mutating func clearIdentity() {_storage._identity = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularStringField(value: &_storage._identity)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._identity {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_GetPublicChannelTypesOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GetPublicChannelTypesOptions"

  public var type: Bgs_Protocol_Channel_V2_UniqueChannelType {
    get {return _storage._type ?? Bgs_Protocol_Channel_V2_UniqueChannelType()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_storage._type = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._type)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_FindChannelOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FindChannelOptions"

  public var type: Bgs_Protocol_Channel_V2_UniqueChannelType {
    get {return _storage._type ?? Bgs_Protocol_Channel_V2_UniqueChannelType()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_storage._type = nil}

  public var identity: String {
    get {return _storage._identity ?? String()}
    set {_uniqueStorage()._identity = newValue}
  }
  /// Returns true if `identity` has been explicitly set.
  public var hasIdentity: Bool {return _storage._identity != nil}
  /// Clears the value of `identity`. Subsequent reads from it will return its default value.
  public mutating func clearIdentity() {_storage._identity = nil}

  public var locale: UInt32 {
    get {return _storage._locale ?? 0}
    set {_uniqueStorage()._locale = newValue}
  }
  /// Returns true if `locale` has been explicitly set.
  public var hasLocale: Bool {return _storage._locale != nil}
  /// Clears the value of `locale`. Subsequent reads from it will return its default value.
  public mutating func clearLocale() {_storage._locale = nil}

  public var searchAttribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._searchAttribute}
    set {_uniqueStorage()._searchAttribute = newValue}
  }

  public var reservation: [Bgs_Protocol_Account_V1_AccountId] {
    get {return _storage._reservation}
    set {_uniqueStorage()._reservation = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._reservation) {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 2: try decoder.decodeSingularStringField(value: &_storage._identity)
        case 3: try decoder.decodeSingularFixed32Field(value: &_storage._locale)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._searchAttribute)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._reservation)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._identity {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._locale {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
      }
      if !_storage._searchAttribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._searchAttribute, fieldNumber: 4)
      }
      if !_storage._reservation.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._reservation, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_SendMessageOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SendMessageOptions"

  public var content: String {
    get {return _content ?? String()}
    set {_content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return self._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {self._content = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4: try decoder.decodeSingularStringField(value: &self._content)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.attribute)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._content {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if !self.attribute.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attribute, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _content: String? = nil
}

public struct Bgs_Protocol_Channel_V2_ChannelMessage: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ChannelMessage"

  public var authorID: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._authorID ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._authorID = newValue}
  }
  /// Returns true if `authorID` has been explicitly set.
  public var hasAuthorID: Bool {return _storage._authorID != nil}
  /// Clears the value of `authorID`. Subsequent reads from it will return its default value.
  public mutating func clearAuthorID() {_storage._authorID = nil}

  public var content: String {
    get {return _storage._content ?? String()}
    set {_uniqueStorage()._content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return _storage._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {_storage._content = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_storage._creationTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._authorID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._authorID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._content)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 5: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._authorID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._content {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 4)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_PublicChannelState: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".PublicChannelState"

  public var identity: String {
    get {return _identity ?? String()}
    set {_identity = newValue}
  }
  /// Returns true if `identity` has been explicitly set.
  public var hasIdentity: Bool {return self._identity != nil}
  /// Clears the value of `identity`. Subsequent reads from it will return its default value.
  public mutating func clearIdentity() {self._identity = nil}

  public var locale: UInt32 {
    get {return _locale ?? 0}
    set {_locale = newValue}
  }
  /// Returns true if `locale` has been explicitly set.
  public var hasLocale: Bool {return self._locale != nil}
  /// Clears the value of `locale`. Subsequent reads from it will return its default value.
  public mutating func clearLocale() {self._locale = nil}

  public var searchAttribute: [Bgs_Protocol_V2_Attribute] = []

  public var reservation: [Bgs_Protocol_Account_V1_AccountId] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.reservation) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._identity)
      case 2: try decoder.decodeSingularFixed32Field(value: &self._locale)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.searchAttribute)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.reservation)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._identity {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._locale {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    if !self.searchAttribute.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.searchAttribute, fieldNumber: 3)
    }
    if !self.reservation.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reservation, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _identity: String? = nil
  fileprivate var _locale: UInt32? = nil
}

public struct Bgs_Protocol_Channel_V2_Channel: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Channel"

  public var id: Bgs_Protocol_Channel_V2_ChannelId {
    get {return _storage._id ?? Bgs_Protocol_Channel_V2_ChannelId()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_storage._id = nil}

  public var type: Bgs_Protocol_Channel_V2_UniqueChannelType {
    get {return _storage._type ?? Bgs_Protocol_Channel_V2_UniqueChannelType()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_storage._type = nil}

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  public var privacyLevel: Bgs_Protocol_Channel_V2_PrivacyLevel {
    get {return _storage._privacyLevel ?? .open}
    set {_uniqueStorage()._privacyLevel = newValue}
  }
  /// Returns true if `privacyLevel` has been explicitly set.
  public var hasPrivacyLevel: Bool {return _storage._privacyLevel != nil}
  /// Clears the value of `privacyLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacyLevel() {_storage._privacyLevel = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var member: [Bgs_Protocol_Channel_V2_Member] {
    get {return _storage._member}
    set {_uniqueStorage()._member = newValue}
  }

  public var invitation: [Bgs_Protocol_Channel_V2_ChannelInvitation] {
    get {return _storage._invitation}
    set {_uniqueStorage()._invitation = newValue}
  }

  public var roleSet: Bgs_Protocol_Channel_ChannelRoleSet {
    get {return _storage._roleSet ?? Bgs_Protocol_Channel_ChannelRoleSet()}
    set {_uniqueStorage()._roleSet = newValue}
  }
  /// Returns true if `roleSet` has been explicitly set.
  public var hasRoleSet: Bool {return _storage._roleSet != nil}
  /// Clears the value of `roleSet`. Subsequent reads from it will return its default value.
  public mutating func clearRoleSet() {_storage._roleSet = nil}

  public var stateType: OneOf_StateType? {
    get {return _storage._stateType}
    set {_uniqueStorage()._stateType = newValue}
  }

  public var publicChannelState: Bgs_Protocol_Channel_V2_PublicChannelState {
    get {
      if case .publicChannelState(let v)? = _storage._stateType {return v}
      return Bgs_Protocol_Channel_V2_PublicChannelState()
    }
    set {_uniqueStorage()._stateType = .publicChannelState(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_StateType: Equatable {
    case publicChannelState(Bgs_Protocol_Channel_V2_PublicChannelState)

    public static func ==(lhs: Bgs_Protocol_Channel_V2_Channel.OneOf_StateType, rhs: Bgs_Protocol_Channel_V2_Channel.OneOf_StateType) -> Bool {
      switch (lhs, rhs) {
      case (.publicChannelState(let l), .publicChannelState(let r)): return l == r
      }
    }
  }

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._member) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._invitation) {return false}
      if case .publicChannelState(let v)? = _storage._stateType, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._privacyLevel)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._member)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._invitation)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._roleSet)
        case 110:
          var v: Bgs_Protocol_Channel_V2_PublicChannelState?
          if let current = _storage._stateType {
            try decoder.handleConflictingOneOf()
            if case .publicChannelState(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._stateType = .publicChannelState(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._privacyLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 5)
      }
      if !_storage._member.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._member, fieldNumber: 6)
      }
      if !_storage._invitation.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._invitation, fieldNumber: 7)
      }
      if let v = _storage._roleSet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if case .publicChannelState(let v)? = _storage._stateType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 110)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_ChannelDescription: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ChannelDescription"

  public var id: Bgs_Protocol_Channel_V2_ChannelId {
    get {return _storage._id ?? Bgs_Protocol_Channel_V2_ChannelId()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_storage._id = nil}

  public var type: Bgs_Protocol_Channel_V2_UniqueChannelType {
    get {return _storage._type ?? Bgs_Protocol_Channel_V2_UniqueChannelType()}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {_storage._type = nil}

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  public var privacyLevel: Bgs_Protocol_Channel_V2_PrivacyLevel {
    get {return _storage._privacyLevel ?? .open}
    set {_uniqueStorage()._privacyLevel = newValue}
  }
  /// Returns true if `privacyLevel` has been explicitly set.
  public var hasPrivacyLevel: Bool {return _storage._privacyLevel != nil}
  /// Clears the value of `privacyLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacyLevel() {_storage._privacyLevel = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var memberCount: UInt32 {
    get {return _storage._memberCount ?? 0}
    set {_uniqueStorage()._memberCount = newValue}
  }
  /// Returns true if `memberCount` has been explicitly set.
  public var hasMemberCount: Bool {return _storage._memberCount != nil}
  /// Clears the value of `memberCount`. Subsequent reads from it will return its default value.
  public mutating func clearMemberCount() {_storage._memberCount = nil}

  public var stateType: OneOf_StateType? {
    get {return _storage._stateType}
    set {_uniqueStorage()._stateType = newValue}
  }

  public var publicChannelState: Bgs_Protocol_Channel_V2_PublicChannelState {
    get {
      if case .publicChannelState(let v)? = _storage._stateType {return v}
      return Bgs_Protocol_Channel_V2_PublicChannelState()
    }
    set {_uniqueStorage()._stateType = .publicChannelState(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_StateType: Equatable {
    case publicChannelState(Bgs_Protocol_Channel_V2_PublicChannelState)

    public static func ==(lhs: Bgs_Protocol_Channel_V2_ChannelDescription.OneOf_StateType, rhs: Bgs_Protocol_Channel_V2_ChannelDescription.OneOf_StateType) -> Bool {
      switch (lhs, rhs) {
      case (.publicChannelState(let l), .publicChannelState(let r)): return l == r
      }
    }
  }

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id, !v.isInitialized {return false}
      if case .publicChannelState(let v)? = _storage._stateType, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._type)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._privacyLevel)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 6: try decoder.decodeSingularUInt32Field(value: &_storage._memberCount)
        case 110:
          var v: Bgs_Protocol_Channel_V2_PublicChannelState?
          if let current = _storage._stateType {
            try decoder.handleConflictingOneOf()
            if case .publicChannelState(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._stateType = .publicChannelState(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._type {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._privacyLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 5)
      }
      if let v = _storage._memberCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
      }
      if case .publicChannelState(let v)? = _storage._stateType {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 110)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_ChannelMembershipState: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ChannelMembershipState"

  public var description_p: [Bgs_Protocol_Channel_V2_ChannelDescription] = []

  public var invitation: [Bgs_Protocol_Channel_V2_ChannelInvitation] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.description_p) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.invitation) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.description_p)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.invitation)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.description_p.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.description_p, fieldNumber: 1)
    }
    if !self.invitation.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.invitation, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Bgs_Protocol_Channel_V2_ChannelSlot: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ChannelSlot"

  public var reserved: Bool {
    get {return _reserved ?? false}
    set {_reserved = newValue}
  }
  /// Returns true if `reserved` has been explicitly set.
  public var hasReserved: Bool {return self._reserved != nil}
  /// Clears the value of `reserved`. Subsequent reads from it will return its default value.
  public mutating func clearReserved() {self._reserved = nil}

  public var rejoin: Bool {
    get {return _rejoin ?? false}
    set {_rejoin = newValue}
  }
  /// Returns true if `rejoin` has been explicitly set.
  public var hasRejoin: Bool {return self._rejoin != nil}
  /// Clears the value of `rejoin`. Subsequent reads from it will return its default value.
  public mutating func clearRejoin() {self._rejoin = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._reserved)
      case 2: try decoder.decodeSingularBoolField(value: &self._rejoin)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._reserved {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._rejoin {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _reserved: Bool? = nil
  fileprivate var _rejoin: Bool? = nil
}

public struct Bgs_Protocol_Channel_V2_SendInvitationOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SendInvitationOptions"

  public var channelID: Bgs_Protocol_Channel_V2_ChannelId {
    get {return _storage._channelID ?? Bgs_Protocol_Channel_V2_ChannelId()}
    set {_uniqueStorage()._channelID = newValue}
  }
  /// Returns true if `channelID` has been explicitly set.
  public var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
  public mutating func clearChannelID() {_storage._channelID = nil}

  public var targetID: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._targetID ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_storage._targetID = nil}

  public var slot: Bgs_Protocol_Channel_V2_ChannelSlot {
    get {return _storage._slot ?? Bgs_Protocol_Channel_V2_ChannelSlot()}
    set {_uniqueStorage()._slot = newValue}
  }
  /// Returns true if `slot` has been explicitly set.
  public var hasSlot: Bool {return _storage._slot != nil}
  /// Clears the value of `slot`. Subsequent reads from it will return its default value.
  public mutating func clearSlot() {_storage._slot = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._channelID, !v.isInitialized {return false}
      if let v = _storage._targetID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._channelID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._slot)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._channelID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._slot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_MemberDescription: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".MemberDescription"

  public var id: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._id ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_storage._id = nil}

  public var battleTag: String {
    get {return _storage._battleTag ?? String()}
    set {_uniqueStorage()._battleTag = newValue}
  }
  /// Returns true if `battleTag` has been explicitly set.
  public var hasBattleTag: Bool {return _storage._battleTag != nil}
  /// Clears the value of `battleTag`. Subsequent reads from it will return its default value.
  public mutating func clearBattleTag() {_storage._battleTag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._battleTag)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._battleTag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_ChannelInvitation: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ChannelInvitation"

  public var id: UInt64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_storage._id = nil}

  public var inviter: Bgs_Protocol_Channel_V2_MemberDescription {
    get {return _storage._inviter ?? Bgs_Protocol_Channel_V2_MemberDescription()}
    set {_uniqueStorage()._inviter = newValue}
  }
  /// Returns true if `inviter` has been explicitly set.
  public var hasInviter: Bool {return _storage._inviter != nil}
  /// Clears the value of `inviter`. Subsequent reads from it will return its default value.
  public mutating func clearInviter() {_storage._inviter = nil}

  public var invitee: Bgs_Protocol_Channel_V2_MemberDescription {
    get {return _storage._invitee ?? Bgs_Protocol_Channel_V2_MemberDescription()}
    set {_uniqueStorage()._invitee = newValue}
  }
  /// Returns true if `invitee` has been explicitly set.
  public var hasInvitee: Bool {return _storage._invitee != nil}
  /// Clears the value of `invitee`. Subsequent reads from it will return its default value.
  public mutating func clearInvitee() {_storage._invitee = nil}

  public var channel: Bgs_Protocol_Channel_V2_ChannelDescription {
    get {return _storage._channel ?? Bgs_Protocol_Channel_V2_ChannelDescription()}
    set {_uniqueStorage()._channel = newValue}
  }
  /// Returns true if `channel` has been explicitly set.
  public var hasChannel: Bool {return _storage._channel != nil}
  /// Clears the value of `channel`. Subsequent reads from it will return its default value.
  public mutating func clearChannel() {_storage._channel = nil}

  public var slot: Bgs_Protocol_Channel_V2_ChannelSlot {
    get {return _storage._slot ?? Bgs_Protocol_Channel_V2_ChannelSlot()}
    set {_uniqueStorage()._slot = newValue}
  }
  /// Returns true if `slot` has been explicitly set.
  public var hasSlot: Bool {return _storage._slot != nil}
  /// Clears the value of `slot`. Subsequent reads from it will return its default value.
  public mutating func clearSlot() {_storage._slot = nil}

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_storage._creationTime = nil}

  public var expirationTime: UInt64 {
    get {return _storage._expirationTime ?? 0}
    set {_uniqueStorage()._expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  public var hasExpirationTime: Bool {return _storage._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationTime() {_storage._expirationTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._inviter, !v.isInitialized {return false}
      if let v = _storage._invitee, !v.isInitialized {return false}
      if let v = _storage._channel, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFixed64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._inviter)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._invitee)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._channel)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._slot)
        case 7: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        case 8: try decoder.decodeSingularUInt64Field(value: &_storage._expirationTime)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._inviter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._invitee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._channel {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._slot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._expirationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_SendSuggestionOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SendSuggestionOptions"

  public var channelID: Bgs_Protocol_Channel_V2_ChannelId {
    get {return _storage._channelID ?? Bgs_Protocol_Channel_V2_ChannelId()}
    set {_uniqueStorage()._channelID = newValue}
  }
  /// Returns true if `channelID` has been explicitly set.
  public var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
  public mutating func clearChannelID() {_storage._channelID = nil}

  public var targetID: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._targetID ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_storage._targetID = nil}

  public var approvalID: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._approvalID ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._approvalID = newValue}
  }
  /// Returns true if `approvalID` has been explicitly set.
  public var hasApprovalID: Bool {return _storage._approvalID != nil}
  /// Clears the value of `approvalID`. Subsequent reads from it will return its default value.
  public mutating func clearApprovalID() {_storage._approvalID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._channelID, !v.isInitialized {return false}
      if let v = _storage._targetID, !v.isInitialized {return false}
      if let v = _storage._approvalID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._channelID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._approvalID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._channelID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._approvalID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_V2_Suggestion: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Suggestion"

  public var channelID: Bgs_Protocol_Channel_V2_ChannelId {
    get {return _storage._channelID ?? Bgs_Protocol_Channel_V2_ChannelId()}
    set {_uniqueStorage()._channelID = newValue}
  }
  /// Returns true if `channelID` has been explicitly set.
  public var hasChannelID: Bool {return _storage._channelID != nil}
  /// Clears the value of `channelID`. Subsequent reads from it will return its default value.
  public mutating func clearChannelID() {_storage._channelID = nil}

  public var suggester: Bgs_Protocol_Channel_V2_MemberDescription {
    get {return _storage._suggester ?? Bgs_Protocol_Channel_V2_MemberDescription()}
    set {_uniqueStorage()._suggester = newValue}
  }
  /// Returns true if `suggester` has been explicitly set.
  public var hasSuggester: Bool {return _storage._suggester != nil}
  /// Clears the value of `suggester`. Subsequent reads from it will return its default value.
  public mutating func clearSuggester() {_storage._suggester = nil}

  public var suggestee: Bgs_Protocol_Channel_V2_MemberDescription {
    get {return _storage._suggestee ?? Bgs_Protocol_Channel_V2_MemberDescription()}
    set {_uniqueStorage()._suggestee = newValue}
  }
  /// Returns true if `suggestee` has been explicitly set.
  public var hasSuggestee: Bool {return _storage._suggestee != nil}
  /// Clears the value of `suggestee`. Subsequent reads from it will return its default value.
  public mutating func clearSuggestee() {_storage._suggestee = nil}

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_storage._creationTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._channelID, !v.isInitialized {return false}
      if let v = _storage._suggester, !v.isInitialized {return false}
      if let v = _storage._suggestee, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._channelID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._suggester)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._suggestee)
        case 7: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._channelID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._suggester {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._suggestee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.channel.v2"

extension Bgs_Protocol_Channel_V2_ChannelId: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "host"),
    3: .same(proto: "id"),
  ]

  fileprivate class _StorageClass {
    var _host: Bgs_Protocol_ProcessId? = nil
    var _id: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _host = source._host
      _id = source._id
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_ChannelId) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._host != other_storage._host {return false}
        if _storage._id != other_storage._id {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_UniqueChannelType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "program"),
    3: .standard(proto: "channel_type"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_UniqueChannelType) -> Bool {
    if self._program != other._program {return false}
    if self._channelType != other._channelType {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_RoleAssignment: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "member_id"),
    2: .same(proto: "role"),
  ]

  fileprivate class _StorageClass {
    var _memberID: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _role: [UInt32] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _memberID = source._memberID
      _role = source._role
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_RoleAssignment) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._memberID != other_storage._memberID {return false}
        if _storage._role != other_storage._role {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_AttributeAssignment: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "member_id"),
    2: .same(proto: "attribute"),
  ]

  fileprivate class _StorageClass {
    var _memberID: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _memberID = source._memberID
      _attribute = source._attribute
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_AttributeAssignment) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._memberID != other_storage._memberID {return false}
        if _storage._attribute != other_storage._attribute {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_CreateMemberOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "member_id"),
    3: .same(proto: "attribute"),
  ]

  fileprivate class _StorageClass {
    var _memberID: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _memberID = source._memberID
      _attribute = source._attribute
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_CreateMemberOptions) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._memberID != other_storage._memberID {return false}
        if _storage._attribute != other_storage._attribute {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_Member: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "battle_tag"),
    3: .standard(proto: "voice_id"),
    4: .same(proto: "role"),
    5: .same(proto: "attribute"),
  ]

  fileprivate class _StorageClass {
    var _id: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _battleTag: String? = nil
    var _voiceID: String? = nil
    var _role: [UInt32] = []
    var _attribute: [Bgs_Protocol_V2_Attribute] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _battleTag = source._battleTag
      _voiceID = source._voiceID
      _role = source._role
      _attribute = source._attribute
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_Member) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._battleTag != other_storage._battleTag {return false}
        if _storage._voiceID != other_storage._voiceID {return false}
        if _storage._role != other_storage._role {return false}
        if _storage._attribute != other_storage._attribute {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_CreateChannelOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "name"),
    3: .standard(proto: "privacy_level"),
    4: .same(proto: "attribute"),
    5: .same(proto: "member"),
  ]

  fileprivate class _StorageClass {
    var _type: Bgs_Protocol_Channel_V2_UniqueChannelType? = nil
    var _name: String? = nil
    var _privacyLevel: Bgs_Protocol_Channel_V2_PrivacyLevel? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _member: Bgs_Protocol_Channel_V2_CreateMemberOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _name = source._name
      _privacyLevel = source._privacyLevel
      _attribute = source._attribute
      _member = source._member
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_CreateChannelOptions) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._type != other_storage._type {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._privacyLevel != other_storage._privacyLevel {return false}
        if _storage._attribute != other_storage._attribute {return false}
        if _storage._member != other_storage._member {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_PublicChannelType: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "name"),
    3: .same(proto: "identity"),
  ]

  fileprivate class _StorageClass {
    var _type: Bgs_Protocol_Channel_V2_UniqueChannelType? = nil
    var _name: String? = nil
    var _identity: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _name = source._name
      _identity = source._identity
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_PublicChannelType) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._type != other_storage._type {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._identity != other_storage._identity {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_GetPublicChannelTypesOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  fileprivate class _StorageClass {
    var _type: Bgs_Protocol_Channel_V2_UniqueChannelType? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_GetPublicChannelTypesOptions) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._type != other_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_FindChannelOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "identity"),
    3: .same(proto: "locale"),
    4: .standard(proto: "search_attribute"),
    6: .same(proto: "reservation"),
  ]

  fileprivate class _StorageClass {
    var _type: Bgs_Protocol_Channel_V2_UniqueChannelType? = nil
    var _identity: String? = nil
    var _locale: UInt32? = nil
    var _searchAttribute: [Bgs_Protocol_V2_Attribute] = []
    var _reservation: [Bgs_Protocol_Account_V1_AccountId] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _identity = source._identity
      _locale = source._locale
      _searchAttribute = source._searchAttribute
      _reservation = source._reservation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_FindChannelOptions) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._type != other_storage._type {return false}
        if _storage._identity != other_storage._identity {return false}
        if _storage._locale != other_storage._locale {return false}
        if _storage._searchAttribute != other_storage._searchAttribute {return false}
        if _storage._reservation != other_storage._reservation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_SendMessageOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "content"),
    5: .same(proto: "attribute"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_SendMessageOptions) -> Bool {
    if self._content != other._content {return false}
    if self.attribute != other.attribute {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_ChannelMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "author_id"),
    3: .same(proto: "content"),
    4: .same(proto: "attribute"),
    5: .standard(proto: "creation_time"),
  ]

  fileprivate class _StorageClass {
    var _authorID: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _content: String? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _creationTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _authorID = source._authorID
      _content = source._content
      _attribute = source._attribute
      _creationTime = source._creationTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_ChannelMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._authorID != other_storage._authorID {return false}
        if _storage._content != other_storage._content {return false}
        if _storage._attribute != other_storage._attribute {return false}
        if _storage._creationTime != other_storage._creationTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_PublicChannelState: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
    2: .same(proto: "locale"),
    3: .standard(proto: "search_attribute"),
    6: .same(proto: "reservation"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_PublicChannelState) -> Bool {
    if self._identity != other._identity {return false}
    if self._locale != other._locale {return false}
    if self.searchAttribute != other.searchAttribute {return false}
    if self.reservation != other.reservation {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_Channel: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "name"),
    4: .standard(proto: "privacy_level"),
    5: .same(proto: "attribute"),
    6: .same(proto: "member"),
    7: .same(proto: "invitation"),
    8: .standard(proto: "role_set"),
    110: .standard(proto: "public_channel_state"),
  ]

  fileprivate class _StorageClass {
    var _id: Bgs_Protocol_Channel_V2_ChannelId? = nil
    var _type: Bgs_Protocol_Channel_V2_UniqueChannelType? = nil
    var _name: String? = nil
    var _privacyLevel: Bgs_Protocol_Channel_V2_PrivacyLevel? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _member: [Bgs_Protocol_Channel_V2_Member] = []
    var _invitation: [Bgs_Protocol_Channel_V2_ChannelInvitation] = []
    var _roleSet: Bgs_Protocol_Channel_ChannelRoleSet? = nil
    var _stateType: Bgs_Protocol_Channel_V2_Channel.OneOf_StateType?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _type = source._type
      _name = source._name
      _privacyLevel = source._privacyLevel
      _attribute = source._attribute
      _member = source._member
      _invitation = source._invitation
      _roleSet = source._roleSet
      _stateType = source._stateType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_Channel) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._privacyLevel != other_storage._privacyLevel {return false}
        if _storage._attribute != other_storage._attribute {return false}
        if _storage._member != other_storage._member {return false}
        if _storage._invitation != other_storage._invitation {return false}
        if _storage._roleSet != other_storage._roleSet {return false}
        if _storage._stateType != other_storage._stateType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_ChannelDescription: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "type"),
    3: .same(proto: "name"),
    4: .standard(proto: "privacy_level"),
    5: .same(proto: "attribute"),
    6: .standard(proto: "member_count"),
    110: .standard(proto: "public_channel_state"),
  ]

  fileprivate class _StorageClass {
    var _id: Bgs_Protocol_Channel_V2_ChannelId? = nil
    var _type: Bgs_Protocol_Channel_V2_UniqueChannelType? = nil
    var _name: String? = nil
    var _privacyLevel: Bgs_Protocol_Channel_V2_PrivacyLevel? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _memberCount: UInt32? = nil
    var _stateType: Bgs_Protocol_Channel_V2_ChannelDescription.OneOf_StateType?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _type = source._type
      _name = source._name
      _privacyLevel = source._privacyLevel
      _attribute = source._attribute
      _memberCount = source._memberCount
      _stateType = source._stateType
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_ChannelDescription) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._privacyLevel != other_storage._privacyLevel {return false}
        if _storage._attribute != other_storage._attribute {return false}
        if _storage._memberCount != other_storage._memberCount {return false}
        if _storage._stateType != other_storage._stateType {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_ChannelMembershipState: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "invitation"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_ChannelMembershipState) -> Bool {
    if self.description_p != other.description_p {return false}
    if self.invitation != other.invitation {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_ChannelSlot: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reserved"),
    2: .same(proto: "rejoin"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_ChannelSlot) -> Bool {
    if self._reserved != other._reserved {return false}
    if self._rejoin != other._rejoin {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_SendInvitationOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "channel_id"),
    2: .standard(proto: "target_id"),
    3: .same(proto: "slot"),
  ]

  fileprivate class _StorageClass {
    var _channelID: Bgs_Protocol_Channel_V2_ChannelId? = nil
    var _targetID: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _slot: Bgs_Protocol_Channel_V2_ChannelSlot? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _channelID = source._channelID
      _targetID = source._targetID
      _slot = source._slot
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_SendInvitationOptions) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._channelID != other_storage._channelID {return false}
        if _storage._targetID != other_storage._targetID {return false}
        if _storage._slot != other_storage._slot {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_MemberDescription: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "battle_tag"),
  ]

  fileprivate class _StorageClass {
    var _id: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _battleTag: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _battleTag = source._battleTag
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_MemberDescription) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._battleTag != other_storage._battleTag {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_ChannelInvitation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "inviter"),
    3: .same(proto: "invitee"),
    4: .same(proto: "channel"),
    5: .same(proto: "slot"),
    7: .standard(proto: "creation_time"),
    8: .standard(proto: "expiration_time"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64? = nil
    var _inviter: Bgs_Protocol_Channel_V2_MemberDescription? = nil
    var _invitee: Bgs_Protocol_Channel_V2_MemberDescription? = nil
    var _channel: Bgs_Protocol_Channel_V2_ChannelDescription? = nil
    var _slot: Bgs_Protocol_Channel_V2_ChannelSlot? = nil
    var _creationTime: UInt64? = nil
    var _expirationTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _inviter = source._inviter
      _invitee = source._invitee
      _channel = source._channel
      _slot = source._slot
      _creationTime = source._creationTime
      _expirationTime = source._expirationTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_ChannelInvitation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._inviter != other_storage._inviter {return false}
        if _storage._invitee != other_storage._invitee {return false}
        if _storage._channel != other_storage._channel {return false}
        if _storage._slot != other_storage._slot {return false}
        if _storage._creationTime != other_storage._creationTime {return false}
        if _storage._expirationTime != other_storage._expirationTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_SendSuggestionOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "channel_id"),
    2: .standard(proto: "target_id"),
    3: .standard(proto: "approval_id"),
  ]

  fileprivate class _StorageClass {
    var _channelID: Bgs_Protocol_Channel_V2_ChannelId? = nil
    var _targetID: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _approvalID: Bgs_Protocol_Account_V1_GameAccountHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _channelID = source._channelID
      _targetID = source._targetID
      _approvalID = source._approvalID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_SendSuggestionOptions) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._channelID != other_storage._channelID {return false}
        if _storage._targetID != other_storage._targetID {return false}
        if _storage._approvalID != other_storage._approvalID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_V2_Suggestion: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "channel_id"),
    3: .same(proto: "suggester"),
    4: .same(proto: "suggestee"),
    7: .standard(proto: "creation_time"),
  ]

  fileprivate class _StorageClass {
    var _channelID: Bgs_Protocol_Channel_V2_ChannelId? = nil
    var _suggester: Bgs_Protocol_Channel_V2_MemberDescription? = nil
    var _suggestee: Bgs_Protocol_Channel_V2_MemberDescription? = nil
    var _creationTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _channelID = source._channelID
      _suggester = source._suggester
      _suggestee = source._suggestee
      _creationTime = source._creationTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Channel_V2_Suggestion) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._channelID != other_storage._channelID {return false}
        if _storage._suggester != other_storage._suggester {return false}
        if _storage._suggestee != other_storage._suggestee {return false}
        if _storage._creationTime != other_storage._creationTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
