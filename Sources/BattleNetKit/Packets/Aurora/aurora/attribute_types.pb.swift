// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/attribute_types.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Variant: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Variant"

  public var boolValue: Bool {
    get {return _storage._boolValue ?? false}
    set {_uniqueStorage()._boolValue = newValue}
  }
  /// Returns true if `boolValue` has been explicitly set.
  public var hasBoolValue: Bool {return _storage._boolValue != nil}
  /// Clears the value of `boolValue`. Subsequent reads from it will return its default value.
  public mutating func clearBoolValue() {_storage._boolValue = nil}

  public var intValue: Int64 {
    get {return _storage._intValue ?? 0}
    set {_uniqueStorage()._intValue = newValue}
  }
  /// Returns true if `intValue` has been explicitly set.
  public var hasIntValue: Bool {return _storage._intValue != nil}
  /// Clears the value of `intValue`. Subsequent reads from it will return its default value.
  public mutating func clearIntValue() {_storage._intValue = nil}

  public var floatValue: Double {
    get {return _storage._floatValue ?? 0}
    set {_uniqueStorage()._floatValue = newValue}
  }
  /// Returns true if `floatValue` has been explicitly set.
  public var hasFloatValue: Bool {return _storage._floatValue != nil}
  /// Clears the value of `floatValue`. Subsequent reads from it will return its default value.
  public mutating func clearFloatValue() {_storage._floatValue = nil}

  public var stringValue: String {
    get {return _storage._stringValue ?? String()}
    set {_uniqueStorage()._stringValue = newValue}
  }
  /// Returns true if `stringValue` has been explicitly set.
  public var hasStringValue: Bool {return _storage._stringValue != nil}
  /// Clears the value of `stringValue`. Subsequent reads from it will return its default value.
  public mutating func clearStringValue() {_storage._stringValue = nil}

  public var blobValue: Data {
    get {return _storage._blobValue ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._blobValue = newValue}
  }
  /// Returns true if `blobValue` has been explicitly set.
  public var hasBlobValue: Bool {return _storage._blobValue != nil}
  /// Clears the value of `blobValue`. Subsequent reads from it will return its default value.
  public mutating func clearBlobValue() {_storage._blobValue = nil}

  public var messageValue: Data {
    get {return _storage._messageValue ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._messageValue = newValue}
  }
  /// Returns true if `messageValue` has been explicitly set.
  public var hasMessageValue: Bool {return _storage._messageValue != nil}
  /// Clears the value of `messageValue`. Subsequent reads from it will return its default value.
  public mutating func clearMessageValue() {_storage._messageValue = nil}

  public var fourccValue: String {
    get {return _storage._fourccValue ?? String()}
    set {_uniqueStorage()._fourccValue = newValue}
  }
  /// Returns true if `fourccValue` has been explicitly set.
  public var hasFourccValue: Bool {return _storage._fourccValue != nil}
  /// Clears the value of `fourccValue`. Subsequent reads from it will return its default value.
  public mutating func clearFourccValue() {_storage._fourccValue = nil}

  public var uintValue: UInt64 {
    get {return _storage._uintValue ?? 0}
    set {_uniqueStorage()._uintValue = newValue}
  }
  /// Returns true if `uintValue` has been explicitly set.
  public var hasUintValue: Bool {return _storage._uintValue != nil}
  /// Clears the value of `uintValue`. Subsequent reads from it will return its default value.
  public mutating func clearUintValue() {_storage._uintValue = nil}

  public var entityIDValue: Bgs_Protocol_EntityId {
    get {return _storage._entityIDValue ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._entityIDValue = newValue}
  }
  /// Returns true if `entityIDValue` has been explicitly set.
  public var hasEntityIDValue: Bool {return _storage._entityIDValue != nil}
  /// Clears the value of `entityIDValue`. Subsequent reads from it will return its default value.
  public mutating func clearEntityIDValue() {_storage._entityIDValue = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._entityIDValue, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularBoolField(value: &_storage._boolValue)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._intValue)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._floatValue)
        case 5: try decoder.decodeSingularStringField(value: &_storage._stringValue)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._blobValue)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._messageValue)
        case 8: try decoder.decodeSingularStringField(value: &_storage._fourccValue)
        case 9: try decoder.decodeSingularUInt64Field(value: &_storage._uintValue)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._entityIDValue)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._boolValue {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      }
      if let v = _storage._intValue {
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._floatValue {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
      }
      if let v = _storage._stringValue {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._blobValue {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
      }
      if let v = _storage._messageValue {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
      }
      if let v = _storage._fourccValue {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if let v = _storage._uintValue {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 9)
      }
      if let v = _storage._entityIDValue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Attribute: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Attribute"

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  public var value: Bgs_Protocol_Variant {
    get {return _storage._value ?? Bgs_Protocol_Variant()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._name == nil {return false}
      if _storage._value == nil {return false}
      if let v = _storage._value, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_AttributeFilter: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AttributeFilter"

  public var op: Bgs_Protocol_AttributeFilter.Operation {
    get {return _op ?? .matchNone}
    set {_op = newValue}
  }
  /// Returns true if `op` has been explicitly set.
  public var hasOp: Bool {return self._op != nil}
  /// Clears the value of `op`. Subsequent reads from it will return its default value.
  public mutating func clearOp() {self._op = nil}

  public var attribute: [Bgs_Protocol_Attribute] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Operation: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case matchNone // = 0
    case matchAny // = 1
    case matchAll // = 2
    case matchAllMostSpecific // = 3

    public init() {
      self = .matchNone
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .matchNone
      case 1: self = .matchAny
      case 2: self = .matchAll
      case 3: self = .matchAllMostSpecific
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .matchNone: return 0
      case .matchAny: return 1
      case .matchAll: return 2
      case .matchAllMostSpecific: return 3
      }
    }

  }

  public init() {}

  public var isInitialized: Bool {
    if self._op == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.attribute) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._op)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.attribute)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._op {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.attribute.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attribute, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _op: Bgs_Protocol_AttributeFilter.Operation? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol"

extension Bgs_Protocol_Variant: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "bool_value"),
    3: .standard(proto: "int_value"),
    4: .standard(proto: "float_value"),
    5: .standard(proto: "string_value"),
    6: .standard(proto: "blob_value"),
    7: .standard(proto: "message_value"),
    8: .standard(proto: "fourcc_value"),
    9: .standard(proto: "uint_value"),
    10: .standard(proto: "entity_id_value"),
  ]

  fileprivate class _StorageClass {
    var _boolValue: Bool? = nil
    var _intValue: Int64? = nil
    var _floatValue: Double? = nil
    var _stringValue: String? = nil
    var _blobValue: Data? = nil
    var _messageValue: Data? = nil
    var _fourccValue: String? = nil
    var _uintValue: UInt64? = nil
    var _entityIDValue: Bgs_Protocol_EntityId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _boolValue = source._boolValue
      _intValue = source._intValue
      _floatValue = source._floatValue
      _stringValue = source._stringValue
      _blobValue = source._blobValue
      _messageValue = source._messageValue
      _fourccValue = source._fourccValue
      _uintValue = source._uintValue
      _entityIDValue = source._entityIDValue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Variant) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._boolValue != other_storage._boolValue {return false}
        if _storage._intValue != other_storage._intValue {return false}
        if _storage._floatValue != other_storage._floatValue {return false}
        if _storage._stringValue != other_storage._stringValue {return false}
        if _storage._blobValue != other_storage._blobValue {return false}
        if _storage._messageValue != other_storage._messageValue {return false}
        if _storage._fourccValue != other_storage._fourccValue {return false}
        if _storage._uintValue != other_storage._uintValue {return false}
        if _storage._entityIDValue != other_storage._entityIDValue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Attribute: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String? = nil
    var _value: Bgs_Protocol_Variant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Attribute) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_AttributeFilter: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "op"),
    2: .same(proto: "attribute"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_AttributeFilter) -> Bool {
    if self._op != other._op {return false}
    if self.attribute != other.attribute {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_AttributeFilter.Operation: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MATCH_NONE"),
    1: .same(proto: "MATCH_ANY"),
    2: .same(proto: "MATCH_ALL"),
    3: .same(proto: "MATCH_ALL_MOST_SPECIFIC"),
  ]
}
