// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/session_service.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Session_V1_CreateSessionRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CreateSessionRequest"

  public var identity: Bgs_Protocol_Account_V1_Identity {
    get {return _storage._identity ?? Bgs_Protocol_Account_V1_Identity()}
    set {_uniqueStorage()._identity = newValue}
  }
  /// Returns true if `identity` has been explicitly set.
  public var hasIdentity: Bool {return _storage._identity != nil}
  /// Clears the value of `identity`. Subsequent reads from it will return its default value.
  public mutating func clearIdentity() {_storage._identity = nil}

  public var platform: UInt32 {
    get {return _storage._platform ?? 0}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  public var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  public mutating func clearPlatform() {_storage._platform = nil}

  public var locale: UInt32 {
    get {return _storage._locale ?? 0}
    set {_uniqueStorage()._locale = newValue}
  }
  /// Returns true if `locale` has been explicitly set.
  public var hasLocale: Bool {return _storage._locale != nil}
  /// Clears the value of `locale`. Subsequent reads from it will return its default value.
  public mutating func clearLocale() {_storage._locale = nil}

  public var clientAddress: String {
    get {return _storage._clientAddress ?? String()}
    set {_uniqueStorage()._clientAddress = newValue}
  }
  /// Returns true if `clientAddress` has been explicitly set.
  public var hasClientAddress: Bool {return _storage._clientAddress != nil}
  /// Clears the value of `clientAddress`. Subsequent reads from it will return its default value.
  public mutating func clearClientAddress() {_storage._clientAddress = nil}

  public var applicationVersion: Int32 {
    get {return _storage._applicationVersion ?? 0}
    set {_uniqueStorage()._applicationVersion = newValue}
  }
  /// Returns true if `applicationVersion` has been explicitly set.
  public var hasApplicationVersion: Bool {return _storage._applicationVersion != nil}
  /// Clears the value of `applicationVersion`. Subsequent reads from it will return its default value.
  public mutating func clearApplicationVersion() {_storage._applicationVersion = nil}

  public var userAgent: String {
    get {return _storage._userAgent ?? String()}
    set {_uniqueStorage()._userAgent = newValue}
  }
  /// Returns true if `userAgent` has been explicitly set.
  public var hasUserAgent: Bool {return _storage._userAgent != nil}
  /// Clears the value of `userAgent`. Subsequent reads from it will return its default value.
  public mutating func clearUserAgent() {_storage._userAgent = nil}

  public var sessionKey: Data {
    get {return _storage._sessionKey ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._sessionKey = newValue}
  }
  /// Returns true if `sessionKey` has been explicitly set.
  public var hasSessionKey: Bool {return _storage._sessionKey != nil}
  /// Clears the value of `sessionKey`. Subsequent reads from it will return its default value.
  public mutating func clearSessionKey() {_storage._sessionKey = nil}

  public var options: Bgs_Protocol_Session_V1_SessionOptions {
    get {return _storage._options ?? Bgs_Protocol_Session_V1_SessionOptions()}
    set {_uniqueStorage()._options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  public var hasOptions: Bool {return _storage._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  public mutating func clearOptions() {_storage._options = nil}

  public var requiresMarkAlive: Bool {
    get {return _storage._requiresMarkAlive ?? false}
    set {_uniqueStorage()._requiresMarkAlive = newValue}
  }
  /// Returns true if `requiresMarkAlive` has been explicitly set.
  public var hasRequiresMarkAlive: Bool {return _storage._requiresMarkAlive != nil}
  /// Clears the value of `requiresMarkAlive`. Subsequent reads from it will return its default value.
  public mutating func clearRequiresMarkAlive() {_storage._requiresMarkAlive = nil}

  public var macAddress: String {
    get {return _storage._macAddress ?? String()}
    set {_uniqueStorage()._macAddress = newValue}
  }
  /// Returns true if `macAddress` has been explicitly set.
  public var hasMacAddress: Bool {return _storage._macAddress != nil}
  /// Clears the value of `macAddress`. Subsequent reads from it will return its default value.
  public mutating func clearMacAddress() {_storage._macAddress = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identity, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._identity)
        case 2: try decoder.decodeSingularFixed32Field(value: &_storage._platform)
        case 3: try decoder.decodeSingularFixed32Field(value: &_storage._locale)
        case 4: try decoder.decodeSingularStringField(value: &_storage._clientAddress)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._applicationVersion)
        case 6: try decoder.decodeSingularStringField(value: &_storage._userAgent)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._sessionKey)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._options)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._requiresMarkAlive)
        case 10: try decoder.decodeSingularStringField(value: &_storage._macAddress)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._platform {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._locale {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._clientAddress {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._applicationVersion {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._userAgent {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._sessionKey {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
      }
      if let v = _storage._options {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._requiresMarkAlive {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      }
      if let v = _storage._macAddress {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Session_V1_CreateSessionResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CreateSessionResponse"

  public var sessionID: String {
    get {return _sessionID ?? String()}
    set {_sessionID = newValue}
  }
  /// Returns true if `sessionID` has been explicitly set.
  public var hasSessionID: Bool {return self._sessionID != nil}
  /// Clears the value of `sessionID`. Subsequent reads from it will return its default value.
  public mutating func clearSessionID() {self._sessionID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._sessionID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sessionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _sessionID: String? = nil
}

public struct Bgs_Protocol_Session_V1_UpdateSessionRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".UpdateSessionRequest"

  public var identity: Bgs_Protocol_Account_V1_Identity {
    get {return _storage._identity ?? Bgs_Protocol_Account_V1_Identity()}
    set {_uniqueStorage()._identity = newValue}
  }
  /// Returns true if `identity` has been explicitly set.
  public var hasIdentity: Bool {return _storage._identity != nil}
  /// Clears the value of `identity`. Subsequent reads from it will return its default value.
  public mutating func clearIdentity() {_storage._identity = nil}

  public var options: Bgs_Protocol_Session_V1_SessionOptions {
    get {return _storage._options ?? Bgs_Protocol_Session_V1_SessionOptions()}
    set {_uniqueStorage()._options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  public var hasOptions: Bool {return _storage._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  public mutating func clearOptions() {_storage._options = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identity, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._identity)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._options)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._options {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Session_V1_DestroySessionRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".DestroySessionRequest"

  public var identity: Bgs_Protocol_Account_V1_Identity {
    get {return _storage._identity ?? Bgs_Protocol_Account_V1_Identity()}
    set {_uniqueStorage()._identity = newValue}
  }
  /// Returns true if `identity` has been explicitly set.
  public var hasIdentity: Bool {return _storage._identity != nil}
  /// Clears the value of `identity`. Subsequent reads from it will return its default value.
  public mutating func clearIdentity() {_storage._identity = nil}

  public var sessionID: String {
    get {return _storage._sessionID ?? String()}
    set {_uniqueStorage()._sessionID = newValue}
  }
  /// Returns true if `sessionID` has been explicitly set.
  public var hasSessionID: Bool {return _storage._sessionID != nil}
  /// Clears the value of `sessionID`. Subsequent reads from it will return its default value.
  public mutating func clearSessionID() {_storage._sessionID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identity, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._identity)
        case 2: try decoder.decodeSingularStringField(value: &_storage._sessionID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._sessionID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Session_V1_GetSessionCapacityRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GetSessionCapacityRequest"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Bgs_Protocol_Session_V1_GetSessionCapacityResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GetSessionCapacityResponse"

  public var sessionsAvailable: UInt32 {
    get {return _sessionsAvailable ?? 0}
    set {_sessionsAvailable = newValue}
  }
  /// Returns true if `sessionsAvailable` has been explicitly set.
  public var hasSessionsAvailable: Bool {return self._sessionsAvailable != nil}
  /// Clears the value of `sessionsAvailable`. Subsequent reads from it will return its default value.
  public mutating func clearSessionsAvailable() {self._sessionsAvailable = nil}

  public var timeFrameSeconds: UInt32 {
    get {return _timeFrameSeconds ?? 0}
    set {_timeFrameSeconds = newValue}
  }
  /// Returns true if `timeFrameSeconds` has been explicitly set.
  public var hasTimeFrameSeconds: Bool {return self._timeFrameSeconds != nil}
  /// Clears the value of `timeFrameSeconds`. Subsequent reads from it will return its default value.
  public mutating func clearTimeFrameSeconds() {self._timeFrameSeconds = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._sessionsAvailable)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._timeFrameSeconds)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sessionsAvailable {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._timeFrameSeconds {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _sessionsAvailable: UInt32? = nil
  fileprivate var _timeFrameSeconds: UInt32? = nil
}

public struct Bgs_Protocol_Session_V1_GetSessionStateByBenefactorRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GetSessionStateByBenefactorRequest"

  public var benefactorHandle: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._benefactorHandle ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._benefactorHandle = newValue}
  }
  /// Returns true if `benefactorHandle` has been explicitly set.
  public var hasBenefactorHandle: Bool {return _storage._benefactorHandle != nil}
  /// Clears the value of `benefactorHandle`. Subsequent reads from it will return its default value.
  public mutating func clearBenefactorHandle() {_storage._benefactorHandle = nil}

  public var includeBillingDisabled: Bool {
    get {return _storage._includeBillingDisabled ?? false}
    set {_uniqueStorage()._includeBillingDisabled = newValue}
  }
  /// Returns true if `includeBillingDisabled` has been explicitly set.
  public var hasIncludeBillingDisabled: Bool {return _storage._includeBillingDisabled != nil}
  /// Clears the value of `includeBillingDisabled`. Subsequent reads from it will return its default value.
  public mutating func clearIncludeBillingDisabled() {_storage._includeBillingDisabled = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._benefactorHandle, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._benefactorHandle)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._includeBillingDisabled)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._benefactorHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._includeBillingDisabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Session_V1_GetSessionStateByBenefactorResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GetSessionStateByBenefactorResponse"

  public var benefactorHandle: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._benefactorHandle ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._benefactorHandle = newValue}
  }
  /// Returns true if `benefactorHandle` has been explicitly set.
  public var hasBenefactorHandle: Bool {return _storage._benefactorHandle != nil}
  /// Clears the value of `benefactorHandle`. Subsequent reads from it will return its default value.
  public mutating func clearBenefactorHandle() {_storage._benefactorHandle = nil}

  public var session: [Bgs_Protocol_Session_V1_SessionState] {
    get {return _storage._session}
    set {_uniqueStorage()._session = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._benefactorHandle, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._session) {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._benefactorHandle)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._session)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._benefactorHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._session.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._session, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Session_V1_MarkSessionsAliveRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".MarkSessionsAliveRequest"

  public var session: [Bgs_Protocol_Session_V1_SessionIdentifier] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.session) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.session)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.session.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.session, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Bgs_Protocol_Session_V1_MarkSessionsAliveResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".MarkSessionsAliveResponse"

  public var failedSession: [Bgs_Protocol_Session_V1_SessionIdentifier] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.failedSession) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.failedSession)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.failedSession.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.failedSession, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Bgs_Protocol_Session_V1_GetSessionStateRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GetSessionStateRequest"

  public var handle: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._handle ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._handle = newValue}
  }
  /// Returns true if `handle` has been explicitly set.
  public var hasHandle: Bool {return _storage._handle != nil}
  /// Clears the value of `handle`. Subsequent reads from it will return its default value.
  public mutating func clearHandle() {_storage._handle = nil}

  public var includeBillingDisabled: Bool {
    get {return _storage._includeBillingDisabled ?? false}
    set {_uniqueStorage()._includeBillingDisabled = newValue}
  }
  /// Returns true if `includeBillingDisabled` has been explicitly set.
  public var hasIncludeBillingDisabled: Bool {return _storage._includeBillingDisabled != nil}
  /// Clears the value of `includeBillingDisabled`. Subsequent reads from it will return its default value.
  public mutating func clearIncludeBillingDisabled() {_storage._includeBillingDisabled = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._handle, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._handle)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._includeBillingDisabled)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._handle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._includeBillingDisabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Session_V1_GetSessionStateResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GetSessionStateResponse"

  public var handle: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._handle ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._handle = newValue}
  }
  /// Returns true if `handle` has been explicitly set.
  public var hasHandle: Bool {return _storage._handle != nil}
  /// Clears the value of `handle`. Subsequent reads from it will return its default value.
  public mutating func clearHandle() {_storage._handle = nil}

  public var session: Bgs_Protocol_Session_V1_SessionState {
    get {return _storage._session ?? Bgs_Protocol_Session_V1_SessionState()}
    set {_uniqueStorage()._session = newValue}
  }
  /// Returns true if `session` has been explicitly set.
  public var hasSession: Bool {return _storage._session != nil}
  /// Clears the value of `session`. Subsequent reads from it will return its default value.
  public mutating func clearSession() {_storage._session = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._handle, !v.isInitialized {return false}
      if let v = _storage._session, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._handle)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._session)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._handle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._session {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Session_V1_GetSignedSessionStateRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GetSignedSessionStateRequest"

  public var agentID: Bgs_Protocol_Account_V1_GameAccountHandle {
    get {return _storage._agentID ?? Bgs_Protocol_Account_V1_GameAccountHandle()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_storage._agentID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Session_V1_GetSignedSessionStateResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GetSignedSessionStateResponse"

  public var token: String {
    get {return _token ?? String()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._token)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._token {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _token: String? = nil
}

public struct Bgs_Protocol_Session_V1_RefreshSessionKeyRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".RefreshSessionKeyRequest"

  public var sessionKey: Data {
    get {return _sessionKey ?? SwiftProtobuf.Internal.emptyData}
    set {_sessionKey = newValue}
  }
  /// Returns true if `sessionKey` has been explicitly set.
  public var hasSessionKey: Bool {return self._sessionKey != nil}
  /// Clears the value of `sessionKey`. Subsequent reads from it will return its default value.
  public mutating func clearSessionKey() {self._sessionKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._sessionKey)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sessionKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _sessionKey: Data? = nil
}

public struct Bgs_Protocol_Session_V1_RefreshSessionKeyResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".RefreshSessionKeyResponse"

  public var sessionKey: Data {
    get {return _sessionKey ?? SwiftProtobuf.Internal.emptyData}
    set {_sessionKey = newValue}
  }
  /// Returns true if `sessionKey` has been explicitly set.
  public var hasSessionKey: Bool {return self._sessionKey != nil}
  /// Clears the value of `sessionKey`. Subsequent reads from it will return its default value.
  public mutating func clearSessionKey() {self._sessionKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._sessionKey)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._sessionKey {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _sessionKey: Data? = nil
}

public struct Bgs_Protocol_Session_V1_SessionCreatedNotification: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SessionCreatedNotification"

  public var identity: Bgs_Protocol_Account_V1_Identity {
    get {return _storage._identity ?? Bgs_Protocol_Account_V1_Identity()}
    set {_uniqueStorage()._identity = newValue}
  }
  /// Returns true if `identity` has been explicitly set.
  public var hasIdentity: Bool {return _storage._identity != nil}
  /// Clears the value of `identity`. Subsequent reads from it will return its default value.
  public mutating func clearIdentity() {_storage._identity = nil}

  public var reason: UInt32 {
    get {return _storage._reason ?? 0}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_storage._reason = nil}

  public var sessionID: String {
    get {return _storage._sessionID ?? String()}
    set {_uniqueStorage()._sessionID = newValue}
  }
  /// Returns true if `sessionID` has been explicitly set.
  public var hasSessionID: Bool {return _storage._sessionID != nil}
  /// Clears the value of `sessionID`. Subsequent reads from it will return its default value.
  public mutating func clearSessionID() {_storage._sessionID = nil}

  public var sessionKey: Data {
    get {return _storage._sessionKey ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._sessionKey = newValue}
  }
  /// Returns true if `sessionKey` has been explicitly set.
  public var hasSessionKey: Bool {return _storage._sessionKey != nil}
  /// Clears the value of `sessionKey`. Subsequent reads from it will return its default value.
  public mutating func clearSessionKey() {_storage._sessionKey = nil}

  public var clientID: String {
    get {return _storage._clientID ?? String()}
    set {_uniqueStorage()._clientID = newValue}
  }
  /// Returns true if `clientID` has been explicitly set.
  public var hasClientID: Bool {return _storage._clientID != nil}
  /// Clears the value of `clientID`. Subsequent reads from it will return its default value.
  public mutating func clearClientID() {_storage._clientID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identity, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._identity)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._reason)
        case 3: try decoder.decodeSingularStringField(value: &_storage._sessionID)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._sessionKey)
        case 5: try decoder.decodeSingularStringField(value: &_storage._clientID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._reason {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._sessionID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._sessionKey {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
      }
      if let v = _storage._clientID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Session_V1_SessionDestroyedNotification: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SessionDestroyedNotification"

  public var identity: Bgs_Protocol_Account_V1_Identity {
    get {return _storage._identity ?? Bgs_Protocol_Account_V1_Identity()}
    set {_uniqueStorage()._identity = newValue}
  }
  /// Returns true if `identity` has been explicitly set.
  public var hasIdentity: Bool {return _storage._identity != nil}
  /// Clears the value of `identity`. Subsequent reads from it will return its default value.
  public mutating func clearIdentity() {_storage._identity = nil}

  public var reason: UInt32 {
    get {return _storage._reason ?? 0}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_storage._reason = nil}

  public var sessionID: String {
    get {return _storage._sessionID ?? String()}
    set {_uniqueStorage()._sessionID = newValue}
  }
  /// Returns true if `sessionID` has been explicitly set.
  public var hasSessionID: Bool {return _storage._sessionID != nil}
  /// Clears the value of `sessionID`. Subsequent reads from it will return its default value.
  public mutating func clearSessionID() {_storage._sessionID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identity, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._identity)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._reason)
        case 3: try decoder.decodeSingularStringField(value: &_storage._sessionID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._reason {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._sessionID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Session_V1_SessionUpdatedNotification: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SessionUpdatedNotification"

  public var identity: Bgs_Protocol_Account_V1_Identity {
    get {return _storage._identity ?? Bgs_Protocol_Account_V1_Identity()}
    set {_uniqueStorage()._identity = newValue}
  }
  /// Returns true if `identity` has been explicitly set.
  public var hasIdentity: Bool {return _storage._identity != nil}
  /// Clears the value of `identity`. Subsequent reads from it will return its default value.
  public mutating func clearIdentity() {_storage._identity = nil}

  public var reason: UInt32 {
    get {return _storage._reason ?? 0}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_storage._reason = nil}

  public var sessionID: String {
    get {return _storage._sessionID ?? String()}
    set {_uniqueStorage()._sessionID = newValue}
  }
  /// Returns true if `sessionID` has been explicitly set.
  public var hasSessionID: Bool {return _storage._sessionID != nil}
  /// Clears the value of `sessionID`. Subsequent reads from it will return its default value.
  public mutating func clearSessionID() {_storage._sessionID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identity, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._identity)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._reason)
        case 3: try decoder.decodeSingularStringField(value: &_storage._sessionID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._identity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._reason {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._sessionID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.session.v1"

extension Bgs_Protocol_Session_V1_CreateSessionRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
    2: .same(proto: "platform"),
    3: .same(proto: "locale"),
    4: .standard(proto: "client_address"),
    5: .standard(proto: "application_version"),
    6: .standard(proto: "user_agent"),
    7: .standard(proto: "session_key"),
    8: .same(proto: "options"),
    9: .standard(proto: "requires_mark_alive"),
    10: .standard(proto: "mac_address"),
  ]

  fileprivate class _StorageClass {
    var _identity: Bgs_Protocol_Account_V1_Identity? = nil
    var _platform: UInt32? = nil
    var _locale: UInt32? = nil
    var _clientAddress: String? = nil
    var _applicationVersion: Int32? = nil
    var _userAgent: String? = nil
    var _sessionKey: Data? = nil
    var _options: Bgs_Protocol_Session_V1_SessionOptions? = nil
    var _requiresMarkAlive: Bool? = nil
    var _macAddress: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identity = source._identity
      _platform = source._platform
      _locale = source._locale
      _clientAddress = source._clientAddress
      _applicationVersion = source._applicationVersion
      _userAgent = source._userAgent
      _sessionKey = source._sessionKey
      _options = source._options
      _requiresMarkAlive = source._requiresMarkAlive
      _macAddress = source._macAddress
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_CreateSessionRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._identity != other_storage._identity {return false}
        if _storage._platform != other_storage._platform {return false}
        if _storage._locale != other_storage._locale {return false}
        if _storage._clientAddress != other_storage._clientAddress {return false}
        if _storage._applicationVersion != other_storage._applicationVersion {return false}
        if _storage._userAgent != other_storage._userAgent {return false}
        if _storage._sessionKey != other_storage._sessionKey {return false}
        if _storage._options != other_storage._options {return false}
        if _storage._requiresMarkAlive != other_storage._requiresMarkAlive {return false}
        if _storage._macAddress != other_storage._macAddress {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_CreateSessionResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_CreateSessionResponse) -> Bool {
    if self._sessionID != other._sessionID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_UpdateSessionRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
    2: .same(proto: "options"),
  ]

  fileprivate class _StorageClass {
    var _identity: Bgs_Protocol_Account_V1_Identity? = nil
    var _options: Bgs_Protocol_Session_V1_SessionOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identity = source._identity
      _options = source._options
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_UpdateSessionRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._identity != other_storage._identity {return false}
        if _storage._options != other_storage._options {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_DestroySessionRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
    2: .standard(proto: "session_id"),
  ]

  fileprivate class _StorageClass {
    var _identity: Bgs_Protocol_Account_V1_Identity? = nil
    var _sessionID: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identity = source._identity
      _sessionID = source._sessionID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_DestroySessionRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._identity != other_storage._identity {return false}
        if _storage._sessionID != other_storage._sessionID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_GetSessionCapacityRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_GetSessionCapacityRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_GetSessionCapacityResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sessions_available"),
    2: .standard(proto: "time_frame_seconds"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_GetSessionCapacityResponse) -> Bool {
    if self._sessionsAvailable != other._sessionsAvailable {return false}
    if self._timeFrameSeconds != other._timeFrameSeconds {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_GetSessionStateByBenefactorRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "benefactor_handle"),
    2: .standard(proto: "include_billing_disabled"),
  ]

  fileprivate class _StorageClass {
    var _benefactorHandle: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _includeBillingDisabled: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _benefactorHandle = source._benefactorHandle
      _includeBillingDisabled = source._includeBillingDisabled
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_GetSessionStateByBenefactorRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._benefactorHandle != other_storage._benefactorHandle {return false}
        if _storage._includeBillingDisabled != other_storage._includeBillingDisabled {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_GetSessionStateByBenefactorResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "benefactor_handle"),
    2: .same(proto: "session"),
  ]

  fileprivate class _StorageClass {
    var _benefactorHandle: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _session: [Bgs_Protocol_Session_V1_SessionState] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _benefactorHandle = source._benefactorHandle
      _session = source._session
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_GetSessionStateByBenefactorResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._benefactorHandle != other_storage._benefactorHandle {return false}
        if _storage._session != other_storage._session {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_MarkSessionsAliveRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "session"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_MarkSessionsAliveRequest) -> Bool {
    if self.session != other.session {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_MarkSessionsAliveResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "failed_session"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_MarkSessionsAliveResponse) -> Bool {
    if self.failedSession != other.failedSession {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_GetSessionStateRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "handle"),
    2: .standard(proto: "include_billing_disabled"),
  ]

  fileprivate class _StorageClass {
    var _handle: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _includeBillingDisabled: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _handle = source._handle
      _includeBillingDisabled = source._includeBillingDisabled
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_GetSessionStateRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._handle != other_storage._handle {return false}
        if _storage._includeBillingDisabled != other_storage._includeBillingDisabled {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_GetSessionStateResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "handle"),
    2: .same(proto: "session"),
  ]

  fileprivate class _StorageClass {
    var _handle: Bgs_Protocol_Account_V1_GameAccountHandle? = nil
    var _session: Bgs_Protocol_Session_V1_SessionState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _handle = source._handle
      _session = source._session
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_GetSessionStateResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._handle != other_storage._handle {return false}
        if _storage._session != other_storage._session {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_GetSignedSessionStateRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Account_V1_GameAccountHandle? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_GetSignedSessionStateRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._agentID != other_storage._agentID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_GetSignedSessionStateResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_GetSignedSessionStateResponse) -> Bool {
    if self._token != other._token {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_RefreshSessionKeyRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_key"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_RefreshSessionKeyRequest) -> Bool {
    if self._sessionKey != other._sessionKey {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_RefreshSessionKeyResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "session_key"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_RefreshSessionKeyResponse) -> Bool {
    if self._sessionKey != other._sessionKey {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_SessionCreatedNotification: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
    2: .same(proto: "reason"),
    3: .standard(proto: "session_id"),
    4: .standard(proto: "session_key"),
    5: .standard(proto: "client_id"),
  ]

  fileprivate class _StorageClass {
    var _identity: Bgs_Protocol_Account_V1_Identity? = nil
    var _reason: UInt32? = nil
    var _sessionID: String? = nil
    var _sessionKey: Data? = nil
    var _clientID: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identity = source._identity
      _reason = source._reason
      _sessionID = source._sessionID
      _sessionKey = source._sessionKey
      _clientID = source._clientID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_SessionCreatedNotification) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._identity != other_storage._identity {return false}
        if _storage._reason != other_storage._reason {return false}
        if _storage._sessionID != other_storage._sessionID {return false}
        if _storage._sessionKey != other_storage._sessionKey {return false}
        if _storage._clientID != other_storage._clientID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_SessionDestroyedNotification: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
    2: .same(proto: "reason"),
    3: .standard(proto: "session_id"),
  ]

  fileprivate class _StorageClass {
    var _identity: Bgs_Protocol_Account_V1_Identity? = nil
    var _reason: UInt32? = nil
    var _sessionID: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identity = source._identity
      _reason = source._reason
      _sessionID = source._sessionID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_SessionDestroyedNotification) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._identity != other_storage._identity {return false}
        if _storage._reason != other_storage._reason {return false}
        if _storage._sessionID != other_storage._sessionID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Session_V1_SessionUpdatedNotification: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
    2: .same(proto: "reason"),
    3: .standard(proto: "session_id"),
  ]

  fileprivate class _StorageClass {
    var _identity: Bgs_Protocol_Account_V1_Identity? = nil
    var _reason: UInt32? = nil
    var _sessionID: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identity = source._identity
      _reason = source._reason
      _sessionID = source._sessionID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Session_V1_SessionUpdatedNotification) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._identity != other_storage._identity {return false}
        if _storage._reason != other_storage._reason {return false}
        if _storage._sessionID != other_storage._sessionID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
