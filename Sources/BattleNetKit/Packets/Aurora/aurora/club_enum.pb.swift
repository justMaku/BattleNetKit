// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/club_enum.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Bgs_Protocol_Club_V1_PrivacyLevel: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case closed // = 0
  case openInvitation // = 1
  case openTicket // = 2
  case `open` // = 3

  public init() {
    self = .closed
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .closed
    case 1: self = .openInvitation
    case 2: self = .openTicket
    case 3: self = .open
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .closed: return 0
    case .openInvitation: return 1
    case .openTicket: return 2
    case .open: return 3
    }
  }

}

public enum Bgs_Protocol_Club_V1_VisibilityLevel: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case `private` // = 0
  case `public` // = 1

  public init() {
    self = .private
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .private
    case 1: self = .public
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .private: return 0
    case .public: return 1
    }
  }

}

public enum Bgs_Protocol_Club_V1_ClubRemovedReason: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case none // = 0
  case memberLeft // = 1
  case memberKicked // = 2
  case memberBanned // = 3
  case memberRemovedByService // = 4
  case destroyedByMember // = 5
  case destroyedByService // = 6

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .memberLeft
    case 2: self = .memberKicked
    case 3: self = .memberBanned
    case 4: self = .memberRemovedByService
    case 5: self = .destroyedByMember
    case 6: self = .destroyedByService
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .memberLeft: return 1
    case .memberKicked: return 2
    case .memberBanned: return 3
    case .memberRemovedByService: return 4
    case .destroyedByMember: return 5
    case .destroyedByService: return 6
    }
  }

}

public enum Bgs_Protocol_Club_V1_StreamVoiceLevel: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case voiceLevelDisabled // = 0
  case voiceLevelPushToTalk // = 1
  case voiceLevelOpenMic // = 2

  public init() {
    self = .voiceLevelDisabled
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .voiceLevelDisabled
    case 1: self = .voiceLevelPushToTalk
    case 2: self = .voiceLevelOpenMic
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .voiceLevelDisabled: return 0
    case .voiceLevelPushToTalk: return 1
    case .voiceLevelOpenMic: return 2
    }
  }

}

public enum Bgs_Protocol_Club_V1_VoiceMicrophoneState: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case microphoneStateNormal // = 0
  case microphoneStateSelfMute // = 1
  case microphoneStateSelfDeaf // = 2

  public init() {
    self = .microphoneStateNormal
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .microphoneStateNormal
    case 1: self = .microphoneStateSelfMute
    case 2: self = .microphoneStateSelfDeaf
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .microphoneStateNormal: return 0
    case .microphoneStateSelfMute: return 1
    case .microphoneStateSelfDeaf: return 2
    }
  }

}

public enum Bgs_Protocol_Club_V1_PresenceLevel: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case none // = 0
  case basic // = 1
  case rich // = 2

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .basic
    case 2: self = .rich
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .basic: return 1
    case .rich: return 2
    }
  }

}

public enum Bgs_Protocol_Club_V1_WhisperLevel: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case `open` // = 0
  case restricted // = 1

  public init() {
    self = .open
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .open
    case 1: self = .restricted
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .open: return 0
    case .restricted: return 1
    }
  }

}

public enum Bgs_Protocol_Club_V1_StreamNotificationFilter: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case none // = 0
  case mention // = 1
  case all // = 2

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .mention
    case 2: self = .all
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .mention: return 1
    case .all: return 2
    }
  }

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Bgs_Protocol_Club_V1_PrivacyLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRIVACY_LEVEL_CLOSED"),
    1: .same(proto: "PRIVACY_LEVEL_OPEN_INVITATION"),
    2: .same(proto: "PRIVACY_LEVEL_OPEN_TICKET"),
    3: .same(proto: "PRIVACY_LEVEL_OPEN"),
  ]
}

extension Bgs_Protocol_Club_V1_VisibilityLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VISIBILITY_LEVEL_PRIVATE"),
    1: .same(proto: "VISIBILITY_LEVEL_PUBLIC"),
  ]
}

extension Bgs_Protocol_Club_V1_ClubRemovedReason: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CLUB_REMOVED_REASON_NONE"),
    1: .same(proto: "CLUB_REMOVED_REASON_MEMBER_LEFT"),
    2: .same(proto: "CLUB_REMOVED_REASON_MEMBER_KICKED"),
    3: .same(proto: "CLUB_REMOVED_REASON_MEMBER_BANNED"),
    4: .same(proto: "CLUB_REMOVED_REASON_MEMBER_REMOVED_BY_SERVICE"),
    5: .same(proto: "CLUB_REMOVED_REASON_DESTROYED_BY_MEMBER"),
    6: .same(proto: "CLUB_REMOVED_REASON_DESTROYED_BY_SERVICE"),
  ]
}

extension Bgs_Protocol_Club_V1_StreamVoiceLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VOICE_LEVEL_DISABLED"),
    1: .same(proto: "VOICE_LEVEL_PUSH_TO_TALK"),
    2: .same(proto: "VOICE_LEVEL_OPEN_MIC"),
  ]
}

extension Bgs_Protocol_Club_V1_VoiceMicrophoneState: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MICROPHONE_STATE_NORMAL"),
    1: .same(proto: "MICROPHONE_STATE_SELF_MUTE"),
    2: .same(proto: "MICROPHONE_STATE_SELF_DEAF"),
  ]
}

extension Bgs_Protocol_Club_V1_PresenceLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRESENCE_LEVEL_NONE"),
    1: .same(proto: "PRESENCE_LEVEL_BASIC"),
    2: .same(proto: "PRESENCE_LEVEL_RICH"),
  ]
}

extension Bgs_Protocol_Club_V1_WhisperLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WHISPER_LEVEL_OPEN"),
    1: .same(proto: "WHISPER_LEVEL_RESTRICTED"),
  ]
}

extension Bgs_Protocol_Club_V1_StreamNotificationFilter: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STREAM_NOTIFICATION_FILTER_NONE"),
    1: .same(proto: "STREAM_NOTIFICATION_FILTER_MENTION"),
    2: .same(proto: "STREAM_NOTIFICATION_FILTER_ALL"),
  ]
}
