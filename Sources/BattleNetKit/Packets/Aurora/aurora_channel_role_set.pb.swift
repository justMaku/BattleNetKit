// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/channel_role_set.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Channel_ChannelPrivilegeSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var canInvite: Bool {
    get {return _canInvite ?? false}
    set {_canInvite = newValue}
  }
  /// Returns true if `canInvite` has been explicitly set.
  public var hasCanInvite: Bool {return self._canInvite != nil}
  /// Clears the value of `canInvite`. Subsequent reads from it will return its default value.
  public mutating func clearCanInvite() {self._canInvite = nil}

  public var canInviteWithReservation: Bool {
    get {return _canInviteWithReservation ?? false}
    set {_canInviteWithReservation = newValue}
  }
  /// Returns true if `canInviteWithReservation` has been explicitly set.
  public var hasCanInviteWithReservation: Bool {return self._canInviteWithReservation != nil}
  /// Clears the value of `canInviteWithReservation`. Subsequent reads from it will return its default value.
  public mutating func clearCanInviteWithReservation() {self._canInviteWithReservation = nil}

  public var canRevokeOtherInvitation: Bool {
    get {return _canRevokeOtherInvitation ?? false}
    set {_canRevokeOtherInvitation = newValue}
  }
  /// Returns true if `canRevokeOtherInvitation` has been explicitly set.
  public var hasCanRevokeOtherInvitation: Bool {return self._canRevokeOtherInvitation != nil}
  /// Clears the value of `canRevokeOtherInvitation`. Subsequent reads from it will return its default value.
  public mutating func clearCanRevokeOtherInvitation() {self._canRevokeOtherInvitation = nil}

  public var canRevokeOwnInvitation: Bool {
    get {return _canRevokeOwnInvitation ?? false}
    set {_canRevokeOwnInvitation = newValue}
  }
  /// Returns true if `canRevokeOwnInvitation` has been explicitly set.
  public var hasCanRevokeOwnInvitation: Bool {return self._canRevokeOwnInvitation != nil}
  /// Clears the value of `canRevokeOwnInvitation`. Subsequent reads from it will return its default value.
  public mutating func clearCanRevokeOwnInvitation() {self._canRevokeOwnInvitation = nil}

  public var canKick: Bool {
    get {return _canKick ?? false}
    set {_canKick = newValue}
  }
  /// Returns true if `canKick` has been explicitly set.
  public var hasCanKick: Bool {return self._canKick != nil}
  /// Clears the value of `canKick`. Subsequent reads from it will return its default value.
  public mutating func clearCanKick() {self._canKick = nil}

  public var canDissolve: Bool {
    get {return _canDissolve ?? false}
    set {_canDissolve = newValue}
  }
  /// Returns true if `canDissolve` has been explicitly set.
  public var hasCanDissolve: Bool {return self._canDissolve != nil}
  /// Clears the value of `canDissolve`. Subsequent reads from it will return its default value.
  public mutating func clearCanDissolve() {self._canDissolve = nil}

  public var canSetPrivacy: Bool {
    get {return _canSetPrivacy ?? false}
    set {_canSetPrivacy = newValue}
  }
  /// Returns true if `canSetPrivacy` has been explicitly set.
  public var hasCanSetPrivacy: Bool {return self._canSetPrivacy != nil}
  /// Clears the value of `canSetPrivacy`. Subsequent reads from it will return its default value.
  public mutating func clearCanSetPrivacy() {self._canSetPrivacy = nil}

  public var canSendMessage: Bool {
    get {return _canSendMessage ?? false}
    set {_canSendMessage = newValue}
  }
  /// Returns true if `canSendMessage` has been explicitly set.
  public var hasCanSendMessage: Bool {return self._canSendMessage != nil}
  /// Clears the value of `canSendMessage`. Subsequent reads from it will return its default value.
  public mutating func clearCanSendMessage() {self._canSendMessage = nil}

  public var canReceiveMessage: Bool {
    get {return _canReceiveMessage ?? false}
    set {_canReceiveMessage = newValue}
  }
  /// Returns true if `canReceiveMessage` has been explicitly set.
  public var hasCanReceiveMessage: Bool {return self._canReceiveMessage != nil}
  /// Clears the value of `canReceiveMessage`. Subsequent reads from it will return its default value.
  public mutating func clearCanReceiveMessage() {self._canReceiveMessage = nil}

  public var canSetAttribute: Bool {
    get {return _canSetAttribute ?? false}
    set {_canSetAttribute = newValue}
  }
  /// Returns true if `canSetAttribute` has been explicitly set.
  public var hasCanSetAttribute: Bool {return self._canSetAttribute != nil}
  /// Clears the value of `canSetAttribute`. Subsequent reads from it will return its default value.
  public mutating func clearCanSetAttribute() {self._canSetAttribute = nil}

  public var canSetOtherMemberAttribute: Bool {
    get {return _canSetOtherMemberAttribute ?? false}
    set {_canSetOtherMemberAttribute = newValue}
  }
  /// Returns true if `canSetOtherMemberAttribute` has been explicitly set.
  public var hasCanSetOtherMemberAttribute: Bool {return self._canSetOtherMemberAttribute != nil}
  /// Clears the value of `canSetOtherMemberAttribute`. Subsequent reads from it will return its default value.
  public mutating func clearCanSetOtherMemberAttribute() {self._canSetOtherMemberAttribute = nil}

  public var canSetOwnMemberAttribute: Bool {
    get {return _canSetOwnMemberAttribute ?? false}
    set {_canSetOwnMemberAttribute = newValue}
  }
  /// Returns true if `canSetOwnMemberAttribute` has been explicitly set.
  public var hasCanSetOwnMemberAttribute: Bool {return self._canSetOwnMemberAttribute != nil}
  /// Clears the value of `canSetOwnMemberAttribute`. Subsequent reads from it will return its default value.
  public mutating func clearCanSetOwnMemberAttribute() {self._canSetOwnMemberAttribute = nil}

  public var canEnterGame: Bool {
    get {return _canEnterGame ?? false}
    set {_canEnterGame = newValue}
  }
  /// Returns true if `canEnterGame` has been explicitly set.
  public var hasCanEnterGame: Bool {return self._canEnterGame != nil}
  /// Clears the value of `canEnterGame`. Subsequent reads from it will return its default value.
  public mutating func clearCanEnterGame() {self._canEnterGame = nil}

  public var canSuggest: Bool {
    get {return _canSuggest ?? false}
    set {_canSuggest = newValue}
  }
  /// Returns true if `canSuggest` has been explicitly set.
  public var hasCanSuggest: Bool {return self._canSuggest != nil}
  /// Clears the value of `canSuggest`. Subsequent reads from it will return its default value.
  public mutating func clearCanSuggest() {self._canSuggest = nil}

  public var canApprove: Bool {
    get {return _canApprove ?? false}
    set {_canApprove = newValue}
  }
  /// Returns true if `canApprove` has been explicitly set.
  public var hasCanApprove: Bool {return self._canApprove != nil}
  /// Clears the value of `canApprove`. Subsequent reads from it will return its default value.
  public mutating func clearCanApprove() {self._canApprove = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _canInvite: Bool? = nil
  fileprivate var _canInviteWithReservation: Bool? = nil
  fileprivate var _canRevokeOtherInvitation: Bool? = nil
  fileprivate var _canRevokeOwnInvitation: Bool? = nil
  fileprivate var _canKick: Bool? = nil
  fileprivate var _canDissolve: Bool? = nil
  fileprivate var _canSetPrivacy: Bool? = nil
  fileprivate var _canSendMessage: Bool? = nil
  fileprivate var _canReceiveMessage: Bool? = nil
  fileprivate var _canSetAttribute: Bool? = nil
  fileprivate var _canSetOtherMemberAttribute: Bool? = nil
  fileprivate var _canSetOwnMemberAttribute: Bool? = nil
  fileprivate var _canEnterGame: Bool? = nil
  fileprivate var _canSuggest: Bool? = nil
  fileprivate var _canApprove: Bool? = nil
}

public struct Bgs_Protocol_Channel_ChannelRole {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt32 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var state: Bgs_Protocol_RoleState {
    get {return _storage._state ?? Bgs_Protocol_RoleState()}
    set {_uniqueStorage()._state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return _storage._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {_uniqueStorage()._state = nil}

  public var privilege: Bgs_Protocol_Channel_ChannelPrivilegeSet {
    get {return _storage._privilege ?? Bgs_Protocol_Channel_ChannelPrivilegeSet()}
    set {_uniqueStorage()._privilege = newValue}
  }
  /// Returns true if `privilege` has been explicitly set.
  public var hasPrivilege: Bool {return _storage._privilege != nil}
  /// Clears the value of `privilege`. Subsequent reads from it will return its default value.
  public mutating func clearPrivilege() {_uniqueStorage()._privilege = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Channel_ChannelRoleSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var role: [Bgs_Protocol_Channel_ChannelRole] = []

  public var defaultRole: [UInt32] = []

  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {self._name = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _name: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.channel"

extension Bgs_Protocol_Channel_ChannelPrivilegeSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChannelPrivilegeSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "can_invite"),
    2: .standard(proto: "can_invite_with_reservation"),
    3: .standard(proto: "can_revoke_other_invitation"),
    4: .standard(proto: "can_revoke_own_invitation"),
    5: .standard(proto: "can_kick"),
    6: .standard(proto: "can_dissolve"),
    7: .standard(proto: "can_set_privacy"),
    8: .standard(proto: "can_send_message"),
    9: .standard(proto: "can_receive_message"),
    10: .standard(proto: "can_set_attribute"),
    11: .standard(proto: "can_set_other_member_attribute"),
    12: .standard(proto: "can_set_own_member_attribute"),
    13: .standard(proto: "can_enter_game"),
    14: .standard(proto: "can_suggest"),
    15: .standard(proto: "can_approve"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._canInvite)
      case 2: try decoder.decodeSingularBoolField(value: &self._canInviteWithReservation)
      case 3: try decoder.decodeSingularBoolField(value: &self._canRevokeOtherInvitation)
      case 4: try decoder.decodeSingularBoolField(value: &self._canRevokeOwnInvitation)
      case 5: try decoder.decodeSingularBoolField(value: &self._canKick)
      case 6: try decoder.decodeSingularBoolField(value: &self._canDissolve)
      case 7: try decoder.decodeSingularBoolField(value: &self._canSetPrivacy)
      case 8: try decoder.decodeSingularBoolField(value: &self._canSendMessage)
      case 9: try decoder.decodeSingularBoolField(value: &self._canReceiveMessage)
      case 10: try decoder.decodeSingularBoolField(value: &self._canSetAttribute)
      case 11: try decoder.decodeSingularBoolField(value: &self._canSetOtherMemberAttribute)
      case 12: try decoder.decodeSingularBoolField(value: &self._canSetOwnMemberAttribute)
      case 13: try decoder.decodeSingularBoolField(value: &self._canEnterGame)
      case 14: try decoder.decodeSingularBoolField(value: &self._canSuggest)
      case 15: try decoder.decodeSingularBoolField(value: &self._canApprove)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._canInvite {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._canInviteWithReservation {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._canRevokeOtherInvitation {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._canRevokeOwnInvitation {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._canKick {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._canDissolve {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._canSetPrivacy {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if let v = self._canSendMessage {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._canReceiveMessage {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if let v = self._canSetAttribute {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    if let v = self._canSetOtherMemberAttribute {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    }
    if let v = self._canSetOwnMemberAttribute {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    }
    if let v = self._canEnterGame {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
    }
    if let v = self._canSuggest {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
    }
    if let v = self._canApprove {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_ChannelPrivilegeSet, rhs: Bgs_Protocol_Channel_ChannelPrivilegeSet) -> Bool {
    if lhs._canInvite != rhs._canInvite {return false}
    if lhs._canInviteWithReservation != rhs._canInviteWithReservation {return false}
    if lhs._canRevokeOtherInvitation != rhs._canRevokeOtherInvitation {return false}
    if lhs._canRevokeOwnInvitation != rhs._canRevokeOwnInvitation {return false}
    if lhs._canKick != rhs._canKick {return false}
    if lhs._canDissolve != rhs._canDissolve {return false}
    if lhs._canSetPrivacy != rhs._canSetPrivacy {return false}
    if lhs._canSendMessage != rhs._canSendMessage {return false}
    if lhs._canReceiveMessage != rhs._canReceiveMessage {return false}
    if lhs._canSetAttribute != rhs._canSetAttribute {return false}
    if lhs._canSetOtherMemberAttribute != rhs._canSetOtherMemberAttribute {return false}
    if lhs._canSetOwnMemberAttribute != rhs._canSetOwnMemberAttribute {return false}
    if lhs._canEnterGame != rhs._canEnterGame {return false}
    if lhs._canSuggest != rhs._canSuggest {return false}
    if lhs._canApprove != rhs._canApprove {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_ChannelRole: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChannelRole"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "state"),
    3: .same(proto: "privilege"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt32? = nil
    var _state: Bgs_Protocol_RoleState? = nil
    var _privilege: Bgs_Protocol_Channel_ChannelPrivilegeSet? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _state = source._state
      _privilege = source._privilege
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._state)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._privilege)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._state {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._privilege {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_ChannelRole, rhs: Bgs_Protocol_Channel_ChannelRole) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._privilege != rhs_storage._privilege {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Channel_ChannelRoleSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChannelRoleSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "role"),
    2: .standard(proto: "default_role"),
    3: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.role)
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.defaultRole)
      case 3: try decoder.decodeSingularStringField(value: &self._name)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.role.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.role, fieldNumber: 1)
    }
    if !self.defaultRole.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.defaultRole, fieldNumber: 2)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Channel_ChannelRoleSet, rhs: Bgs_Protocol_Channel_ChannelRoleSet) -> Bool {
    if lhs.role != rhs.role {return false}
    if lhs.defaultRole != rhs.defaultRole {return false}
    if lhs._name != rhs._name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
