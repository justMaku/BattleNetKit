// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/friends_types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Friends_V1_Friend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountID: Bgs_Protocol_EntityId {
    get {return _storage._accountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return _storage._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {_uniqueStorage()._accountID = nil}

  public var attribute: [Bgs_Protocol_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var role: [UInt32] {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  public var privileges: UInt64 {
    get {return _storage._privileges ?? 0}
    set {_uniqueStorage()._privileges = newValue}
  }
  /// Returns true if `privileges` has been explicitly set.
  public var hasPrivileges: Bool {return _storage._privileges != nil}
  /// Clears the value of `privileges`. Subsequent reads from it will return its default value.
  public mutating func clearPrivileges() {_uniqueStorage()._privileges = nil}

  public var attributesEpoch: UInt64 {
    get {return _storage._attributesEpoch ?? 0}
    set {_uniqueStorage()._attributesEpoch = newValue}
  }
  /// Returns true if `attributesEpoch` has been explicitly set.
  public var hasAttributesEpoch: Bool {return _storage._attributesEpoch != nil}
  /// Clears the value of `attributesEpoch`. Subsequent reads from it will return its default value.
  public mutating func clearAttributesEpoch() {_uniqueStorage()._attributesEpoch = nil}

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_uniqueStorage()._creationTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_FriendOfFriend {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountID: Bgs_Protocol_EntityId {
    get {return _storage._accountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return _storage._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {_uniqueStorage()._accountID = nil}

  public var role: [UInt32] {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  public var privileges: UInt64 {
    get {return _storage._privileges ?? 0}
    set {_uniqueStorage()._privileges = newValue}
  }
  /// Returns true if `privileges` has been explicitly set.
  public var hasPrivileges: Bool {return _storage._privileges != nil}
  /// Clears the value of `privileges`. Subsequent reads from it will return its default value.
  public mutating func clearPrivileges() {_uniqueStorage()._privileges = nil}

  public var fullName: String {
    get {return _storage._fullName ?? String()}
    set {_uniqueStorage()._fullName = newValue}
  }
  /// Returns true if `fullName` has been explicitly set.
  public var hasFullName: Bool {return _storage._fullName != nil}
  /// Clears the value of `fullName`. Subsequent reads from it will return its default value.
  public mutating func clearFullName() {_uniqueStorage()._fullName = nil}

  public var battleTag: String {
    get {return _storage._battleTag ?? String()}
    set {_uniqueStorage()._battleTag = newValue}
  }
  /// Returns true if `battleTag` has been explicitly set.
  public var hasBattleTag: Bool {return _storage._battleTag != nil}
  /// Clears the value of `battleTag`. Subsequent reads from it will return its default value.
  public mutating func clearBattleTag() {_uniqueStorage()._battleTag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_ReceivedInvitation: SwiftProtobuf.ExtensibleMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var inviterIdentity: Bgs_Protocol_Identity {
    get {return _storage._inviterIdentity ?? Bgs_Protocol_Identity()}
    set {_uniqueStorage()._inviterIdentity = newValue}
  }
  /// Returns true if `inviterIdentity` has been explicitly set.
  public var hasInviterIdentity: Bool {return _storage._inviterIdentity != nil}
  /// Clears the value of `inviterIdentity`. Subsequent reads from it will return its default value.
  public mutating func clearInviterIdentity() {_uniqueStorage()._inviterIdentity = nil}

  public var inviteeIdentity: Bgs_Protocol_Identity {
    get {return _storage._inviteeIdentity ?? Bgs_Protocol_Identity()}
    set {_uniqueStorage()._inviteeIdentity = newValue}
  }
  /// Returns true if `inviteeIdentity` has been explicitly set.
  public var hasInviteeIdentity: Bool {return _storage._inviteeIdentity != nil}
  /// Clears the value of `inviteeIdentity`. Subsequent reads from it will return its default value.
  public mutating func clearInviteeIdentity() {_uniqueStorage()._inviteeIdentity = nil}

  public var inviterName: String {
    get {return _storage._inviterName ?? String()}
    set {_uniqueStorage()._inviterName = newValue}
  }
  /// Returns true if `inviterName` has been explicitly set.
  public var hasInviterName: Bool {return _storage._inviterName != nil}
  /// Clears the value of `inviterName`. Subsequent reads from it will return its default value.
  public mutating func clearInviterName() {_uniqueStorage()._inviterName = nil}

  public var inviteeName: String {
    get {return _storage._inviteeName ?? String()}
    set {_uniqueStorage()._inviteeName = newValue}
  }
  /// Returns true if `inviteeName` has been explicitly set.
  public var hasInviteeName: Bool {return _storage._inviteeName != nil}
  /// Clears the value of `inviteeName`. Subsequent reads from it will return its default value.
  public mutating func clearInviteeName() {_uniqueStorage()._inviteeName = nil}

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_uniqueStorage()._creationTime = nil}

  public var program: UInt32 {
    get {return _storage._program ?? 0}
    set {_uniqueStorage()._program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return _storage._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {_uniqueStorage()._program = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var _protobuf_extensionFieldValues = SwiftProtobuf.ExtensionFieldValueSet()
  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_FriendInvitation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var role: [UInt32] = []

  public var attribute: [Bgs_Protocol_Attribute] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Bgs_Protocol_Friends_V1_SentInvitation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var targetName: String {
    get {return _targetName ?? String()}
    set {_targetName = newValue}
  }
  /// Returns true if `targetName` has been explicitly set.
  public var hasTargetName: Bool {return self._targetName != nil}
  /// Clears the value of `targetName`. Subsequent reads from it will return its default value.
  public mutating func clearTargetName() {self._targetName = nil}

  public var role: UInt32 {
    get {return _role ?? 0}
    set {_role = newValue}
  }
  /// Returns true if `role` has been explicitly set.
  public var hasRole: Bool {return self._role != nil}
  /// Clears the value of `role`. Subsequent reads from it will return its default value.
  public mutating func clearRole() {self._role = nil}

  public var attribute: [Bgs_Protocol_Attribute] = []

  public var creationTime: UInt64 {
    get {return _creationTime ?? 0}
    set {_creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return self._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {self._creationTime = nil}

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: UInt64? = nil
  fileprivate var _targetName: String? = nil
  fileprivate var _role: UInt32? = nil
  fileprivate var _creationTime: UInt64? = nil
  fileprivate var _program: UInt32? = nil
}

public struct Bgs_Protocol_Friends_V1_FriendInvitationParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var targetEmail: String {
    get {return _targetEmail ?? String()}
    set {_targetEmail = newValue}
  }
  /// Returns true if `targetEmail` has been explicitly set.
  public var hasTargetEmail: Bool {return self._targetEmail != nil}
  /// Clears the value of `targetEmail`. Subsequent reads from it will return its default value.
  public mutating func clearTargetEmail() {self._targetEmail = nil}

  public var targetBattleTag: String {
    get {return _targetBattleTag ?? String()}
    set {_targetBattleTag = newValue}
  }
  /// Returns true if `targetBattleTag` has been explicitly set.
  public var hasTargetBattleTag: Bool {return self._targetBattleTag != nil}
  /// Clears the value of `targetBattleTag`. Subsequent reads from it will return its default value.
  public mutating func clearTargetBattleTag() {self._targetBattleTag = nil}

  public var role: [UInt32] = []

  public var attribute: [Bgs_Protocol_Attribute] = []

  public var targetName: String {
    get {return _targetName ?? String()}
    set {_targetName = newValue}
  }
  /// Returns true if `targetName` has been explicitly set.
  public var hasTargetName: Bool {return self._targetName != nil}
  /// Clears the value of `targetName`. Subsequent reads from it will return its default value.
  public mutating func clearTargetName() {self._targetName = nil}

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _targetEmail: String? = nil
  fileprivate var _targetBattleTag: String? = nil
  fileprivate var _targetName: String? = nil
  fileprivate var _program: UInt32? = nil
}

public struct Bgs_Protocol_Friends_V1_SubscribeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var maxFriends: UInt32 {
    get {return _maxFriends ?? 0}
    set {_maxFriends = newValue}
  }
  /// Returns true if `maxFriends` has been explicitly set.
  public var hasMaxFriends: Bool {return self._maxFriends != nil}
  /// Clears the value of `maxFriends`. Subsequent reads from it will return its default value.
  public mutating func clearMaxFriends() {self._maxFriends = nil}

  public var maxReceivedInvitations: UInt32 {
    get {return _maxReceivedInvitations ?? 0}
    set {_maxReceivedInvitations = newValue}
  }
  /// Returns true if `maxReceivedInvitations` has been explicitly set.
  public var hasMaxReceivedInvitations: Bool {return self._maxReceivedInvitations != nil}
  /// Clears the value of `maxReceivedInvitations`. Subsequent reads from it will return its default value.
  public mutating func clearMaxReceivedInvitations() {self._maxReceivedInvitations = nil}

  public var maxSentInvitations: UInt32 {
    get {return _maxSentInvitations ?? 0}
    set {_maxSentInvitations = newValue}
  }
  /// Returns true if `maxSentInvitations` has been explicitly set.
  public var hasMaxSentInvitations: Bool {return self._maxSentInvitations != nil}
  /// Clears the value of `maxSentInvitations`. Subsequent reads from it will return its default value.
  public mutating func clearMaxSentInvitations() {self._maxSentInvitations = nil}

  public var role: [Bgs_Protocol_Role] = []

  public var friends: [Bgs_Protocol_Friends_V1_Friend] = []

  public var receivedInvitations: [Bgs_Protocol_Friends_V1_ReceivedInvitation] = []

  public var sentInvitations: [Bgs_Protocol_Friends_V1_SentInvitation] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _maxFriends: UInt32? = nil
  fileprivate var _maxReceivedInvitations: UInt32? = nil
  fileprivate var _maxSentInvitations: UInt32? = nil
}

public struct Bgs_Protocol_Friends_V1_AcceptInvitationOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var role: UInt32 {
    get {return _role ?? 0}
    set {_role = newValue}
  }
  /// Returns true if `role` has been explicitly set.
  public var hasRole: Bool {return self._role != nil}
  /// Clears the value of `role`. Subsequent reads from it will return its default value.
  public mutating func clearRole() {self._role = nil}

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _role: UInt32? = nil
  fileprivate var _program: UInt32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.friends.v1"

extension Bgs_Protocol_Friends_V1_Friend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Friend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "attribute"),
    3: .same(proto: "role"),
    4: .same(proto: "privileges"),
    5: .standard(proto: "attributes_epoch"),
    6: .standard(proto: "creation_time"),
  ]

  fileprivate class _StorageClass {
    var _accountID: Bgs_Protocol_EntityId? = nil
    var _attribute: [Bgs_Protocol_Attribute] = []
    var _role: [UInt32] = []
    var _privileges: UInt64? = nil
    var _attributesEpoch: UInt64? = nil
    var _creationTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountID = source._accountID
      _attribute = source._attribute
      _role = source._role
      _privileges = source._privileges
      _attributesEpoch = source._attributesEpoch
      _creationTime = source._creationTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._accountID == nil {return false}
      if let v = _storage._accountID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._attribute) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._accountID)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 3: try decoder.decodeRepeatedUInt32Field(value: &_storage._role)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._privileges)
        case 5: try decoder.decodeSingularUInt64Field(value: &_storage._attributesEpoch)
        case 6: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 2)
      }
      if !_storage._role.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._role, fieldNumber: 3)
      }
      if let v = _storage._privileges {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._attributesEpoch {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_Friend, rhs: Bgs_Protocol_Friends_V1_Friend) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._role != rhs_storage._role {return false}
        if _storage._privileges != rhs_storage._privileges {return false}
        if _storage._attributesEpoch != rhs_storage._attributesEpoch {return false}
        if _storage._creationTime != rhs_storage._creationTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_FriendOfFriend: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FriendOfFriend"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    3: .same(proto: "role"),
    4: .same(proto: "privileges"),
    6: .standard(proto: "full_name"),
    7: .standard(proto: "battle_tag"),
  ]

  fileprivate class _StorageClass {
    var _accountID: Bgs_Protocol_EntityId? = nil
    var _role: [UInt32] = []
    var _privileges: UInt64? = nil
    var _fullName: String? = nil
    var _battleTag: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountID = source._accountID
      _role = source._role
      _privileges = source._privileges
      _fullName = source._fullName
      _battleTag = source._battleTag
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._accountID)
        case 3: try decoder.decodeRepeatedUInt32Field(value: &_storage._role)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._privileges)
        case 6: try decoder.decodeSingularStringField(value: &_storage._fullName)
        case 7: try decoder.decodeSingularStringField(value: &_storage._battleTag)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._role.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._role, fieldNumber: 3)
      }
      if let v = _storage._privileges {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._fullName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._battleTag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_FriendOfFriend, rhs: Bgs_Protocol_Friends_V1_FriendOfFriend) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._role != rhs_storage._role {return false}
        if _storage._privileges != rhs_storage._privileges {return false}
        if _storage._fullName != rhs_storage._fullName {return false}
        if _storage._battleTag != rhs_storage._battleTag {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_ReceivedInvitation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReceivedInvitation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "inviter_identity"),
    3: .standard(proto: "invitee_identity"),
    4: .standard(proto: "inviter_name"),
    5: .standard(proto: "invitee_name"),
    7: .standard(proto: "creation_time"),
    9: .same(proto: "program"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64? = nil
    var _inviterIdentity: Bgs_Protocol_Identity? = nil
    var _inviteeIdentity: Bgs_Protocol_Identity? = nil
    var _inviterName: String? = nil
    var _inviteeName: String? = nil
    var _creationTime: UInt64? = nil
    var _program: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _inviterIdentity = source._inviterIdentity
      _inviteeIdentity = source._inviteeIdentity
      _inviterName = source._inviterName
      _inviteeName = source._inviteeName
      _creationTime = source._creationTime
      _program = source._program
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    if !_protobuf_extensionFieldValues.isInitialized {return false}
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id == nil {return false}
      if _storage._inviterIdentity == nil {return false}
      if _storage._inviteeIdentity == nil {return false}
      if let v = _storage._inviterIdentity, !v.isInitialized {return false}
      if let v = _storage._inviteeIdentity, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFixed64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._inviterIdentity)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._inviteeIdentity)
        case 4: try decoder.decodeSingularStringField(value: &_storage._inviterName)
        case 5: try decoder.decodeSingularStringField(value: &_storage._inviteeName)
        case 7: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        case 9: try decoder.decodeSingularFixed32Field(value: &_storage._program)
        case 100..<10001:
          try decoder.decodeExtensionField(values: &_protobuf_extensionFieldValues, messageType: Bgs_Protocol_Friends_V1_ReceivedInvitation.self, fieldNumber: fieldNumber)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._inviterIdentity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._inviteeIdentity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._inviterName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if let v = _storage._inviteeName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._program {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 9)
      }
      try visitor.visitExtensionFields(fields: _protobuf_extensionFieldValues, start: 100, end: 10001)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_ReceivedInvitation, rhs: Bgs_Protocol_Friends_V1_ReceivedInvitation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._inviterIdentity != rhs_storage._inviterIdentity {return false}
        if _storage._inviteeIdentity != rhs_storage._inviteeIdentity {return false}
        if _storage._inviterName != rhs_storage._inviterName {return false}
        if _storage._inviteeName != rhs_storage._inviteeName {return false}
        if _storage._creationTime != rhs_storage._creationTime {return false}
        if _storage._program != rhs_storage._program {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    if lhs._protobuf_extensionFieldValues != rhs._protobuf_extensionFieldValues {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_FriendInvitation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FriendInvitation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "role"),
    3: .same(proto: "attribute"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.attribute) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.role)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.attribute)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.role.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.role, fieldNumber: 2)
    }
    if !self.attribute.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attribute, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_FriendInvitation, rhs: Bgs_Protocol_Friends_V1_FriendInvitation) -> Bool {
    if lhs.role != rhs.role {return false}
    if lhs.attribute != rhs.attribute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_SentInvitation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SentInvitation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "target_name"),
    3: .same(proto: "role"),
    4: .same(proto: "attribute"),
    5: .standard(proto: "creation_time"),
    6: .same(proto: "program"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.attribute) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed64Field(value: &self._id)
      case 2: try decoder.decodeSingularStringField(value: &self._targetName)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._role)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.attribute)
      case 5: try decoder.decodeSingularUInt64Field(value: &self._creationTime)
      case 6: try decoder.decodeSingularFixed32Field(value: &self._program)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
    }
    if let v = self._targetName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._role {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if !self.attribute.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attribute, fieldNumber: 4)
    }
    if let v = self._creationTime {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
    }
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_SentInvitation, rhs: Bgs_Protocol_Friends_V1_SentInvitation) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._targetName != rhs._targetName {return false}
    if lhs._role != rhs._role {return false}
    if lhs.attribute != rhs.attribute {return false}
    if lhs._creationTime != rhs._creationTime {return false}
    if lhs._program != rhs._program {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_FriendInvitationParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FriendInvitationParams"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_email"),
    2: .standard(proto: "target_battle_tag"),
    6: .same(proto: "role"),
    8: .same(proto: "attribute"),
    9: .standard(proto: "target_name"),
    10: .same(proto: "program"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.attribute) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._targetEmail)
      case 2: try decoder.decodeSingularStringField(value: &self._targetBattleTag)
      case 6: try decoder.decodeRepeatedUInt32Field(value: &self.role)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.attribute)
      case 9: try decoder.decodeSingularStringField(value: &self._targetName)
      case 10: try decoder.decodeSingularFixed32Field(value: &self._program)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._targetEmail {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._targetBattleTag {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.role.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.role, fieldNumber: 6)
    }
    if !self.attribute.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attribute, fieldNumber: 8)
    }
    if let v = self._targetName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_FriendInvitationParams, rhs: Bgs_Protocol_Friends_V1_FriendInvitationParams) -> Bool {
    if lhs._targetEmail != rhs._targetEmail {return false}
    if lhs._targetBattleTag != rhs._targetBattleTag {return false}
    if lhs.role != rhs.role {return false}
    if lhs.attribute != rhs.attribute {return false}
    if lhs._targetName != rhs._targetName {return false}
    if lhs._program != rhs._program {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_SubscribeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_friends"),
    2: .standard(proto: "max_received_invitations"),
    3: .standard(proto: "max_sent_invitations"),
    4: .same(proto: "role"),
    5: .same(proto: "friends"),
    7: .standard(proto: "received_invitations"),
    8: .standard(proto: "sent_invitations"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.role) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.friends) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.receivedInvitations) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.sentInvitations) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._maxFriends)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._maxReceivedInvitations)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._maxSentInvitations)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.role)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.friends)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.receivedInvitations)
      case 8: try decoder.decodeRepeatedMessageField(value: &self.sentInvitations)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._maxFriends {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._maxReceivedInvitations {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._maxSentInvitations {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if !self.role.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.role, fieldNumber: 4)
    }
    if !self.friends.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.friends, fieldNumber: 5)
    }
    if !self.receivedInvitations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.receivedInvitations, fieldNumber: 7)
    }
    if !self.sentInvitations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sentInvitations, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_SubscribeResponse, rhs: Bgs_Protocol_Friends_V1_SubscribeResponse) -> Bool {
    if lhs._maxFriends != rhs._maxFriends {return false}
    if lhs._maxReceivedInvitations != rhs._maxReceivedInvitations {return false}
    if lhs._maxSentInvitations != rhs._maxSentInvitations {return false}
    if lhs.role != rhs.role {return false}
    if lhs.friends != rhs.friends {return false}
    if lhs.receivedInvitations != rhs.receivedInvitations {return false}
    if lhs.sentInvitations != rhs.sentInvitations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_AcceptInvitationOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcceptInvitationOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "role"),
    2: .same(proto: "program"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._role)
      case 2: try decoder.decodeSingularFixed32Field(value: &self._program)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._role {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_AcceptInvitationOptions, rhs: Bgs_Protocol_Friends_V1_AcceptInvitationOptions) -> Bool {
    if lhs._role != rhs._role {return false}
    if lhs._program != rhs._program {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
