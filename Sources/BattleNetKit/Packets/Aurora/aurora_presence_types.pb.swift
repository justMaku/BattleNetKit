// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/presence_types.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Presence_V1_RichPresenceLocalizationKey: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".RichPresenceLocalizationKey"

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var stream: UInt32 {
    get {return _stream ?? 0}
    set {_stream = newValue}
  }
  /// Returns true if `stream` has been explicitly set.
  public var hasStream: Bool {return self._stream != nil}
  /// Clears the value of `stream`. Subsequent reads from it will return its default value.
  public mutating func clearStream() {self._stream = nil}

  public var localizationID: UInt32 {
    get {return _localizationID ?? 0}
    set {_localizationID = newValue}
  }
  /// Returns true if `localizationID` has been explicitly set.
  public var hasLocalizationID: Bool {return self._localizationID != nil}
  /// Clears the value of `localizationID`. Subsequent reads from it will return its default value.
  public mutating func clearLocalizationID() {self._localizationID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if self._program == nil {return false}
    if self._stream == nil {return false}
    if self._localizationID == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._program)
      case 2: try decoder.decodeSingularFixed32Field(value: &self._stream)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._localizationID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    if let v = self._stream {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    if let v = self._localizationID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _program: UInt32? = nil
  fileprivate var _stream: UInt32? = nil
  fileprivate var _localizationID: UInt32? = nil
}

public struct Bgs_Protocol_Presence_V1_FieldKey: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FieldKey"

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var group: UInt32 {
    get {return _group ?? 0}
    set {_group = newValue}
  }
  /// Returns true if `group` has been explicitly set.
  public var hasGroup: Bool {return self._group != nil}
  /// Clears the value of `group`. Subsequent reads from it will return its default value.
  public mutating func clearGroup() {self._group = nil}

  public var field: UInt32 {
    get {return _field ?? 0}
    set {_field = newValue}
  }
  /// Returns true if `field` has been explicitly set.
  public var hasField: Bool {return self._field != nil}
  /// Clears the value of `field`. Subsequent reads from it will return its default value.
  public mutating func clearField() {self._field = nil}

  public var uniqueID: UInt64 {
    get {return _uniqueID ?? 0}
    set {_uniqueID = newValue}
  }
  /// Returns true if `uniqueID` has been explicitly set.
  public var hasUniqueID: Bool {return self._uniqueID != nil}
  /// Clears the value of `uniqueID`. Subsequent reads from it will return its default value.
  public mutating func clearUniqueID() {self._uniqueID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if self._program == nil {return false}
    if self._group == nil {return false}
    if self._field == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._program)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._group)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._field)
      case 4: try decoder.decodeSingularUInt64Field(value: &self._uniqueID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._program {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._group {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._field {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._uniqueID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _program: UInt32? = nil
  fileprivate var _group: UInt32? = nil
  fileprivate var _field: UInt32? = nil
  fileprivate var _uniqueID: UInt64? = nil
}

public struct Bgs_Protocol_Presence_V1_Field: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Field"

  public var key: Bgs_Protocol_Presence_V1_FieldKey {
    get {return _storage._key ?? Bgs_Protocol_Presence_V1_FieldKey()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_storage._key = nil}

  public var value: Bgs_Protocol_Variant {
    get {return _storage._value ?? Bgs_Protocol_Variant()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._key == nil {return false}
      if _storage._value == nil {return false}
      if let v = _storage._key, !v.isInitialized {return false}
      if let v = _storage._value, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Presence_V1_FieldOperation: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FieldOperation"

  public var field: Bgs_Protocol_Presence_V1_Field {
    get {return _storage._field ?? Bgs_Protocol_Presence_V1_Field()}
    set {_uniqueStorage()._field = newValue}
  }
  /// Returns true if `field` has been explicitly set.
  public var hasField: Bool {return _storage._field != nil}
  /// Clears the value of `field`. Subsequent reads from it will return its default value.
  public mutating func clearField() {_storage._field = nil}

  public var operation: Bgs_Protocol_Presence_V1_FieldOperation.OperationType {
    get {return _storage._operation ?? .set}
    set {_uniqueStorage()._operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  public var hasOperation: Bool {return _storage._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  public mutating func clearOperation() {_storage._operation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OperationType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case set // = 0
    case clear // = 1

    public init() {
      self = .set
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .set
      case 1: self = .clear
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .set: return 0
      case .clear: return 1
      }
    }

  }

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._field == nil {return false}
      if let v = _storage._field, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._field)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._operation)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._field {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._operation {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Presence_V1_PresenceState: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".PresenceState"

  public var entityID: Bgs_Protocol_EntityId {
    get {return _storage._entityID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._entityID = newValue}
  }
  /// Returns true if `entityID` has been explicitly set.
  public var hasEntityID: Bool {return _storage._entityID != nil}
  /// Clears the value of `entityID`. Subsequent reads from it will return its default value.
  public mutating func clearEntityID() {_storage._entityID = nil}

  public var fieldOperation: [Bgs_Protocol_Presence_V1_FieldOperation] {
    get {return _storage._fieldOperation}
    set {_uniqueStorage()._fieldOperation = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._entityID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._fieldOperation) {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._entityID)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._fieldOperation)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._entityID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._fieldOperation.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._fieldOperation, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Presence_V1_ChannelState: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ChannelState"

  public var entityID: Bgs_Protocol_EntityId {
    get {return _storage._entityID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._entityID = newValue}
  }
  /// Returns true if `entityID` has been explicitly set.
  public var hasEntityID: Bool {return _storage._entityID != nil}
  /// Clears the value of `entityID`. Subsequent reads from it will return its default value.
  public mutating func clearEntityID() {_storage._entityID = nil}

  public var fieldOperation: [Bgs_Protocol_Presence_V1_FieldOperation] {
    get {return _storage._fieldOperation}
    set {_uniqueStorage()._fieldOperation = newValue}
  }

  public var healing: Bool {
    get {return _storage._healing ?? false}
    set {_uniqueStorage()._healing = newValue}
  }
  /// Returns true if `healing` has been explicitly set.
  public var hasHealing: Bool {return _storage._healing != nil}
  /// Clears the value of `healing`. Subsequent reads from it will return its default value.
  public mutating func clearHealing() {_storage._healing = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._entityID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._fieldOperation) {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._entityID)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._fieldOperation)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._healing)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._entityID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._fieldOperation.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._fieldOperation, fieldNumber: 2)
      }
      if let v = _storage._healing {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.presence.v1"

extension Bgs_Protocol_Presence_V1_RichPresenceLocalizationKey: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "program"),
    2: .same(proto: "stream"),
    3: .standard(proto: "localization_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Presence_V1_RichPresenceLocalizationKey) -> Bool {
    if self._program != other._program {return false}
    if self._stream != other._stream {return false}
    if self._localizationID != other._localizationID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Presence_V1_FieldKey: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "program"),
    2: .same(proto: "group"),
    3: .same(proto: "field"),
    4: .standard(proto: "unique_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Presence_V1_FieldKey) -> Bool {
    if self._program != other._program {return false}
    if self._group != other._group {return false}
    if self._field != other._field {return false}
    if self._uniqueID != other._uniqueID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Presence_V1_Field: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _key: Bgs_Protocol_Presence_V1_FieldKey? = nil
    var _value: Bgs_Protocol_Variant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Presence_V1_Field) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._key != other_storage._key {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Presence_V1_FieldOperation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "field"),
    2: .same(proto: "operation"),
  ]

  fileprivate class _StorageClass {
    var _field: Bgs_Protocol_Presence_V1_Field? = nil
    var _operation: Bgs_Protocol_Presence_V1_FieldOperation.OperationType? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _field = source._field
      _operation = source._operation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Presence_V1_FieldOperation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._field != other_storage._field {return false}
        if _storage._operation != other_storage._operation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Presence_V1_FieldOperation.OperationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SET"),
    1: .same(proto: "CLEAR"),
  ]
}

extension Bgs_Protocol_Presence_V1_PresenceState: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_id"),
    2: .standard(proto: "field_operation"),
  ]

  fileprivate class _StorageClass {
    var _entityID: Bgs_Protocol_EntityId? = nil
    var _fieldOperation: [Bgs_Protocol_Presence_V1_FieldOperation] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _entityID = source._entityID
      _fieldOperation = source._fieldOperation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Presence_V1_PresenceState) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._entityID != other_storage._entityID {return false}
        if _storage._fieldOperation != other_storage._fieldOperation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Presence_V1_ChannelState: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_id"),
    2: .standard(proto: "field_operation"),
    3: .same(proto: "healing"),
  ]

  fileprivate class _StorageClass {
    var _entityID: Bgs_Protocol_EntityId? = nil
    var _fieldOperation: [Bgs_Protocol_Presence_V1_FieldOperation] = []
    var _healing: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _entityID = source._entityID
      _fieldOperation = source._fieldOperation
      _healing = source._healing
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Presence_V1_ChannelState) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._entityID != other_storage._entityID {return false}
        if _storage._fieldOperation != other_storage._fieldOperation {return false}
        if _storage._healing != other_storage._healing {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
