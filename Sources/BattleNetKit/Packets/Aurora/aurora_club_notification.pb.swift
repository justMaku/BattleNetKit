// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/club_notification.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Club_V1_SubscribeNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var club: Bgs_Protocol_Club_V1_Club {
    get {return _storage._club ?? Bgs_Protocol_Club_V1_Club()}
    set {_uniqueStorage()._club = newValue}
  }
  /// Returns true if `club` has been explicitly set.
  public var hasClub: Bool {return _storage._club != nil}
  /// Clears the value of `club`. Subsequent reads from it will return its default value.
  public mutating func clearClub() {_uniqueStorage()._club = nil}

  public var view: Bgs_Protocol_Club_V1_ClubView {
    get {return _storage._view ?? Bgs_Protocol_Club_V1_ClubView()}
    set {_uniqueStorage()._view = newValue}
  }
  /// Returns true if `view` has been explicitly set.
  public var hasView: Bool {return _storage._view != nil}
  /// Clears the value of `view`. Subsequent reads from it will return its default value.
  public mutating func clearView() {_uniqueStorage()._view = nil}

  public var settings: Bgs_Protocol_Club_V1_ClubSettings {
    get {return _storage._settings ?? Bgs_Protocol_Club_V1_ClubSettings()}
    set {_uniqueStorage()._settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  public var hasSettings: Bool {return _storage._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  public mutating func clearSettings() {_uniqueStorage()._settings = nil}

  public var member: Bgs_Protocol_Club_V1_Member {
    get {return _storage._member ?? Bgs_Protocol_Club_V1_Member()}
    set {_uniqueStorage()._member = newValue}
  }
  /// Returns true if `member` has been explicitly set.
  public var hasMember: Bool {return _storage._member != nil}
  /// Clears the value of `member`. Subsequent reads from it will return its default value.
  public mutating func clearMember() {_uniqueStorage()._member = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_UnsubscribeNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StateChangedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var assignment: Bgs_Protocol_Club_V1_ClubStateAssignment {
    get {return _storage._assignment ?? Bgs_Protocol_Club_V1_ClubStateAssignment()}
    set {_uniqueStorage()._assignment = newValue}
  }
  /// Returns true if `assignment` has been explicitly set.
  public var hasAssignment: Bool {return _storage._assignment != nil}
  /// Clears the value of `assignment`. Subsequent reads from it will return its default value.
  public mutating func clearAssignment() {_uniqueStorage()._assignment = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_SettingsChangedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var assignment: Bgs_Protocol_Club_V1_ClubSettingsAssignment {
    get {return _storage._assignment ?? Bgs_Protocol_Club_V1_ClubSettingsAssignment()}
    set {_uniqueStorage()._assignment = newValue}
  }
  /// Returns true if `assignment` has been explicitly set.
  public var hasAssignment: Bool {return _storage._assignment != nil}
  /// Clears the value of `assignment`. Subsequent reads from it will return its default value.
  public mutating func clearAssignment() {_uniqueStorage()._assignment = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_MemberAddedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var member: [Bgs_Protocol_Club_V1_Member] {
    get {return _storage._member}
    set {_uniqueStorage()._member = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_MemberRemovedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var member: [Bgs_Protocol_Club_V1_MemberRemovedAssignment] {
    get {return _storage._member}
    set {_uniqueStorage()._member = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_MemberStateChangedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var assignment: [Bgs_Protocol_Club_V1_MemberStateAssignment] {
    get {return _storage._assignment}
    set {_uniqueStorage()._assignment = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_SubscriberStateChangedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var assignment: [Bgs_Protocol_Club_V1_SubscriberStateAssignment] {
    get {return _storage._assignment}
    set {_uniqueStorage()._assignment = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_MemberRoleChangedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var assignment: [Bgs_Protocol_Club_V1_RoleAssignment] {
    get {return _storage._assignment}
    set {_uniqueStorage()._assignment = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_InvitationAddedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var invitation: Bgs_Protocol_Club_V1_ClubInvitation {
    get {return _storage._invitation ?? Bgs_Protocol_Club_V1_ClubInvitation()}
    set {_uniqueStorage()._invitation = newValue}
  }
  /// Returns true if `invitation` has been explicitly set.
  public var hasInvitation: Bool {return _storage._invitation != nil}
  /// Clears the value of `invitation`. Subsequent reads from it will return its default value.
  public mutating func clearInvitation() {_uniqueStorage()._invitation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_InvitationRemovedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var invitationID: UInt64 {
    get {return _storage._invitationID ?? 0}
    set {_uniqueStorage()._invitationID = newValue}
  }
  /// Returns true if `invitationID` has been explicitly set.
  public var hasInvitationID: Bool {return _storage._invitationID != nil}
  /// Clears the value of `invitationID`. Subsequent reads from it will return its default value.
  public mutating func clearInvitationID() {_uniqueStorage()._invitationID = nil}

  public var reason: Bgs_Protocol_InvitationRemovedReason {
    get {return _storage._reason ?? .accepted}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_uniqueStorage()._reason = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_SuggestionAddedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var suggestion: Bgs_Protocol_Club_V1_ClubSuggestion {
    get {return _storage._suggestion ?? Bgs_Protocol_Club_V1_ClubSuggestion()}
    set {_uniqueStorage()._suggestion = newValue}
  }
  /// Returns true if `suggestion` has been explicitly set.
  public var hasSuggestion: Bool {return _storage._suggestion != nil}
  /// Clears the value of `suggestion`. Subsequent reads from it will return its default value.
  public mutating func clearSuggestion() {_uniqueStorage()._suggestion = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_SuggestionRemovedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var suggestionID: UInt64 {
    get {return _storage._suggestionID ?? 0}
    set {_uniqueStorage()._suggestionID = newValue}
  }
  /// Returns true if `suggestionID` has been explicitly set.
  public var hasSuggestionID: Bool {return _storage._suggestionID != nil}
  /// Clears the value of `suggestionID`. Subsequent reads from it will return its default value.
  public mutating func clearSuggestionID() {_uniqueStorage()._suggestionID = nil}

  public var reason: Bgs_Protocol_SuggestionRemovedReason {
    get {return _storage._reason ?? .approved}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_uniqueStorage()._reason = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamAddedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var stream: Bgs_Protocol_Club_V1_Stream {
    get {return _storage._stream ?? Bgs_Protocol_Club_V1_Stream()}
    set {_uniqueStorage()._stream = newValue}
  }
  /// Returns true if `stream` has been explicitly set.
  public var hasStream: Bool {return _storage._stream != nil}
  /// Clears the value of `stream`. Subsequent reads from it will return its default value.
  public mutating func clearStream() {_uniqueStorage()._stream = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamRemovedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var streamID: UInt64 {
    get {return _storage._streamID ?? 0}
    set {_uniqueStorage()._streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return _storage._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {_uniqueStorage()._streamID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamStateChangedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var streamID: UInt64 {
    get {return _storage._streamID ?? 0}
    set {_uniqueStorage()._streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return _storage._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {_uniqueStorage()._streamID = nil}

  public var assignment: Bgs_Protocol_Club_V1_StreamStateAssignment {
    get {return _storage._assignment ?? Bgs_Protocol_Club_V1_StreamStateAssignment()}
    set {_uniqueStorage()._assignment = newValue}
  }
  /// Returns true if `assignment` has been explicitly set.
  public var hasAssignment: Bool {return _storage._assignment != nil}
  /// Clears the value of `assignment`. Subsequent reads from it will return its default value.
  public mutating func clearAssignment() {_uniqueStorage()._assignment = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamMessageAddedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var streamID: UInt64 {
    get {return _storage._streamID ?? 0}
    set {_uniqueStorage()._streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return _storage._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {_uniqueStorage()._streamID = nil}

  public var message: Bgs_Protocol_Club_V1_StreamMessage {
    get {return _storage._message ?? Bgs_Protocol_Club_V1_StreamMessage()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {_uniqueStorage()._message = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamMessageUpdatedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var streamID: UInt64 {
    get {return _storage._streamID ?? 0}
    set {_uniqueStorage()._streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return _storage._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {_uniqueStorage()._streamID = nil}

  public var message: Bgs_Protocol_Club_V1_StreamMessage {
    get {return _storage._message ?? Bgs_Protocol_Club_V1_StreamMessage()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {_uniqueStorage()._message = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamTypingIndicatorNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var streamID: UInt64 {
    get {return _storage._streamID ?? 0}
    set {_uniqueStorage()._streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return _storage._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {_uniqueStorage()._streamID = nil}

  public var indicator: [Bgs_Protocol_Club_V1_StreamTypingIndicator] {
    get {return _storage._indicator}
    set {_uniqueStorage()._indicator = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamUnreadIndicatorNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var event: Bgs_Protocol_Club_V1_StreamEventTime {
    get {return _storage._event ?? Bgs_Protocol_Club_V1_StreamEventTime()}
    set {_uniqueStorage()._event = newValue}
  }
  /// Returns true if `event` has been explicitly set.
  public var hasEvent: Bool {return _storage._event != nil}
  /// Clears the value of `event`. Subsequent reads from it will return its default value.
  public mutating func clearEvent() {_uniqueStorage()._event = nil}

  public var message: Bgs_Protocol_Club_V1_StreamMessage {
    get {return _storage._message ?? Bgs_Protocol_Club_V1_StreamMessage()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {_uniqueStorage()._message = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_StreamAdvanceViewTimeNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var view: [Bgs_Protocol_Club_V1_StreamAdvanceViewTime] {
    get {return _storage._view}
    set {_uniqueStorage()._view = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.club.v1"

extension Bgs_Protocol_Club_V1_SubscribeNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .same(proto: "club"),
    5: .same(proto: "view"),
    10: .same(proto: "settings"),
    11: .same(proto: "member"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _club: Bgs_Protocol_Club_V1_Club? = nil
    var _view: Bgs_Protocol_Club_V1_ClubView? = nil
    var _settings: Bgs_Protocol_Club_V1_ClubSettings? = nil
    var _member: Bgs_Protocol_Club_V1_Member? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _club = source._club
      _view = source._view
      _settings = source._settings
      _member = source._member
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._club, !v.isInitialized {return false}
      if let v = _storage._member, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._club)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._view)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._settings)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._member)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._club {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._view {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._member {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_SubscribeNotification, rhs: Bgs_Protocol_Club_V1_SubscribeNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._club != rhs_storage._club {return false}
        if _storage._view != rhs_storage._view {return false}
        if _storage._settings != rhs_storage._settings {return false}
        if _storage._member != rhs_storage._member {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_UnsubscribeNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnsubscribeNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_UnsubscribeNotification, rhs: Bgs_Protocol_Club_V1_UnsubscribeNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StateChangedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StateChangedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    5: .same(proto: "assignment"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _assignment: Bgs_Protocol_Club_V1_ClubStateAssignment? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _assignment = source._assignment
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._assignment, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._assignment)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._assignment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_StateChangedNotification, rhs: Bgs_Protocol_Club_V1_StateChangedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._assignment != rhs_storage._assignment {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_SettingsChangedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SettingsChangedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .same(proto: "assignment"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _assignment: Bgs_Protocol_Club_V1_ClubSettingsAssignment? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _assignment = source._assignment
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._assignment)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._assignment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_SettingsChangedNotification, rhs: Bgs_Protocol_Club_V1_SettingsChangedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._assignment != rhs_storage._assignment {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MemberAddedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberAddedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .same(proto: "member"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _member: [Bgs_Protocol_Club_V1_Member] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _member = source._member
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._member) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._member)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if !_storage._member.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._member, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_MemberAddedNotification, rhs: Bgs_Protocol_Club_V1_MemberAddedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._member != rhs_storage._member {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MemberRemovedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberRemovedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .same(proto: "member"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _member: [Bgs_Protocol_Club_V1_MemberRemovedAssignment] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _member = source._member
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._member) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._member)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if !_storage._member.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._member, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_MemberRemovedNotification, rhs: Bgs_Protocol_Club_V1_MemberRemovedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._member != rhs_storage._member {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MemberStateChangedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberStateChangedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .same(proto: "assignment"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _assignment: [Bgs_Protocol_Club_V1_MemberStateAssignment] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _assignment = source._assignment
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._assignment) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._assignment)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if !_storage._assignment.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._assignment, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_MemberStateChangedNotification, rhs: Bgs_Protocol_Club_V1_MemberStateChangedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._assignment != rhs_storage._assignment {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_SubscriberStateChangedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberStateChangedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .same(proto: "assignment"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _assignment: [Bgs_Protocol_Club_V1_SubscriberStateAssignment] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _assignment = source._assignment
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._assignment) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._assignment)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if !_storage._assignment.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._assignment, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_SubscriberStateChangedNotification, rhs: Bgs_Protocol_Club_V1_SubscriberStateChangedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._assignment != rhs_storage._assignment {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MemberRoleChangedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberRoleChangedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .same(proto: "assignment"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _assignment: [Bgs_Protocol_Club_V1_RoleAssignment] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _assignment = source._assignment
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._assignment) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._assignment)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if !_storage._assignment.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._assignment, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_MemberRoleChangedNotification, rhs: Bgs_Protocol_Club_V1_MemberRoleChangedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._assignment != rhs_storage._assignment {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_InvitationAddedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InvitationAddedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .same(proto: "invitation"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _invitation: Bgs_Protocol_Club_V1_ClubInvitation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _invitation = source._invitation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._invitation, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._invitation)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._invitation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_InvitationAddedNotification, rhs: Bgs_Protocol_Club_V1_InvitationAddedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._invitation != rhs_storage._invitation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_InvitationRemovedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InvitationRemovedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .standard(proto: "invitation_id"),
    5: .same(proto: "reason"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _invitationID: UInt64? = nil
    var _reason: Bgs_Protocol_InvitationRemovedReason? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _invitationID = source._invitationID
      _reason = source._reason
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularFixed64Field(value: &_storage._invitationID)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._reason)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._invitationID {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._reason {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_InvitationRemovedNotification, rhs: Bgs_Protocol_Club_V1_InvitationRemovedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._invitationID != rhs_storage._invitationID {return false}
        if _storage._reason != rhs_storage._reason {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_SuggestionAddedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SuggestionAddedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .same(proto: "suggestion"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _suggestion: Bgs_Protocol_Club_V1_ClubSuggestion? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _suggestion = source._suggestion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._suggestion, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._suggestion)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._suggestion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_SuggestionAddedNotification, rhs: Bgs_Protocol_Club_V1_SuggestionAddedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._suggestion != rhs_storage._suggestion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_SuggestionRemovedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SuggestionRemovedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .standard(proto: "suggestion_id"),
    5: .same(proto: "reason"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _suggestionID: UInt64? = nil
    var _reason: Bgs_Protocol_SuggestionRemovedReason? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _suggestionID = source._suggestionID
      _reason = source._reason
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularFixed64Field(value: &_storage._suggestionID)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._reason)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._suggestionID {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._reason {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_SuggestionRemovedNotification, rhs: Bgs_Protocol_Club_V1_SuggestionRemovedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._suggestionID != rhs_storage._suggestionID {return false}
        if _storage._reason != rhs_storage._reason {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamAddedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamAddedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .same(proto: "stream"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _stream: Bgs_Protocol_Club_V1_Stream? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _stream = source._stream
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._stream)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._stream {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_StreamAddedNotification, rhs: Bgs_Protocol_Club_V1_StreamAddedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._stream != rhs_storage._stream {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamRemovedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamRemovedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .standard(proto: "stream_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _streamID: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _streamID = source._streamID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._streamID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._streamID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_StreamRemovedNotification, rhs: Bgs_Protocol_Club_V1_StreamRemovedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._streamID != rhs_storage._streamID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamStateChangedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamStateChangedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .standard(proto: "stream_id"),
    5: .same(proto: "assignment"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _streamID: UInt64? = nil
    var _assignment: Bgs_Protocol_Club_V1_StreamStateAssignment? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _streamID = source._streamID
      _assignment = source._assignment
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._streamID)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._assignment)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._streamID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._assignment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_StreamStateChangedNotification, rhs: Bgs_Protocol_Club_V1_StreamStateChangedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._streamID != rhs_storage._streamID {return false}
        if _storage._assignment != rhs_storage._assignment {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamMessageAddedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamMessageAddedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .standard(proto: "stream_id"),
    5: .same(proto: "message"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _streamID: UInt64? = nil
    var _message: Bgs_Protocol_Club_V1_StreamMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _streamID = source._streamID
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._message, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._streamID)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._message)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._streamID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_StreamMessageAddedNotification, rhs: Bgs_Protocol_Club_V1_StreamMessageAddedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._streamID != rhs_storage._streamID {return false}
        if _storage._message != rhs_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamMessageUpdatedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamMessageUpdatedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .standard(proto: "stream_id"),
    5: .same(proto: "message"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _streamID: UInt64? = nil
    var _message: Bgs_Protocol_Club_V1_StreamMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _streamID = source._streamID
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._message, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._streamID)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._message)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._streamID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_StreamMessageUpdatedNotification, rhs: Bgs_Protocol_Club_V1_StreamMessageUpdatedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._streamID != rhs_storage._streamID {return false}
        if _storage._message != rhs_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamTypingIndicatorNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamTypingIndicatorNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .standard(proto: "stream_id"),
    5: .same(proto: "indicator"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _streamID: UInt64? = nil
    var _indicator: [Bgs_Protocol_Club_V1_StreamTypingIndicator] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _streamID = source._streamID
      _indicator = source._indicator
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._indicator) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._streamID)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._indicator)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._streamID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if !_storage._indicator.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._indicator, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_StreamTypingIndicatorNotification, rhs: Bgs_Protocol_Club_V1_StreamTypingIndicatorNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._streamID != rhs_storage._streamID {return false}
        if _storage._indicator != rhs_storage._indicator {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamUnreadIndicatorNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamUnreadIndicatorNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .same(proto: "event"),
    5: .same(proto: "message"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _event: Bgs_Protocol_Club_V1_StreamEventTime? = nil
    var _message: Bgs_Protocol_Club_V1_StreamMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _event = source._event
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._message, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._event)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._message)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_StreamUnreadIndicatorNotification, rhs: Bgs_Protocol_Club_V1_StreamUnreadIndicatorNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._event != rhs_storage._event {return false}
        if _storage._message != rhs_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_StreamAdvanceViewTimeNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamAdvanceViewTimeNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "club_id"),
    4: .same(proto: "view"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _view: [Bgs_Protocol_Club_V1_StreamAdvanceViewTime] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _clubID = source._clubID
      _view = source._view
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._view)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
      if !_storage._view.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._view, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_StreamAdvanceViewTimeNotification, rhs: Bgs_Protocol_Club_V1_StreamAdvanceViewTimeNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._view != rhs_storage._view {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
