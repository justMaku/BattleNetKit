// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: AccountState.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum IdentityVerificationStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case identNoData // = 0
  case identPending // = 1
  case identFailed // = 4
  case identSuccess // = 5
  case identSuccMnl // = 6
  case identUnknown // = 7

  public init() {
    self = .identNoData
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .identNoData
    case 1: self = .identPending
    case 4: self = .identFailed
    case 5: self = .identSuccess
    case 6: self = .identSuccMnl
    case 7: self = .identUnknown
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .identNoData: return 0
    case .identPending: return 1
    case .identFailed: return 4
    case .identSuccess: return 5
    case .identSuccMnl: return 6
    case .identUnknown: return 7
    }
  }

}

public struct GenerateWebCredentialsRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = "GenerateWebCredentialsRequest"

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._program)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _program: UInt32? = nil
}

public struct GenerateWebCredentialsResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = "GenerateWebCredentialsResponse"

  public var webCredentials: Data {
    get {return _webCredentials ?? SwiftProtobuf.Internal.emptyData}
    set {_webCredentials = newValue}
  }
  /// Returns true if `webCredentials` has been explicitly set.
  public var hasWebCredentials: Bool {return self._webCredentials != nil}
  /// Clears the value of `webCredentials`. Subsequent reads from it will return its default value.
  public mutating func clearWebCredentials() {self._webCredentials = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._webCredentials)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._webCredentials {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _webCredentials: Data? = nil
}

public struct GenerateSSOTokenRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = "GenerateSSOTokenRequest"

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._program)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _program: UInt32? = nil
}

public struct GenerateSSOTokenResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = "GenerateSSOTokenResponse"

  public var ssoID: Data {
    get {return _ssoID ?? SwiftProtobuf.Internal.emptyData}
    set {_ssoID = newValue}
  }
  /// Returns true if `ssoID` has been explicitly set.
  public var hasSsoID: Bool {return self._ssoID != nil}
  /// Clears the value of `ssoID`. Subsequent reads from it will return its default value.
  public mutating func clearSsoID() {self._ssoID = nil}

  public var ssoSecret: Data {
    get {return _ssoSecret ?? SwiftProtobuf.Internal.emptyData}
    set {_ssoSecret = newValue}
  }
  /// Returns true if `ssoSecret` has been explicitly set.
  public var hasSsoSecret: Bool {return self._ssoSecret != nil}
  /// Clears the value of `ssoSecret`. Subsequent reads from it will return its default value.
  public mutating func clearSsoSecret() {self._ssoSecret = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._ssoID)
      case 2: try decoder.decodeSingularBytesField(value: &self._ssoSecret)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._ssoID {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._ssoSecret {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _ssoID: Data? = nil
  fileprivate var _ssoSecret: Data? = nil
}

public struct GetAccountStateRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = "GetAccountStateRequest"

  public var entityID: EntityId {
    get {return _storage._entityID ?? EntityId()}
    set {_uniqueStorage()._entityID = newValue}
  }
  /// Returns true if `entityID` has been explicitly set.
  public var hasEntityID: Bool {return _storage._entityID != nil}
  /// Clears the value of `entityID`. Subsequent reads from it will return its default value.
  public mutating func clearEntityID() {_storage._entityID = nil}

  public var program: UInt32 {
    get {return _storage._program ?? 0}
    set {_uniqueStorage()._program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return _storage._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {_storage._program = nil}

  public var region: UInt32 {
    get {return _storage._region ?? 0}
    set {_uniqueStorage()._region = newValue}
  }
  /// Returns true if `region` has been explicitly set.
  public var hasRegion: Bool {return _storage._region != nil}
  /// Clears the value of `region`. Subsequent reads from it will return its default value.
  public mutating func clearRegion() {_storage._region = nil}

  public var options: AccountFieldOptions {
    get {return _storage._options ?? AccountFieldOptions()}
    set {_uniqueStorage()._options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  public var hasOptions: Bool {return _storage._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  public mutating func clearOptions() {_storage._options = nil}

  public var tags: AccountFieldTags {
    get {return _storage._tags ?? AccountFieldTags()}
    set {_uniqueStorage()._tags = newValue}
  }
  /// Returns true if `tags` has been explicitly set.
  public var hasTags: Bool {return _storage._tags != nil}
  /// Clears the value of `tags`. Subsequent reads from it will return its default value.
  public mutating func clearTags() {_storage._tags = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._entityID)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._program)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._region)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._options)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._tags)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._entityID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._program {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._region {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._options {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._tags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct GetAccountStateResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = "GetAccountStateResponse"

  public var state: AccountState {
    get {return _storage._state ?? AccountState()}
    set {_uniqueStorage()._state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return _storage._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {_storage._state = nil}

  public var tags: AccountFieldTags {
    get {return _storage._tags ?? AccountFieldTags()}
    set {_uniqueStorage()._tags = newValue}
  }
  /// Returns true if `tags` has been explicitly set.
  public var hasTags: Bool {return _storage._tags != nil}
  /// Clears the value of `tags`. Subsequent reads from it will return its default value.
  public mutating func clearTags() {_storage._tags = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._state, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._state)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._tags)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._state {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._tags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct AccountState: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AccountState"

  public var accountLevelInfo: AccountLevelInfo {
    get {return _storage._accountLevelInfo ?? AccountLevelInfo()}
    set {_uniqueStorage()._accountLevelInfo = newValue}
  }
  /// Returns true if `accountLevelInfo` has been explicitly set.
  public var hasAccountLevelInfo: Bool {return _storage._accountLevelInfo != nil}
  /// Clears the value of `accountLevelInfo`. Subsequent reads from it will return its default value.
  public mutating func clearAccountLevelInfo() {_storage._accountLevelInfo = nil}

  public var privacyInfo: PrivacyInfo {
    get {return _storage._privacyInfo ?? PrivacyInfo()}
    set {_uniqueStorage()._privacyInfo = newValue}
  }
  /// Returns true if `privacyInfo` has been explicitly set.
  public var hasPrivacyInfo: Bool {return _storage._privacyInfo != nil}
  /// Clears the value of `privacyInfo`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacyInfo() {_storage._privacyInfo = nil}

  public var parentalControlInfo: ParentalControlInfo {
    get {return _storage._parentalControlInfo ?? ParentalControlInfo()}
    set {_uniqueStorage()._parentalControlInfo = newValue}
  }
  /// Returns true if `parentalControlInfo` has been explicitly set.
  public var hasParentalControlInfo: Bool {return _storage._parentalControlInfo != nil}
  /// Clears the value of `parentalControlInfo`. Subsequent reads from it will return its default value.
  public mutating func clearParentalControlInfo() {_storage._parentalControlInfo = nil}

  public var gameLevelInfo: [GameLevelInfo] {
    get {return _storage._gameLevelInfo}
    set {_uniqueStorage()._gameLevelInfo = newValue}
  }

  public var gameStatus: [GameStatus] {
    get {return _storage._gameStatus}
    set {_uniqueStorage()._gameStatus = newValue}
  }

  public var gameAccounts: [GameAccountList] {
    get {return _storage._gameAccounts}
    set {_uniqueStorage()._gameAccounts = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountLevelInfo, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._gameLevelInfo) {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._gameAccounts) {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._accountLevelInfo)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._privacyInfo)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._parentalControlInfo)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._gameLevelInfo)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._gameStatus)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._gameAccounts)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountLevelInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._privacyInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._parentalControlInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._gameLevelInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gameLevelInfo, fieldNumber: 5)
      }
      if !_storage._gameStatus.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gameStatus, fieldNumber: 6)
      }
      if !_storage._gameAccounts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gameAccounts, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct AccountLevelInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AccountLevelInfo"

  public var licenses: [AccountLicense] = []

  public var defaultCurrency: UInt32 {
    get {return _defaultCurrency ?? 0}
    set {_defaultCurrency = newValue}
  }
  /// Returns true if `defaultCurrency` has been explicitly set.
  public var hasDefaultCurrency: Bool {return self._defaultCurrency != nil}
  /// Clears the value of `defaultCurrency`. Subsequent reads from it will return its default value.
  public mutating func clearDefaultCurrency() {self._defaultCurrency = nil}

  public var country: String {
    get {return _country ?? String()}
    set {_country = newValue}
  }
  /// Returns true if `country` has been explicitly set.
  public var hasCountry: Bool {return self._country != nil}
  /// Clears the value of `country`. Subsequent reads from it will return its default value.
  public mutating func clearCountry() {self._country = nil}

  public var preferredRegion: UInt32 {
    get {return _preferredRegion ?? 0}
    set {_preferredRegion = newValue}
  }
  /// Returns true if `preferredRegion` has been explicitly set.
  public var hasPreferredRegion: Bool {return self._preferredRegion != nil}
  /// Clears the value of `preferredRegion`. Subsequent reads from it will return its default value.
  public mutating func clearPreferredRegion() {self._preferredRegion = nil}

  public var fullName: String {
    get {return _fullName ?? String()}
    set {_fullName = newValue}
  }
  /// Returns true if `fullName` has been explicitly set.
  public var hasFullName: Bool {return self._fullName != nil}
  /// Clears the value of `fullName`. Subsequent reads from it will return its default value.
  public mutating func clearFullName() {self._fullName = nil}

  public var battleTag: String {
    get {return _battleTag ?? String()}
    set {_battleTag = newValue}
  }
  /// Returns true if `battleTag` has been explicitly set.
  public var hasBattleTag: Bool {return self._battleTag != nil}
  /// Clears the value of `battleTag`. Subsequent reads from it will return its default value.
  public mutating func clearBattleTag() {self._battleTag = nil}

  public var muted: Bool {
    get {return _muted ?? false}
    set {_muted = newValue}
  }
  /// Returns true if `muted` has been explicitly set.
  public var hasMuted: Bool {return self._muted != nil}
  /// Clears the value of `muted`. Subsequent reads from it will return its default value.
  public mutating func clearMuted() {self._muted = nil}

  public var manualReview: Bool {
    get {return _manualReview ?? false}
    set {_manualReview = newValue}
  }
  /// Returns true if `manualReview` has been explicitly set.
  public var hasManualReview: Bool {return self._manualReview != nil}
  /// Clears the value of `manualReview`. Subsequent reads from it will return its default value.
  public mutating func clearManualReview() {self._manualReview = nil}

  public var accountPaidAny: Bool {
    get {return _accountPaidAny ?? false}
    set {_accountPaidAny = newValue}
  }
  /// Returns true if `accountPaidAny` has been explicitly set.
  public var hasAccountPaidAny: Bool {return self._accountPaidAny != nil}
  /// Clears the value of `accountPaidAny`. Subsequent reads from it will return its default value.
  public mutating func clearAccountPaidAny() {self._accountPaidAny = nil}

  public var identityCheckStatus: IdentityVerificationStatus {
    get {return _identityCheckStatus ?? .identNoData}
    set {_identityCheckStatus = newValue}
  }
  /// Returns true if `identityCheckStatus` has been explicitly set.
  public var hasIdentityCheckStatus: Bool {return self._identityCheckStatus != nil}
  /// Clears the value of `identityCheckStatus`. Subsequent reads from it will return its default value.
  public mutating func clearIdentityCheckStatus() {self._identityCheckStatus = nil}

  public var email: String {
    get {return _email ?? String()}
    set {_email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  public var hasEmail: Bool {return self._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  public mutating func clearEmail() {self._email = nil}

  public var headlessAccount: Bool {
    get {return _headlessAccount ?? false}
    set {_headlessAccount = newValue}
  }
  /// Returns true if `headlessAccount` has been explicitly set.
  public var hasHeadlessAccount: Bool {return self._headlessAccount != nil}
  /// Clears the value of `headlessAccount`. Subsequent reads from it will return its default value.
  public mutating func clearHeadlessAccount() {self._headlessAccount = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.licenses) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeRepeatedMessageField(value: &self.licenses)
      case 4: try decoder.decodeSingularFixed32Field(value: &self._defaultCurrency)
      case 5: try decoder.decodeSingularStringField(value: &self._country)
      case 6: try decoder.decodeSingularUInt32Field(value: &self._preferredRegion)
      case 7: try decoder.decodeSingularStringField(value: &self._fullName)
      case 8: try decoder.decodeSingularStringField(value: &self._battleTag)
      case 9: try decoder.decodeSingularBoolField(value: &self._muted)
      case 10: try decoder.decodeSingularBoolField(value: &self._manualReview)
      case 11: try decoder.decodeSingularBoolField(value: &self._accountPaidAny)
      case 12: try decoder.decodeSingularEnumField(value: &self._identityCheckStatus)
      case 13: try decoder.decodeSingularStringField(value: &self._email)
      case 14: try decoder.decodeSingularBoolField(value: &self._headlessAccount)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.licenses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.licenses, fieldNumber: 3)
    }
    if let v = self._defaultCurrency {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
    }
    if let v = self._country {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._preferredRegion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._fullName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._battleTag {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    if let v = self._muted {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    if let v = self._manualReview {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    if let v = self._accountPaidAny {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    }
    if let v = self._identityCheckStatus {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 12)
    }
    if let v = self._email {
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    }
    if let v = self._headlessAccount {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _defaultCurrency: UInt32? = nil
  fileprivate var _country: String? = nil
  fileprivate var _preferredRegion: UInt32? = nil
  fileprivate var _fullName: String? = nil
  fileprivate var _battleTag: String? = nil
  fileprivate var _muted: Bool? = nil
  fileprivate var _manualReview: Bool? = nil
  fileprivate var _accountPaidAny: Bool? = nil
  fileprivate var _identityCheckStatus: IdentityVerificationStatus? = nil
  fileprivate var _email: String? = nil
  fileprivate var _headlessAccount: Bool? = nil
}

public struct AccountFieldTags: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AccountFieldTags"

  public var accountLevelInfoTag: UInt32 {
    get {return _accountLevelInfoTag ?? 0}
    set {_accountLevelInfoTag = newValue}
  }
  /// Returns true if `accountLevelInfoTag` has been explicitly set.
  public var hasAccountLevelInfoTag: Bool {return self._accountLevelInfoTag != nil}
  /// Clears the value of `accountLevelInfoTag`. Subsequent reads from it will return its default value.
  public mutating func clearAccountLevelInfoTag() {self._accountLevelInfoTag = nil}

  public var privacyInfoTag: UInt32 {
    get {return _privacyInfoTag ?? 0}
    set {_privacyInfoTag = newValue}
  }
  /// Returns true if `privacyInfoTag` has been explicitly set.
  public var hasPrivacyInfoTag: Bool {return self._privacyInfoTag != nil}
  /// Clears the value of `privacyInfoTag`. Subsequent reads from it will return its default value.
  public mutating func clearPrivacyInfoTag() {self._privacyInfoTag = nil}

  public var parentalControlInfoTag: UInt32 {
    get {return _parentalControlInfoTag ?? 0}
    set {_parentalControlInfoTag = newValue}
  }
  /// Returns true if `parentalControlInfoTag` has been explicitly set.
  public var hasParentalControlInfoTag: Bool {return self._parentalControlInfoTag != nil}
  /// Clears the value of `parentalControlInfoTag`. Subsequent reads from it will return its default value.
  public mutating func clearParentalControlInfoTag() {self._parentalControlInfoTag = nil}

  public var gameLevelInfoTags: [ProgramTag] = []

  public var gameStatusTags: [ProgramTag] = []

  public var gameAccountTags: [RegionTag] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularFixed32Field(value: &self._accountLevelInfoTag)
      case 3: try decoder.decodeSingularFixed32Field(value: &self._privacyInfoTag)
      case 4: try decoder.decodeSingularFixed32Field(value: &self._parentalControlInfoTag)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.gameLevelInfoTags)
      case 9: try decoder.decodeRepeatedMessageField(value: &self.gameStatusTags)
      case 11: try decoder.decodeRepeatedMessageField(value: &self.gameAccountTags)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._accountLevelInfoTag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    if let v = self._privacyInfoTag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    }
    if let v = self._parentalControlInfoTag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
    }
    if !self.gameLevelInfoTags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gameLevelInfoTags, fieldNumber: 7)
    }
    if !self.gameStatusTags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gameStatusTags, fieldNumber: 9)
    }
    if !self.gameAccountTags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gameAccountTags, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _accountLevelInfoTag: UInt32? = nil
  fileprivate var _privacyInfoTag: UInt32? = nil
  fileprivate var _parentalControlInfoTag: UInt32? = nil
}

public struct AccountFieldOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AccountFieldOptions"

  public var allFields: Bool {
    get {return _allFields ?? false}
    set {_allFields = newValue}
  }
  /// Returns true if `allFields` has been explicitly set.
  public var hasAllFields: Bool {return self._allFields != nil}
  /// Clears the value of `allFields`. Subsequent reads from it will return its default value.
  public mutating func clearAllFields() {self._allFields = nil}

  public var fieldAccountLevelInfo: Bool {
    get {return _fieldAccountLevelInfo ?? false}
    set {_fieldAccountLevelInfo = newValue}
  }
  /// Returns true if `fieldAccountLevelInfo` has been explicitly set.
  public var hasFieldAccountLevelInfo: Bool {return self._fieldAccountLevelInfo != nil}
  /// Clears the value of `fieldAccountLevelInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFieldAccountLevelInfo() {self._fieldAccountLevelInfo = nil}

  public var fieldPrivacyInfo: Bool {
    get {return _fieldPrivacyInfo ?? false}
    set {_fieldPrivacyInfo = newValue}
  }
  /// Returns true if `fieldPrivacyInfo` has been explicitly set.
  public var hasFieldPrivacyInfo: Bool {return self._fieldPrivacyInfo != nil}
  /// Clears the value of `fieldPrivacyInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFieldPrivacyInfo() {self._fieldPrivacyInfo = nil}

  public var fieldParentalControlInfo: Bool {
    get {return _fieldParentalControlInfo ?? false}
    set {_fieldParentalControlInfo = newValue}
  }
  /// Returns true if `fieldParentalControlInfo` has been explicitly set.
  public var hasFieldParentalControlInfo: Bool {return self._fieldParentalControlInfo != nil}
  /// Clears the value of `fieldParentalControlInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFieldParentalControlInfo() {self._fieldParentalControlInfo = nil}

  public var fieldGameLevelInfo: Bool {
    get {return _fieldGameLevelInfo ?? false}
    set {_fieldGameLevelInfo = newValue}
  }
  /// Returns true if `fieldGameLevelInfo` has been explicitly set.
  public var hasFieldGameLevelInfo: Bool {return self._fieldGameLevelInfo != nil}
  /// Clears the value of `fieldGameLevelInfo`. Subsequent reads from it will return its default value.
  public mutating func clearFieldGameLevelInfo() {self._fieldGameLevelInfo = nil}

  public var fieldGameStatus: Bool {
    get {return _fieldGameStatus ?? false}
    set {_fieldGameStatus = newValue}
  }
  /// Returns true if `fieldGameStatus` has been explicitly set.
  public var hasFieldGameStatus: Bool {return self._fieldGameStatus != nil}
  /// Clears the value of `fieldGameStatus`. Subsequent reads from it will return its default value.
  public mutating func clearFieldGameStatus() {self._fieldGameStatus = nil}

  public var fieldGameAccounts: Bool {
    get {return _fieldGameAccounts ?? false}
    set {_fieldGameAccounts = newValue}
  }
  /// Returns true if `fieldGameAccounts` has been explicitly set.
  public var hasFieldGameAccounts: Bool {return self._fieldGameAccounts != nil}
  /// Clears the value of `fieldGameAccounts`. Subsequent reads from it will return its default value.
  public mutating func clearFieldGameAccounts() {self._fieldGameAccounts = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self._allFields)
      case 2: try decoder.decodeSingularBoolField(value: &self._fieldAccountLevelInfo)
      case 3: try decoder.decodeSingularBoolField(value: &self._fieldPrivacyInfo)
      case 4: try decoder.decodeSingularBoolField(value: &self._fieldParentalControlInfo)
      case 6: try decoder.decodeSingularBoolField(value: &self._fieldGameLevelInfo)
      case 7: try decoder.decodeSingularBoolField(value: &self._fieldGameStatus)
      case 8: try decoder.decodeSingularBoolField(value: &self._fieldGameAccounts)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._allFields {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    }
    if let v = self._fieldAccountLevelInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._fieldPrivacyInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._fieldParentalControlInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._fieldGameLevelInfo {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._fieldGameStatus {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if let v = self._fieldGameAccounts {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _allFields: Bool? = nil
  fileprivate var _fieldAccountLevelInfo: Bool? = nil
  fileprivate var _fieldPrivacyInfo: Bool? = nil
  fileprivate var _fieldParentalControlInfo: Bool? = nil
  fileprivate var _fieldGameLevelInfo: Bool? = nil
  fileprivate var _fieldGameStatus: Bool? = nil
  fileprivate var _fieldGameAccounts: Bool? = nil
}

public struct ProgramTag: SwiftProtobuf.Message {
  public static let protoMessageName: String = "ProgramTag"

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var tag: UInt32 {
    get {return _tag ?? 0}
    set {_tag = newValue}
  }
  /// Returns true if `tag` has been explicitly set.
  public var hasTag: Bool {return self._tag != nil}
  /// Clears the value of `tag`. Subsequent reads from it will return its default value.
  public mutating func clearTag() {self._tag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._program)
      case 2: try decoder.decodeSingularFixed32Field(value: &self._tag)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    if let v = self._tag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _program: UInt32? = nil
  fileprivate var _tag: UInt32? = nil
}

public struct RegionTag: SwiftProtobuf.Message {
  public static let protoMessageName: String = "RegionTag"

  public var region: UInt32 {
    get {return _region ?? 0}
    set {_region = newValue}
  }
  /// Returns true if `region` has been explicitly set.
  public var hasRegion: Bool {return self._region != nil}
  /// Clears the value of `region`. Subsequent reads from it will return its default value.
  public mutating func clearRegion() {self._region = nil}

  public var tag: UInt32 {
    get {return _tag ?? 0}
    set {_tag = newValue}
  }
  /// Returns true if `tag` has been explicitly set.
  public var hasTag: Bool {return self._tag != nil}
  /// Clears the value of `tag`. Subsequent reads from it will return its default value.
  public mutating func clearTag() {self._tag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._region)
      case 2: try decoder.decodeSingularFixed32Field(value: &self._tag)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._region {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    if let v = self._tag {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _region: UInt32? = nil
  fileprivate var _tag: UInt32? = nil
}

public struct AccountLicense: SwiftProtobuf.Message {
  public static let protoMessageName: String = "AccountLicense"

  public var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var expires: UInt64 {
    get {return _expires ?? 0}
    set {_expires = newValue}
  }
  /// Returns true if `expires` has been explicitly set.
  public var hasExpires: Bool {return self._expires != nil}
  /// Clears the value of `expires`. Subsequent reads from it will return its default value.
  public mutating func clearExpires() {self._expires = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if self._id == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._id)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._expires)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._expires {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _id: UInt32? = nil
  fileprivate var _expires: UInt64? = nil
}

public struct PrivacyInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = "PrivacyInfo"

  public var isUsingRid: Bool {
    get {return _isUsingRid ?? false}
    set {_isUsingRid = newValue}
  }
  /// Returns true if `isUsingRid` has been explicitly set.
  public var hasIsUsingRid: Bool {return self._isUsingRid != nil}
  /// Clears the value of `isUsingRid`. Subsequent reads from it will return its default value.
  public mutating func clearIsUsingRid() {self._isUsingRid = nil}

  public var isVisibleForViewFriends: Bool {
    get {return _isVisibleForViewFriends ?? false}
    set {_isVisibleForViewFriends = newValue}
  }
  /// Returns true if `isVisibleForViewFriends` has been explicitly set.
  public var hasIsVisibleForViewFriends: Bool {return self._isVisibleForViewFriends != nil}
  /// Clears the value of `isVisibleForViewFriends`. Subsequent reads from it will return its default value.
  public mutating func clearIsVisibleForViewFriends() {self._isVisibleForViewFriends = nil}

  public var isHiddenFromFriendFinder: Bool {
    get {return _isHiddenFromFriendFinder ?? false}
    set {_isHiddenFromFriendFinder = newValue}
  }
  /// Returns true if `isHiddenFromFriendFinder` has been explicitly set.
  public var hasIsHiddenFromFriendFinder: Bool {return self._isHiddenFromFriendFinder != nil}
  /// Clears the value of `isHiddenFromFriendFinder`. Subsequent reads from it will return its default value.
  public mutating func clearIsHiddenFromFriendFinder() {self._isHiddenFromFriendFinder = nil}

  public var gameInfoPrivacy: PrivacyInfo.GameInfoPrivacy {
    get {return _gameInfoPrivacy ?? .privacyFriends}
    set {_gameInfoPrivacy = newValue}
  }
  /// Returns true if `gameInfoPrivacy` has been explicitly set.
  public var hasGameInfoPrivacy: Bool {return self._gameInfoPrivacy != nil}
  /// Clears the value of `gameInfoPrivacy`. Subsequent reads from it will return its default value.
  public mutating func clearGameInfoPrivacy() {self._gameInfoPrivacy = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum GameInfoPrivacy: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case privacyMe // = 0
    case privacyFriends // = 1
    case privacyEveryone // = 2

    public init() {
      self = .privacyMe
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .privacyMe
      case 1: self = .privacyFriends
      case 2: self = .privacyEveryone
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .privacyMe: return 0
      case .privacyFriends: return 1
      case .privacyEveryone: return 2
      }
    }

  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularBoolField(value: &self._isUsingRid)
      case 4: try decoder.decodeSingularBoolField(value: &self._isVisibleForViewFriends)
      case 5: try decoder.decodeSingularBoolField(value: &self._isHiddenFromFriendFinder)
      case 6: try decoder.decodeSingularEnumField(value: &self._gameInfoPrivacy)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._isUsingRid {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._isVisibleForViewFriends {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._isHiddenFromFriendFinder {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._gameInfoPrivacy {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _isUsingRid: Bool? = nil
  fileprivate var _isVisibleForViewFriends: Bool? = nil
  fileprivate var _isHiddenFromFriendFinder: Bool? = nil
  fileprivate var _gameInfoPrivacy: PrivacyInfo.GameInfoPrivacy? = nil
}

public struct ParentalControlInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = "ParentalControlInfo"

  public var timezone: String {
    get {return _timezone ?? String()}
    set {_timezone = newValue}
  }
  /// Returns true if `timezone` has been explicitly set.
  public var hasTimezone: Bool {return self._timezone != nil}
  /// Clears the value of `timezone`. Subsequent reads from it will return its default value.
  public mutating func clearTimezone() {self._timezone = nil}

  public var minutesPerDay: UInt32 {
    get {return _minutesPerDay ?? 0}
    set {_minutesPerDay = newValue}
  }
  /// Returns true if `minutesPerDay` has been explicitly set.
  public var hasMinutesPerDay: Bool {return self._minutesPerDay != nil}
  /// Clears the value of `minutesPerDay`. Subsequent reads from it will return its default value.
  public mutating func clearMinutesPerDay() {self._minutesPerDay = nil}

  public var minutesPerWeek: UInt32 {
    get {return _minutesPerWeek ?? 0}
    set {_minutesPerWeek = newValue}
  }
  /// Returns true if `minutesPerWeek` has been explicitly set.
  public var hasMinutesPerWeek: Bool {return self._minutesPerWeek != nil}
  /// Clears the value of `minutesPerWeek`. Subsequent reads from it will return its default value.
  public mutating func clearMinutesPerWeek() {self._minutesPerWeek = nil}

  public var canReceiveVoice: Bool {
    get {return _canReceiveVoice ?? false}
    set {_canReceiveVoice = newValue}
  }
  /// Returns true if `canReceiveVoice` has been explicitly set.
  public var hasCanReceiveVoice: Bool {return self._canReceiveVoice != nil}
  /// Clears the value of `canReceiveVoice`. Subsequent reads from it will return its default value.
  public mutating func clearCanReceiveVoice() {self._canReceiveVoice = nil}

  public var canSendVoice: Bool {
    get {return _canSendVoice ?? false}
    set {_canSendVoice = newValue}
  }
  /// Returns true if `canSendVoice` has been explicitly set.
  public var hasCanSendVoice: Bool {return self._canSendVoice != nil}
  /// Clears the value of `canSendVoice`. Subsequent reads from it will return its default value.
  public mutating func clearCanSendVoice() {self._canSendVoice = nil}

  public var playSchedule: [Bool] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularStringField(value: &self._timezone)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._minutesPerDay)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._minutesPerWeek)
      case 6: try decoder.decodeSingularBoolField(value: &self._canReceiveVoice)
      case 7: try decoder.decodeSingularBoolField(value: &self._canSendVoice)
      case 8: try decoder.decodeRepeatedBoolField(value: &self.playSchedule)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timezone {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._minutesPerDay {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    if let v = self._minutesPerWeek {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._canReceiveVoice {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._canSendVoice {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if !self.playSchedule.isEmpty {
      try visitor.visitRepeatedBoolField(value: self.playSchedule, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _timezone: String? = nil
  fileprivate var _minutesPerDay: UInt32? = nil
  fileprivate var _minutesPerWeek: UInt32? = nil
  fileprivate var _canReceiveVoice: Bool? = nil
  fileprivate var _canSendVoice: Bool? = nil
}

public struct GameLevelInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = "GameLevelInfo"

  public var isTrial: Bool {
    get {return _isTrial ?? false}
    set {_isTrial = newValue}
  }
  /// Returns true if `isTrial` has been explicitly set.
  public var hasIsTrial: Bool {return self._isTrial != nil}
  /// Clears the value of `isTrial`. Subsequent reads from it will return its default value.
  public mutating func clearIsTrial() {self._isTrial = nil}

  public var isLifetime: Bool {
    get {return _isLifetime ?? false}
    set {_isLifetime = newValue}
  }
  /// Returns true if `isLifetime` has been explicitly set.
  public var hasIsLifetime: Bool {return self._isLifetime != nil}
  /// Clears the value of `isLifetime`. Subsequent reads from it will return its default value.
  public mutating func clearIsLifetime() {self._isLifetime = nil}

  public var isRestricted: Bool {
    get {return _isRestricted ?? false}
    set {_isRestricted = newValue}
  }
  /// Returns true if `isRestricted` has been explicitly set.
  public var hasIsRestricted: Bool {return self._isRestricted != nil}
  /// Clears the value of `isRestricted`. Subsequent reads from it will return its default value.
  public mutating func clearIsRestricted() {self._isRestricted = nil}

  public var isBeta: Bool {
    get {return _isBeta ?? false}
    set {_isBeta = newValue}
  }
  /// Returns true if `isBeta` has been explicitly set.
  public var hasIsBeta: Bool {return self._isBeta != nil}
  /// Clears the value of `isBeta`. Subsequent reads from it will return its default value.
  public mutating func clearIsBeta() {self._isBeta = nil}

  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {self._name = nil}

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var licenses: [AccountLicense] = []

  public var realmPermissions: UInt32 {
    get {return _realmPermissions ?? 0}
    set {_realmPermissions = newValue}
  }
  /// Returns true if `realmPermissions` has been explicitly set.
  public var hasRealmPermissions: Bool {return self._realmPermissions != nil}
  /// Clears the value of `realmPermissions`. Subsequent reads from it will return its default value.
  public mutating func clearRealmPermissions() {self._realmPermissions = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.licenses) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4: try decoder.decodeSingularBoolField(value: &self._isTrial)
      case 5: try decoder.decodeSingularBoolField(value: &self._isLifetime)
      case 6: try decoder.decodeSingularBoolField(value: &self._isRestricted)
      case 7: try decoder.decodeSingularBoolField(value: &self._isBeta)
      case 8: try decoder.decodeSingularStringField(value: &self._name)
      case 9: try decoder.decodeSingularFixed32Field(value: &self._program)
      case 10: try decoder.decodeRepeatedMessageField(value: &self.licenses)
      case 11: try decoder.decodeSingularUInt32Field(value: &self._realmPermissions)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._isTrial {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._isLifetime {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._isRestricted {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._isBeta {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 9)
    }
    if !self.licenses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.licenses, fieldNumber: 10)
    }
    if let v = self._realmPermissions {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _isTrial: Bool? = nil
  fileprivate var _isLifetime: Bool? = nil
  fileprivate var _isRestricted: Bool? = nil
  fileprivate var _isBeta: Bool? = nil
  fileprivate var _name: String? = nil
  fileprivate var _program: UInt32? = nil
  fileprivate var _realmPermissions: UInt32? = nil
}

public struct GameTimeInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = "GameTimeInfo"

  public var isUnlimitedPlayTime: Bool {
    get {return _isUnlimitedPlayTime ?? false}
    set {_isUnlimitedPlayTime = newValue}
  }
  /// Returns true if `isUnlimitedPlayTime` has been explicitly set.
  public var hasIsUnlimitedPlayTime: Bool {return self._isUnlimitedPlayTime != nil}
  /// Clears the value of `isUnlimitedPlayTime`. Subsequent reads from it will return its default value.
  public mutating func clearIsUnlimitedPlayTime() {self._isUnlimitedPlayTime = nil}

  public var playTimeExpires: UInt64 {
    get {return _playTimeExpires ?? 0}
    set {_playTimeExpires = newValue}
  }
  /// Returns true if `playTimeExpires` has been explicitly set.
  public var hasPlayTimeExpires: Bool {return self._playTimeExpires != nil}
  /// Clears the value of `playTimeExpires`. Subsequent reads from it will return its default value.
  public mutating func clearPlayTimeExpires() {self._playTimeExpires = nil}

  public var isSubscription: Bool {
    get {return _isSubscription ?? false}
    set {_isSubscription = newValue}
  }
  /// Returns true if `isSubscription` has been explicitly set.
  public var hasIsSubscription: Bool {return self._isSubscription != nil}
  /// Clears the value of `isSubscription`. Subsequent reads from it will return its default value.
  public mutating func clearIsSubscription() {self._isSubscription = nil}

  public var isRecurringSubscription: Bool {
    get {return _isRecurringSubscription ?? false}
    set {_isRecurringSubscription = newValue}
  }
  /// Returns true if `isRecurringSubscription` has been explicitly set.
  public var hasIsRecurringSubscription: Bool {return self._isRecurringSubscription != nil}
  /// Clears the value of `isRecurringSubscription`. Subsequent reads from it will return its default value.
  public mutating func clearIsRecurringSubscription() {self._isRecurringSubscription = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularBoolField(value: &self._isUnlimitedPlayTime)
      case 5: try decoder.decodeSingularUInt64Field(value: &self._playTimeExpires)
      case 6: try decoder.decodeSingularBoolField(value: &self._isSubscription)
      case 7: try decoder.decodeSingularBoolField(value: &self._isRecurringSubscription)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._isUnlimitedPlayTime {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._playTimeExpires {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
    }
    if let v = self._isSubscription {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._isRecurringSubscription {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _isUnlimitedPlayTime: Bool? = nil
  fileprivate var _playTimeExpires: UInt64? = nil
  fileprivate var _isSubscription: Bool? = nil
  fileprivate var _isRecurringSubscription: Bool? = nil
}

public struct GameTimeRemainingInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = "GameTimeRemainingInfo"

  public var minutesRemaining: UInt32 {
    get {return _minutesRemaining ?? 0}
    set {_minutesRemaining = newValue}
  }
  /// Returns true if `minutesRemaining` has been explicitly set.
  public var hasMinutesRemaining: Bool {return self._minutesRemaining != nil}
  /// Clears the value of `minutesRemaining`. Subsequent reads from it will return its default value.
  public mutating func clearMinutesRemaining() {self._minutesRemaining = nil}

  public var parentalDailyMinutesRemaining: UInt32 {
    get {return _parentalDailyMinutesRemaining ?? 0}
    set {_parentalDailyMinutesRemaining = newValue}
  }
  /// Returns true if `parentalDailyMinutesRemaining` has been explicitly set.
  public var hasParentalDailyMinutesRemaining: Bool {return self._parentalDailyMinutesRemaining != nil}
  /// Clears the value of `parentalDailyMinutesRemaining`. Subsequent reads from it will return its default value.
  public mutating func clearParentalDailyMinutesRemaining() {self._parentalDailyMinutesRemaining = nil}

  public var parentalWeeklyMinutesRemaining: UInt32 {
    get {return _parentalWeeklyMinutesRemaining ?? 0}
    set {_parentalWeeklyMinutesRemaining = newValue}
  }
  /// Returns true if `parentalWeeklyMinutesRemaining` has been explicitly set.
  public var hasParentalWeeklyMinutesRemaining: Bool {return self._parentalWeeklyMinutesRemaining != nil}
  /// Clears the value of `parentalWeeklyMinutesRemaining`. Subsequent reads from it will return its default value.
  public mutating func clearParentalWeeklyMinutesRemaining() {self._parentalWeeklyMinutesRemaining = nil}

  public var secondsRemainingUntilKick: UInt32 {
    get {return _secondsRemainingUntilKick ?? 0}
    set {_secondsRemainingUntilKick = newValue}
  }
  /// Returns true if `secondsRemainingUntilKick` has been explicitly set.
  public var hasSecondsRemainingUntilKick: Bool {return self._secondsRemainingUntilKick != nil}
  /// Clears the value of `secondsRemainingUntilKick`. Subsequent reads from it will return its default value.
  public mutating func clearSecondsRemainingUntilKick() {self._secondsRemainingUntilKick = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._minutesRemaining)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._parentalDailyMinutesRemaining)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._parentalWeeklyMinutesRemaining)
      case 4: try decoder.decodeSingularUInt32Field(value: &self._secondsRemainingUntilKick)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._minutesRemaining {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._parentalDailyMinutesRemaining {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._parentalWeeklyMinutesRemaining {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._secondsRemainingUntilKick {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _minutesRemaining: UInt32? = nil
  fileprivate var _parentalDailyMinutesRemaining: UInt32? = nil
  fileprivate var _parentalWeeklyMinutesRemaining: UInt32? = nil
  fileprivate var _secondsRemainingUntilKick: UInt32? = nil
}

public struct GameStatus: SwiftProtobuf.Message {
  public static let protoMessageName: String = "GameStatus"

  public var isSuspended: Bool {
    get {return _isSuspended ?? false}
    set {_isSuspended = newValue}
  }
  /// Returns true if `isSuspended` has been explicitly set.
  public var hasIsSuspended: Bool {return self._isSuspended != nil}
  /// Clears the value of `isSuspended`. Subsequent reads from it will return its default value.
  public mutating func clearIsSuspended() {self._isSuspended = nil}

  public var isBanned: Bool {
    get {return _isBanned ?? false}
    set {_isBanned = newValue}
  }
  /// Returns true if `isBanned` has been explicitly set.
  public var hasIsBanned: Bool {return self._isBanned != nil}
  /// Clears the value of `isBanned`. Subsequent reads from it will return its default value.
  public mutating func clearIsBanned() {self._isBanned = nil}

  public var suspensionExpires: UInt64 {
    get {return _suspensionExpires ?? 0}
    set {_suspensionExpires = newValue}
  }
  /// Returns true if `suspensionExpires` has been explicitly set.
  public var hasSuspensionExpires: Bool {return self._suspensionExpires != nil}
  /// Clears the value of `suspensionExpires`. Subsequent reads from it will return its default value.
  public mutating func clearSuspensionExpires() {self._suspensionExpires = nil}

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var isLocked: Bool {
    get {return _isLocked ?? false}
    set {_isLocked = newValue}
  }
  /// Returns true if `isLocked` has been explicitly set.
  public var hasIsLocked: Bool {return self._isLocked != nil}
  /// Clears the value of `isLocked`. Subsequent reads from it will return its default value.
  public mutating func clearIsLocked() {self._isLocked = nil}

  public var isBamUnlockable: Bool {
    get {return _isBamUnlockable ?? false}
    set {_isBamUnlockable = newValue}
  }
  /// Returns true if `isBamUnlockable` has been explicitly set.
  public var hasIsBamUnlockable: Bool {return self._isBamUnlockable != nil}
  /// Clears the value of `isBamUnlockable`. Subsequent reads from it will return its default value.
  public mutating func clearIsBamUnlockable() {self._isBamUnlockable = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 4: try decoder.decodeSingularBoolField(value: &self._isSuspended)
      case 5: try decoder.decodeSingularBoolField(value: &self._isBanned)
      case 6: try decoder.decodeSingularUInt64Field(value: &self._suspensionExpires)
      case 7: try decoder.decodeSingularFixed32Field(value: &self._program)
      case 8: try decoder.decodeSingularBoolField(value: &self._isLocked)
      case 9: try decoder.decodeSingularBoolField(value: &self._isBamUnlockable)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._isSuspended {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._isBanned {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._suspensionExpires {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
    }
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 7)
    }
    if let v = self._isLocked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    }
    if let v = self._isBamUnlockable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _isSuspended: Bool? = nil
  fileprivate var _isBanned: Bool? = nil
  fileprivate var _suspensionExpires: UInt64? = nil
  fileprivate var _program: UInt32? = nil
  fileprivate var _isLocked: Bool? = nil
  fileprivate var _isBamUnlockable: Bool? = nil
}

public struct GameAccountList: SwiftProtobuf.Message {
  public static let protoMessageName: String = "GameAccountList"

  public var region: UInt32 {
    get {return _region ?? 0}
    set {_region = newValue}
  }
  /// Returns true if `region` has been explicitly set.
  public var hasRegion: Bool {return self._region != nil}
  /// Clears the value of `region`. Subsequent reads from it will return its default value.
  public mutating func clearRegion() {self._region = nil}

  public var handle: [GameAccountHandle] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.handle) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularUInt32Field(value: &self._region)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.handle)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._region {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if !self.handle.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.handle, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _region: UInt32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension IdentityVerificationStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IDENT_NO_DATA"),
    1: .same(proto: "IDENT_PENDING"),
    4: .same(proto: "IDENT_FAILED"),
    5: .same(proto: "IDENT_SUCCESS"),
    6: .same(proto: "IDENT_SUCC_MNL"),
    7: .same(proto: "IDENT_UNKNOWN"),
  ]
}

extension GenerateWebCredentialsRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "program"),
  ]

  public func _protobuf_generated_isEqualTo(other: GenerateWebCredentialsRequest) -> Bool {
    if self._program != other._program {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GenerateWebCredentialsResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "web_credentials"),
  ]

  public func _protobuf_generated_isEqualTo(other: GenerateWebCredentialsResponse) -> Bool {
    if self._webCredentials != other._webCredentials {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GenerateSSOTokenRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "program"),
  ]

  public func _protobuf_generated_isEqualTo(other: GenerateSSOTokenRequest) -> Bool {
    if self._program != other._program {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GenerateSSOTokenResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sso_id"),
    2: .standard(proto: "sso_secret"),
  ]

  public func _protobuf_generated_isEqualTo(other: GenerateSSOTokenResponse) -> Bool {
    if self._ssoID != other._ssoID {return false}
    if self._ssoSecret != other._ssoSecret {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GetAccountStateRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "entity_id"),
    2: .same(proto: "program"),
    3: .same(proto: "region"),
    10: .same(proto: "options"),
    11: .same(proto: "tags"),
  ]

  fileprivate class _StorageClass {
    var _entityID: EntityId? = nil
    var _program: UInt32? = nil
    var _region: UInt32? = nil
    var _options: AccountFieldOptions? = nil
    var _tags: AccountFieldTags? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _entityID = source._entityID
      _program = source._program
      _region = source._region
      _options = source._options
      _tags = source._tags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: GetAccountStateRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._entityID != other_storage._entityID {return false}
        if _storage._program != other_storage._program {return false}
        if _storage._region != other_storage._region {return false}
        if _storage._options != other_storage._options {return false}
        if _storage._tags != other_storage._tags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GetAccountStateResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .same(proto: "tags"),
  ]

  fileprivate class _StorageClass {
    var _state: AccountState? = nil
    var _tags: AccountFieldTags? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _state = source._state
      _tags = source._tags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: GetAccountStateResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._state != other_storage._state {return false}
        if _storage._tags != other_storage._tags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AccountState: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_level_info"),
    2: .standard(proto: "privacy_info"),
    3: .standard(proto: "parental_control_info"),
    5: .standard(proto: "game_level_info"),
    6: .standard(proto: "game_status"),
    7: .standard(proto: "game_accounts"),
  ]

  fileprivate class _StorageClass {
    var _accountLevelInfo: AccountLevelInfo? = nil
    var _privacyInfo: PrivacyInfo? = nil
    var _parentalControlInfo: ParentalControlInfo? = nil
    var _gameLevelInfo: [GameLevelInfo] = []
    var _gameStatus: [GameStatus] = []
    var _gameAccounts: [GameAccountList] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountLevelInfo = source._accountLevelInfo
      _privacyInfo = source._privacyInfo
      _parentalControlInfo = source._parentalControlInfo
      _gameLevelInfo = source._gameLevelInfo
      _gameStatus = source._gameStatus
      _gameAccounts = source._gameAccounts
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: AccountState) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._accountLevelInfo != other_storage._accountLevelInfo {return false}
        if _storage._privacyInfo != other_storage._privacyInfo {return false}
        if _storage._parentalControlInfo != other_storage._parentalControlInfo {return false}
        if _storage._gameLevelInfo != other_storage._gameLevelInfo {return false}
        if _storage._gameStatus != other_storage._gameStatus {return false}
        if _storage._gameAccounts != other_storage._gameAccounts {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AccountLevelInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "licenses"),
    4: .standard(proto: "default_currency"),
    5: .same(proto: "country"),
    6: .standard(proto: "preferred_region"),
    7: .standard(proto: "full_name"),
    8: .standard(proto: "battle_tag"),
    9: .same(proto: "muted"),
    10: .standard(proto: "manual_review"),
    11: .standard(proto: "account_paid_any"),
    12: .standard(proto: "identity_check_status"),
    13: .same(proto: "email"),
    14: .standard(proto: "headless_account"),
  ]

  public func _protobuf_generated_isEqualTo(other: AccountLevelInfo) -> Bool {
    if self.licenses != other.licenses {return false}
    if self._defaultCurrency != other._defaultCurrency {return false}
    if self._country != other._country {return false}
    if self._preferredRegion != other._preferredRegion {return false}
    if self._fullName != other._fullName {return false}
    if self._battleTag != other._battleTag {return false}
    if self._muted != other._muted {return false}
    if self._manualReview != other._manualReview {return false}
    if self._accountPaidAny != other._accountPaidAny {return false}
    if self._identityCheckStatus != other._identityCheckStatus {return false}
    if self._email != other._email {return false}
    if self._headlessAccount != other._headlessAccount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AccountFieldTags: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "account_level_info_tag"),
    3: .standard(proto: "privacy_info_tag"),
    4: .standard(proto: "parental_control_info_tag"),
    7: .standard(proto: "game_level_info_tags"),
    9: .standard(proto: "game_status_tags"),
    11: .standard(proto: "game_account_tags"),
  ]

  public func _protobuf_generated_isEqualTo(other: AccountFieldTags) -> Bool {
    if self._accountLevelInfoTag != other._accountLevelInfoTag {return false}
    if self._privacyInfoTag != other._privacyInfoTag {return false}
    if self._parentalControlInfoTag != other._parentalControlInfoTag {return false}
    if self.gameLevelInfoTags != other.gameLevelInfoTags {return false}
    if self.gameStatusTags != other.gameStatusTags {return false}
    if self.gameAccountTags != other.gameAccountTags {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AccountFieldOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "all_fields"),
    2: .standard(proto: "field_account_level_info"),
    3: .standard(proto: "field_privacy_info"),
    4: .standard(proto: "field_parental_control_info"),
    6: .standard(proto: "field_game_level_info"),
    7: .standard(proto: "field_game_status"),
    8: .standard(proto: "field_game_accounts"),
  ]

  public func _protobuf_generated_isEqualTo(other: AccountFieldOptions) -> Bool {
    if self._allFields != other._allFields {return false}
    if self._fieldAccountLevelInfo != other._fieldAccountLevelInfo {return false}
    if self._fieldPrivacyInfo != other._fieldPrivacyInfo {return false}
    if self._fieldParentalControlInfo != other._fieldParentalControlInfo {return false}
    if self._fieldGameLevelInfo != other._fieldGameLevelInfo {return false}
    if self._fieldGameStatus != other._fieldGameStatus {return false}
    if self._fieldGameAccounts != other._fieldGameAccounts {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ProgramTag: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "program"),
    2: .same(proto: "tag"),
  ]

  public func _protobuf_generated_isEqualTo(other: ProgramTag) -> Bool {
    if self._program != other._program {return false}
    if self._tag != other._tag {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension RegionTag: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "region"),
    2: .same(proto: "tag"),
  ]

  public func _protobuf_generated_isEqualTo(other: RegionTag) -> Bool {
    if self._region != other._region {return false}
    if self._tag != other._tag {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension AccountLicense: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "expires"),
  ]

  public func _protobuf_generated_isEqualTo(other: AccountLicense) -> Bool {
    if self._id != other._id {return false}
    if self._expires != other._expires {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PrivacyInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "is_using_rid"),
    4: .standard(proto: "is_visible_for_view_friends"),
    5: .standard(proto: "is_hidden_from_friend_finder"),
    6: .standard(proto: "game_info_privacy"),
  ]

  public func _protobuf_generated_isEqualTo(other: PrivacyInfo) -> Bool {
    if self._isUsingRid != other._isUsingRid {return false}
    if self._isVisibleForViewFriends != other._isVisibleForViewFriends {return false}
    if self._isHiddenFromFriendFinder != other._isHiddenFromFriendFinder {return false}
    if self._gameInfoPrivacy != other._gameInfoPrivacy {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension PrivacyInfo.GameInfoPrivacy: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRIVACY_ME"),
    1: .same(proto: "PRIVACY_FRIENDS"),
    2: .same(proto: "PRIVACY_EVERYONE"),
  ]
}

extension ParentalControlInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "timezone"),
    4: .standard(proto: "minutes_per_day"),
    5: .standard(proto: "minutes_per_week"),
    6: .standard(proto: "can_receive_voice"),
    7: .standard(proto: "can_send_voice"),
    8: .standard(proto: "play_schedule"),
  ]

  public func _protobuf_generated_isEqualTo(other: ParentalControlInfo) -> Bool {
    if self._timezone != other._timezone {return false}
    if self._minutesPerDay != other._minutesPerDay {return false}
    if self._minutesPerWeek != other._minutesPerWeek {return false}
    if self._canReceiveVoice != other._canReceiveVoice {return false}
    if self._canSendVoice != other._canSendVoice {return false}
    if self.playSchedule != other.playSchedule {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GameLevelInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "is_trial"),
    5: .standard(proto: "is_lifetime"),
    6: .standard(proto: "is_restricted"),
    7: .standard(proto: "is_beta"),
    8: .same(proto: "name"),
    9: .same(proto: "program"),
    10: .same(proto: "licenses"),
    11: .standard(proto: "realm_permissions"),
  ]

  public func _protobuf_generated_isEqualTo(other: GameLevelInfo) -> Bool {
    if self._isTrial != other._isTrial {return false}
    if self._isLifetime != other._isLifetime {return false}
    if self._isRestricted != other._isRestricted {return false}
    if self._isBeta != other._isBeta {return false}
    if self._name != other._name {return false}
    if self._program != other._program {return false}
    if self.licenses != other.licenses {return false}
    if self._realmPermissions != other._realmPermissions {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GameTimeInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .standard(proto: "is_unlimited_play_time"),
    5: .standard(proto: "play_time_expires"),
    6: .standard(proto: "is_subscription"),
    7: .standard(proto: "is_recurring_subscription"),
  ]

  public func _protobuf_generated_isEqualTo(other: GameTimeInfo) -> Bool {
    if self._isUnlimitedPlayTime != other._isUnlimitedPlayTime {return false}
    if self._playTimeExpires != other._playTimeExpires {return false}
    if self._isSubscription != other._isSubscription {return false}
    if self._isRecurringSubscription != other._isRecurringSubscription {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GameTimeRemainingInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "minutes_remaining"),
    2: .standard(proto: "parental_daily_minutes_remaining"),
    3: .standard(proto: "parental_weekly_minutes_remaining"),
    4: .standard(proto: "seconds_remaining_until_kick"),
  ]

  public func _protobuf_generated_isEqualTo(other: GameTimeRemainingInfo) -> Bool {
    if self._minutesRemaining != other._minutesRemaining {return false}
    if self._parentalDailyMinutesRemaining != other._parentalDailyMinutesRemaining {return false}
    if self._parentalWeeklyMinutesRemaining != other._parentalWeeklyMinutesRemaining {return false}
    if self._secondsRemainingUntilKick != other._secondsRemainingUntilKick {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GameStatus: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .standard(proto: "is_suspended"),
    5: .standard(proto: "is_banned"),
    6: .standard(proto: "suspension_expires"),
    7: .same(proto: "program"),
    8: .standard(proto: "is_locked"),
    9: .standard(proto: "is_bam_unlockable"),
  ]

  public func _protobuf_generated_isEqualTo(other: GameStatus) -> Bool {
    if self._isSuspended != other._isSuspended {return false}
    if self._isBanned != other._isBanned {return false}
    if self._suspensionExpires != other._suspensionExpires {return false}
    if self._program != other._program {return false}
    if self._isLocked != other._isLocked {return false}
    if self._isBamUnlockable != other._isBamUnlockable {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension GameAccountList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "region"),
    4: .same(proto: "handle"),
  ]

  public func _protobuf_generated_isEqualTo(other: GameAccountList) -> Bool {
    if self._region != other._region {return false}
    if self.handle != other.handle {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
