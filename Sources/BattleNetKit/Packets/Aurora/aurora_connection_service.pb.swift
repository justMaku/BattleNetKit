// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/connection_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Connection_V1_ConnectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var clientID: Bgs_Protocol_ProcessId {
    get {return _storage._clientID ?? Bgs_Protocol_ProcessId()}
    set {_uniqueStorage()._clientID = newValue}
  }
  /// Returns true if `clientID` has been explicitly set.
  public var hasClientID: Bool {return _storage._clientID != nil}
  /// Clears the value of `clientID`. Subsequent reads from it will return its default value.
  public mutating func clearClientID() {_uniqueStorage()._clientID = nil}

  public var bindRequest: Bgs_Protocol_Connection_V1_BindRequest {
    get {return _storage._bindRequest ?? Bgs_Protocol_Connection_V1_BindRequest()}
    set {_uniqueStorage()._bindRequest = newValue}
  }
  /// Returns true if `bindRequest` has been explicitly set.
  public var hasBindRequest: Bool {return _storage._bindRequest != nil}
  /// Clears the value of `bindRequest`. Subsequent reads from it will return its default value.
  public mutating func clearBindRequest() {_uniqueStorage()._bindRequest = nil}

  public var useBindlessRpc: Bool {
    get {return _storage._useBindlessRpc ?? true}
    set {_uniqueStorage()._useBindlessRpc = newValue}
  }
  /// Returns true if `useBindlessRpc` has been explicitly set.
  public var hasUseBindlessRpc: Bool {return _storage._useBindlessRpc != nil}
  /// Clears the value of `useBindlessRpc`. Subsequent reads from it will return its default value.
  public mutating func clearUseBindlessRpc() {_uniqueStorage()._useBindlessRpc = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Connection_V1_ConnectionMeteringContentHandles {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var contentHandle: [Bgs_Protocol_ContentHandle] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Bgs_Protocol_Connection_V1_ConnectResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var serverID: Bgs_Protocol_ProcessId {
    get {return _storage._serverID ?? Bgs_Protocol_ProcessId()}
    set {_uniqueStorage()._serverID = newValue}
  }
  /// Returns true if `serverID` has been explicitly set.
  public var hasServerID: Bool {return _storage._serverID != nil}
  /// Clears the value of `serverID`. Subsequent reads from it will return its default value.
  public mutating func clearServerID() {_uniqueStorage()._serverID = nil}

  public var clientID: Bgs_Protocol_ProcessId {
    get {return _storage._clientID ?? Bgs_Protocol_ProcessId()}
    set {_uniqueStorage()._clientID = newValue}
  }
  /// Returns true if `clientID` has been explicitly set.
  public var hasClientID: Bool {return _storage._clientID != nil}
  /// Clears the value of `clientID`. Subsequent reads from it will return its default value.
  public mutating func clearClientID() {_uniqueStorage()._clientID = nil}

  public var bindResult: UInt32 {
    get {return _storage._bindResult ?? 0}
    set {_uniqueStorage()._bindResult = newValue}
  }
  /// Returns true if `bindResult` has been explicitly set.
  public var hasBindResult: Bool {return _storage._bindResult != nil}
  /// Clears the value of `bindResult`. Subsequent reads from it will return its default value.
  public mutating func clearBindResult() {_uniqueStorage()._bindResult = nil}

  public var bindResponse: Bgs_Protocol_Connection_V1_BindResponse {
    get {return _storage._bindResponse ?? Bgs_Protocol_Connection_V1_BindResponse()}
    set {_uniqueStorage()._bindResponse = newValue}
  }
  /// Returns true if `bindResponse` has been explicitly set.
  public var hasBindResponse: Bool {return _storage._bindResponse != nil}
  /// Clears the value of `bindResponse`. Subsequent reads from it will return its default value.
  public mutating func clearBindResponse() {_uniqueStorage()._bindResponse = nil}

  public var contentHandleArray: Bgs_Protocol_Connection_V1_ConnectionMeteringContentHandles {
    get {return _storage._contentHandleArray ?? Bgs_Protocol_Connection_V1_ConnectionMeteringContentHandles()}
    set {_uniqueStorage()._contentHandleArray = newValue}
  }
  /// Returns true if `contentHandleArray` has been explicitly set.
  public var hasContentHandleArray: Bool {return _storage._contentHandleArray != nil}
  /// Clears the value of `contentHandleArray`. Subsequent reads from it will return its default value.
  public mutating func clearContentHandleArray() {_uniqueStorage()._contentHandleArray = nil}

  public var serverTime: UInt64 {
    get {return _storage._serverTime ?? 0}
    set {_uniqueStorage()._serverTime = newValue}
  }
  /// Returns true if `serverTime` has been explicitly set.
  public var hasServerTime: Bool {return _storage._serverTime != nil}
  /// Clears the value of `serverTime`. Subsequent reads from it will return its default value.
  public mutating func clearServerTime() {_uniqueStorage()._serverTime = nil}

  public var useBindlessRpc: Bool {
    get {return _storage._useBindlessRpc ?? false}
    set {_uniqueStorage()._useBindlessRpc = newValue}
  }
  /// Returns true if `useBindlessRpc` has been explicitly set.
  public var hasUseBindlessRpc: Bool {return _storage._useBindlessRpc != nil}
  /// Clears the value of `useBindlessRpc`. Subsequent reads from it will return its default value.
  public mutating func clearUseBindlessRpc() {_uniqueStorage()._useBindlessRpc = nil}

  public var binaryContentHandleArray: Bgs_Protocol_Connection_V1_ConnectionMeteringContentHandles {
    get {return _storage._binaryContentHandleArray ?? Bgs_Protocol_Connection_V1_ConnectionMeteringContentHandles()}
    set {_uniqueStorage()._binaryContentHandleArray = newValue}
  }
  /// Returns true if `binaryContentHandleArray` has been explicitly set.
  public var hasBinaryContentHandleArray: Bool {return _storage._binaryContentHandleArray != nil}
  /// Clears the value of `binaryContentHandleArray`. Subsequent reads from it will return its default value.
  public mutating func clearBinaryContentHandleArray() {_uniqueStorage()._binaryContentHandleArray = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Connection_V1_BoundService {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var hash: UInt32 {
    get {return _hash ?? 0}
    set {_hash = newValue}
  }
  /// Returns true if `hash` has been explicitly set.
  public var hasHash: Bool {return self._hash != nil}
  /// Clears the value of `hash`. Subsequent reads from it will return its default value.
  public mutating func clearHash() {self._hash = nil}

  public var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _hash: UInt32? = nil
  fileprivate var _id: UInt32? = nil
}

public struct Bgs_Protocol_Connection_V1_BindRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var deprecatedImportedServiceHash: [UInt32] = []

  public var deprecatedExportedService: [Bgs_Protocol_Connection_V1_BoundService] = []

  public var exportedService: [Bgs_Protocol_Connection_V1_BoundService] = []

  public var importedService: [Bgs_Protocol_Connection_V1_BoundService] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Bgs_Protocol_Connection_V1_BindResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var importedServiceID: [UInt32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Bgs_Protocol_Connection_V1_EchoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var time: UInt64 {
    get {return _storage._time ?? 0}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  public var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  public mutating func clearTime() {_uniqueStorage()._time = nil}

  public var networkOnly: Bool {
    get {return _storage._networkOnly ?? false}
    set {_uniqueStorage()._networkOnly = newValue}
  }
  /// Returns true if `networkOnly` has been explicitly set.
  public var hasNetworkOnly: Bool {return _storage._networkOnly != nil}
  /// Clears the value of `networkOnly`. Subsequent reads from it will return its default value.
  public mutating func clearNetworkOnly() {_uniqueStorage()._networkOnly = nil}

  public var payload: Data {
    get {return _storage._payload ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  public var hasPayload: Bool {return _storage._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  public mutating func clearPayload() {_uniqueStorage()._payload = nil}

  public var forward: Bgs_Protocol_ProcessId {
    get {return _storage._forward ?? Bgs_Protocol_ProcessId()}
    set {_uniqueStorage()._forward = newValue}
  }
  /// Returns true if `forward` has been explicitly set.
  public var hasForward: Bool {return _storage._forward != nil}
  /// Clears the value of `forward`. Subsequent reads from it will return its default value.
  public mutating func clearForward() {_uniqueStorage()._forward = nil}

  public var forwardClientID: String {
    get {return _storage._forwardClientID ?? String()}
    set {_uniqueStorage()._forwardClientID = newValue}
  }
  /// Returns true if `forwardClientID` has been explicitly set.
  public var hasForwardClientID: Bool {return _storage._forwardClientID != nil}
  /// Clears the value of `forwardClientID`. Subsequent reads from it will return its default value.
  public mutating func clearForwardClientID() {_uniqueStorage()._forwardClientID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Connection_V1_EchoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var time: UInt64 {
    get {return _time ?? 0}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  public var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  public mutating func clearTime() {self._time = nil}

  public var payload: Data {
    get {return _payload ?? SwiftProtobuf.Internal.emptyData}
    set {_payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  public var hasPayload: Bool {return self._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  public mutating func clearPayload() {self._payload = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _time: UInt64? = nil
  fileprivate var _payload: Data? = nil
}

public struct Bgs_Protocol_Connection_V1_DisconnectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var errorCode: UInt32 {
    get {return _errorCode ?? 0}
    set {_errorCode = newValue}
  }
  /// Returns true if `errorCode` has been explicitly set.
  public var hasErrorCode: Bool {return self._errorCode != nil}
  /// Clears the value of `errorCode`. Subsequent reads from it will return its default value.
  public mutating func clearErrorCode() {self._errorCode = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _errorCode: UInt32? = nil
}

public struct Bgs_Protocol_Connection_V1_DisconnectNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var errorCode: UInt32 {
    get {return _errorCode ?? 0}
    set {_errorCode = newValue}
  }
  /// Returns true if `errorCode` has been explicitly set.
  public var hasErrorCode: Bool {return self._errorCode != nil}
  /// Clears the value of `errorCode`. Subsequent reads from it will return its default value.
  public mutating func clearErrorCode() {self._errorCode = nil}

  public var reason: String {
    get {return _reason ?? String()}
    set {_reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return self._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {self._reason = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _errorCode: UInt32? = nil
  fileprivate var _reason: String? = nil
}

public struct Bgs_Protocol_Connection_V1_EncryptRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.connection.v1"

extension Bgs_Protocol_Connection_V1_ConnectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConnectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_id"),
    2: .standard(proto: "bind_request"),
    3: .standard(proto: "use_bindless_rpc"),
  ]

  fileprivate class _StorageClass {
    var _clientID: Bgs_Protocol_ProcessId? = nil
    var _bindRequest: Bgs_Protocol_Connection_V1_BindRequest? = nil
    var _useBindlessRpc: Bool? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _clientID = source._clientID
      _bindRequest = source._bindRequest
      _useBindlessRpc = source._useBindlessRpc
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._clientID, !v.isInitialized {return false}
      if let v = _storage._bindRequest, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._clientID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._bindRequest)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._useBindlessRpc)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._clientID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._bindRequest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._useBindlessRpc {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Connection_V1_ConnectRequest, rhs: Bgs_Protocol_Connection_V1_ConnectRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._clientID != rhs_storage._clientID {return false}
        if _storage._bindRequest != rhs_storage._bindRequest {return false}
        if _storage._useBindlessRpc != rhs_storage._useBindlessRpc {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Connection_V1_ConnectionMeteringContentHandles: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConnectionMeteringContentHandles"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "content_handle"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.contentHandle) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.contentHandle)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contentHandle.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contentHandle, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Connection_V1_ConnectionMeteringContentHandles, rhs: Bgs_Protocol_Connection_V1_ConnectionMeteringContentHandles) -> Bool {
    if lhs.contentHandle != rhs.contentHandle {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Connection_V1_ConnectResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConnectResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "server_id"),
    2: .standard(proto: "client_id"),
    3: .standard(proto: "bind_result"),
    4: .standard(proto: "bind_response"),
    5: .standard(proto: "content_handle_array"),
    6: .standard(proto: "server_time"),
    7: .standard(proto: "use_bindless_rpc"),
    8: .standard(proto: "binary_content_handle_array"),
  ]

  fileprivate class _StorageClass {
    var _serverID: Bgs_Protocol_ProcessId? = nil
    var _clientID: Bgs_Protocol_ProcessId? = nil
    var _bindResult: UInt32? = nil
    var _bindResponse: Bgs_Protocol_Connection_V1_BindResponse? = nil
    var _contentHandleArray: Bgs_Protocol_Connection_V1_ConnectionMeteringContentHandles? = nil
    var _serverTime: UInt64? = nil
    var _useBindlessRpc: Bool? = nil
    var _binaryContentHandleArray: Bgs_Protocol_Connection_V1_ConnectionMeteringContentHandles? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _serverID = source._serverID
      _clientID = source._clientID
      _bindResult = source._bindResult
      _bindResponse = source._bindResponse
      _contentHandleArray = source._contentHandleArray
      _serverTime = source._serverTime
      _useBindlessRpc = source._useBindlessRpc
      _binaryContentHandleArray = source._binaryContentHandleArray
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._serverID == nil {return false}
      if let v = _storage._serverID, !v.isInitialized {return false}
      if let v = _storage._clientID, !v.isInitialized {return false}
      if let v = _storage._contentHandleArray, !v.isInitialized {return false}
      if let v = _storage._binaryContentHandleArray, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._serverID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._clientID)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._bindResult)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._bindResponse)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._contentHandleArray)
        case 6: try decoder.decodeSingularUInt64Field(value: &_storage._serverTime)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._useBindlessRpc)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._binaryContentHandleArray)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._serverID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clientID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._bindResult {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._bindResponse {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._contentHandleArray {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._serverTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._useBindlessRpc {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      }
      if let v = _storage._binaryContentHandleArray {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Connection_V1_ConnectResponse, rhs: Bgs_Protocol_Connection_V1_ConnectResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._serverID != rhs_storage._serverID {return false}
        if _storage._clientID != rhs_storage._clientID {return false}
        if _storage._bindResult != rhs_storage._bindResult {return false}
        if _storage._bindResponse != rhs_storage._bindResponse {return false}
        if _storage._contentHandleArray != rhs_storage._contentHandleArray {return false}
        if _storage._serverTime != rhs_storage._serverTime {return false}
        if _storage._useBindlessRpc != rhs_storage._useBindlessRpc {return false}
        if _storage._binaryContentHandleArray != rhs_storage._binaryContentHandleArray {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Connection_V1_BoundService: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BoundService"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "id"),
  ]

  public var isInitialized: Bool {
    if self._hash == nil {return false}
    if self._id == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._hash)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._id)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._hash {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    if let v = self._id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Connection_V1_BoundService, rhs: Bgs_Protocol_Connection_V1_BoundService) -> Bool {
    if lhs._hash != rhs._hash {return false}
    if lhs._id != rhs._id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Connection_V1_BindRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BindRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "deprecated_imported_service_hash"),
    2: .standard(proto: "deprecated_exported_service"),
    3: .standard(proto: "exported_service"),
    4: .standard(proto: "imported_service"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.deprecatedExportedService) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.exportedService) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.importedService) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedFixed32Field(value: &self.deprecatedImportedServiceHash)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.deprecatedExportedService)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.exportedService)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.importedService)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deprecatedImportedServiceHash.isEmpty {
      try visitor.visitPackedFixed32Field(value: self.deprecatedImportedServiceHash, fieldNumber: 1)
    }
    if !self.deprecatedExportedService.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deprecatedExportedService, fieldNumber: 2)
    }
    if !self.exportedService.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.exportedService, fieldNumber: 3)
    }
    if !self.importedService.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.importedService, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Connection_V1_BindRequest, rhs: Bgs_Protocol_Connection_V1_BindRequest) -> Bool {
    if lhs.deprecatedImportedServiceHash != rhs.deprecatedImportedServiceHash {return false}
    if lhs.deprecatedExportedService != rhs.deprecatedExportedService {return false}
    if lhs.exportedService != rhs.exportedService {return false}
    if lhs.importedService != rhs.importedService {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Connection_V1_BindResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BindResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "imported_service_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.importedServiceID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.importedServiceID.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.importedServiceID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Connection_V1_BindResponse, rhs: Bgs_Protocol_Connection_V1_BindResponse) -> Bool {
    if lhs.importedServiceID != rhs.importedServiceID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Connection_V1_EchoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EchoRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
    2: .standard(proto: "network_only"),
    3: .same(proto: "payload"),
    4: .same(proto: "forward"),
    5: .standard(proto: "forward_client_id"),
  ]

  fileprivate class _StorageClass {
    var _time: UInt64? = nil
    var _networkOnly: Bool? = nil
    var _payload: Data? = nil
    var _forward: Bgs_Protocol_ProcessId? = nil
    var _forwardClientID: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _time = source._time
      _networkOnly = source._networkOnly
      _payload = source._payload
      _forward = source._forward
      _forwardClientID = source._forwardClientID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._forward, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFixed64Field(value: &_storage._time)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._networkOnly)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._payload)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._forward)
        case 5: try decoder.decodeSingularStringField(value: &_storage._forwardClientID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._time {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._networkOnly {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      }
      if let v = _storage._payload {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
      }
      if let v = _storage._forward {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._forwardClientID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Connection_V1_EchoRequest, rhs: Bgs_Protocol_Connection_V1_EchoRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._time != rhs_storage._time {return false}
        if _storage._networkOnly != rhs_storage._networkOnly {return false}
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._forward != rhs_storage._forward {return false}
        if _storage._forwardClientID != rhs_storage._forwardClientID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Connection_V1_EchoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EchoResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
    2: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed64Field(value: &self._time)
      case 2: try decoder.decodeSingularBytesField(value: &self._payload)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._time {
      try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
    }
    if let v = self._payload {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Connection_V1_EchoResponse, rhs: Bgs_Protocol_Connection_V1_EchoResponse) -> Bool {
    if lhs._time != rhs._time {return false}
    if lhs._payload != rhs._payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Connection_V1_DisconnectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DisconnectRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_code"),
  ]

  public var isInitialized: Bool {
    if self._errorCode == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._errorCode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._errorCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Connection_V1_DisconnectRequest, rhs: Bgs_Protocol_Connection_V1_DisconnectRequest) -> Bool {
    if lhs._errorCode != rhs._errorCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Connection_V1_DisconnectNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DisconnectNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_code"),
    2: .same(proto: "reason"),
  ]

  public var isInitialized: Bool {
    if self._errorCode == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._errorCode)
      case 2: try decoder.decodeSingularStringField(value: &self._reason)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._errorCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._reason {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Connection_V1_DisconnectNotification, rhs: Bgs_Protocol_Connection_V1_DisconnectNotification) -> Bool {
    if lhs._errorCode != rhs._errorCode {return false}
    if lhs._reason != rhs._reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Connection_V1_EncryptRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EncryptRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Connection_V1_EncryptRequest, rhs: Bgs_Protocol_Connection_V1_EncryptRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
