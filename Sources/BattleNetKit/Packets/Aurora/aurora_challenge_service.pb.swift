// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/challenge_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Challenge_V1_ChallengeExternalRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var requestToken: String {
    get {return _requestToken ?? String()}
    set {_requestToken = newValue}
  }
  /// Returns true if `requestToken` has been explicitly set.
  public var hasRequestToken: Bool {return self._requestToken != nil}
  /// Clears the value of `requestToken`. Subsequent reads from it will return its default value.
  public mutating func clearRequestToken() {self._requestToken = nil}

  public var payloadType: String {
    get {return _payloadType ?? String()}
    set {_payloadType = newValue}
  }
  /// Returns true if `payloadType` has been explicitly set.
  public var hasPayloadType: Bool {return self._payloadType != nil}
  /// Clears the value of `payloadType`. Subsequent reads from it will return its default value.
  public mutating func clearPayloadType() {self._payloadType = nil}

  public var payload: Data {
    get {return _payload ?? SwiftProtobuf.Internal.emptyData}
    set {_payload = newValue}
  }
  /// Returns true if `payload` has been explicitly set.
  public var hasPayload: Bool {return self._payload != nil}
  /// Clears the value of `payload`. Subsequent reads from it will return its default value.
  public mutating func clearPayload() {self._payload = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _requestToken: String? = nil
  fileprivate var _payloadType: String? = nil
  fileprivate var _payload: Data? = nil
}

public struct Bgs_Protocol_Challenge_V1_ChallengeExternalResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var requestToken: String {
    get {return _requestToken ?? String()}
    set {_requestToken = newValue}
  }
  /// Returns true if `requestToken` has been explicitly set.
  public var hasRequestToken: Bool {return self._requestToken != nil}
  /// Clears the value of `requestToken`. Subsequent reads from it will return its default value.
  public mutating func clearRequestToken() {self._requestToken = nil}

  public var passed: Bool {
    get {return _passed ?? true}
    set {_passed = newValue}
  }
  /// Returns true if `passed` has been explicitly set.
  public var hasPassed: Bool {return self._passed != nil}
  /// Clears the value of `passed`. Subsequent reads from it will return its default value.
  public mutating func clearPassed() {self._passed = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _requestToken: String? = nil
  fileprivate var _passed: Bool? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.challenge.v1"

extension Bgs_Protocol_Challenge_V1_ChallengeExternalRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChallengeExternalRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_token"),
    2: .standard(proto: "payload_type"),
    3: .same(proto: "payload"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._requestToken)
      case 2: try decoder.decodeSingularStringField(value: &self._payloadType)
      case 3: try decoder.decodeSingularBytesField(value: &self._payload)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._requestToken {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._payloadType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._payload {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Challenge_V1_ChallengeExternalRequest, rhs: Bgs_Protocol_Challenge_V1_ChallengeExternalRequest) -> Bool {
    if lhs._requestToken != rhs._requestToken {return false}
    if lhs._payloadType != rhs._payloadType {return false}
    if lhs._payload != rhs._payload {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Challenge_V1_ChallengeExternalResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ChallengeExternalResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "request_token"),
    2: .same(proto: "passed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._requestToken)
      case 2: try decoder.decodeSingularBoolField(value: &self._passed)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._requestToken {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._passed {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Challenge_V1_ChallengeExternalResult, rhs: Bgs_Protocol_Challenge_V1_ChallengeExternalResult) -> Bool {
    if lhs._requestToken != rhs._requestToken {return false}
    if lhs._passed != rhs._passed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
