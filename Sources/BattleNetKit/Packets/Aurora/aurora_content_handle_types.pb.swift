// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/content_handle_types.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_ContentHandle: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ContentHandle"

  public var region: UInt32 {
    get {return _region ?? 0}
    set {_region = newValue}
  }
  /// Returns true if `region` has been explicitly set.
  public var hasRegion: Bool {return self._region != nil}
  /// Clears the value of `region`. Subsequent reads from it will return its default value.
  public mutating func clearRegion() {self._region = nil}

  public var usage: UInt32 {
    get {return _usage ?? 0}
    set {_usage = newValue}
  }
  /// Returns true if `usage` has been explicitly set.
  public var hasUsage: Bool {return self._usage != nil}
  /// Clears the value of `usage`. Subsequent reads from it will return its default value.
  public mutating func clearUsage() {self._usage = nil}

  public var hash: Data {
    get {return _hash ?? SwiftProtobuf.Internal.emptyData}
    set {_hash = newValue}
  }
  /// Returns true if `hash` has been explicitly set.
  public var hasHash: Bool {return self._hash != nil}
  /// Clears the value of `hash`. Subsequent reads from it will return its default value.
  public mutating func clearHash() {self._hash = nil}

  public var protoURL: String {
    get {return _protoURL ?? String()}
    set {_protoURL = newValue}
  }
  /// Returns true if `protoURL` has been explicitly set.
  public var hasProtoURL: Bool {return self._protoURL != nil}
  /// Clears the value of `protoURL`. Subsequent reads from it will return its default value.
  public mutating func clearProtoURL() {self._protoURL = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if self._region == nil {return false}
    if self._usage == nil {return false}
    if self._hash == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._region)
      case 2: try decoder.decodeSingularFixed32Field(value: &self._usage)
      case 3: try decoder.decodeSingularBytesField(value: &self._hash)
      case 4: try decoder.decodeSingularStringField(value: &self._protoURL)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._region {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    if let v = self._usage {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    if let v = self._hash {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    if let v = self._protoURL {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _region: UInt32? = nil
  fileprivate var _usage: UInt32? = nil
  fileprivate var _hash: Data? = nil
  fileprivate var _protoURL: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol"

extension Bgs_Protocol_ContentHandle: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "region"),
    2: .same(proto: "usage"),
    3: .same(proto: "hash"),
    4: .standard(proto: "proto_url"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_ContentHandle) -> Bool {
    if self._region != other._region {return false}
    if self._usage != other._usage {return false}
    if self._hash != other._hash {return false}
    if self._protoURL != other._protoURL {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
