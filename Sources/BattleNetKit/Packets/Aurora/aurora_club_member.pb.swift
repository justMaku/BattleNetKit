// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/club_member.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Club_V1_Member {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._id ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var battleTag: String {
    get {return _storage._battleTag ?? String()}
    set {_uniqueStorage()._battleTag = newValue}
  }
  /// Returns true if `battleTag` has been explicitly set.
  public var hasBattleTag: Bool {return _storage._battleTag != nil}
  /// Clears the value of `battleTag`. Subsequent reads from it will return its default value.
  public mutating func clearBattleTag() {_uniqueStorage()._battleTag = nil}

  public var role: [UInt32] {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var joinTime: UInt64 {
    get {return _storage._joinTime ?? 0}
    set {_uniqueStorage()._joinTime = newValue}
  }
  /// Returns true if `joinTime` has been explicitly set.
  public var hasJoinTime: Bool {return _storage._joinTime != nil}
  /// Clears the value of `joinTime`. Subsequent reads from it will return its default value.
  public mutating func clearJoinTime() {_uniqueStorage()._joinTime = nil}

  public var presenceLevel: Bgs_Protocol_Club_V1_PresenceLevel {
    get {return _storage._presenceLevel ?? .none}
    set {_uniqueStorage()._presenceLevel = newValue}
  }
  /// Returns true if `presenceLevel` has been explicitly set.
  public var hasPresenceLevel: Bool {return _storage._presenceLevel != nil}
  /// Clears the value of `presenceLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPresenceLevel() {_uniqueStorage()._presenceLevel = nil}

  public var moderatorMute: Bool {
    get {return _storage._moderatorMute ?? false}
    set {_uniqueStorage()._moderatorMute = newValue}
  }
  /// Returns true if `moderatorMute` has been explicitly set.
  public var hasModeratorMute: Bool {return _storage._moderatorMute != nil}
  /// Clears the value of `moderatorMute`. Subsequent reads from it will return its default value.
  public mutating func clearModeratorMute() {_uniqueStorage()._moderatorMute = nil}

  public var whisperLevel: Bgs_Protocol_Club_V1_WhisperLevel {
    get {return _storage._whisperLevel ?? .open}
    set {_uniqueStorage()._whisperLevel = newValue}
  }
  /// Returns true if `whisperLevel` has been explicitly set.
  public var hasWhisperLevel: Bool {return _storage._whisperLevel != nil}
  /// Clears the value of `whisperLevel`. Subsequent reads from it will return its default value.
  public mutating func clearWhisperLevel() {_uniqueStorage()._whisperLevel = nil}

  public var note: String {
    get {return _storage._note ?? String()}
    set {_uniqueStorage()._note = newValue}
  }
  /// Returns true if `note` has been explicitly set.
  public var hasNote: Bool {return _storage._note != nil}
  /// Clears the value of `note`. Subsequent reads from it will return its default value.
  public mutating func clearNote() {_uniqueStorage()._note = nil}

  public var active: Bool {
    get {return _storage._active ?? false}
    set {_uniqueStorage()._active = newValue}
  }
  /// Returns true if `active` has been explicitly set.
  public var hasActive: Bool {return _storage._active != nil}
  /// Clears the value of `active`. Subsequent reads from it will return its default value.
  public mutating func clearActive() {_uniqueStorage()._active = nil}

  public var voice: Bgs_Protocol_Club_V1_MemberVoiceState {
    get {return _storage._voice ?? Bgs_Protocol_Club_V1_MemberVoiceState()}
    set {_uniqueStorage()._voice = newValue}
  }
  /// Returns true if `voice` has been explicitly set.
  public var hasVoice: Bool {return _storage._voice != nil}
  /// Clears the value of `voice`. Subsequent reads from it will return its default value.
  public mutating func clearVoice() {_uniqueStorage()._voice = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_MemberResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var memberID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._memberID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_uniqueStorage()._memberID = nil}

  public var status: UInt32 {
    get {return _storage._status ?? 0}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  public var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  public mutating func clearStatus() {_uniqueStorage()._status = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_RemoveMemberOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._id ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var reason: Bgs_Protocol_Club_V1_ClubRemovedReason {
    get {return _storage._reason ?? .none}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_uniqueStorage()._reason = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_MemberRemovedAssignment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._id ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var reason: Bgs_Protocol_Club_V1_ClubRemovedReason {
    get {return _storage._reason ?? .none}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_uniqueStorage()._reason = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_MemberVoiceOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var streamID: UInt64 {
    get {return _streamID ?? 0}
    set {_streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return self._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {self._streamID = nil}

  public var joined: Bool {
    get {return _joined ?? false}
    set {_joined = newValue}
  }
  /// Returns true if `joined` has been explicitly set.
  public var hasJoined: Bool {return self._joined != nil}
  /// Clears the value of `joined`. Subsequent reads from it will return its default value.
  public mutating func clearJoined() {self._joined = nil}

  public var microphone: Bgs_Protocol_Club_V1_VoiceMicrophoneState {
    get {return _microphone ?? .microphoneStateNormal}
    set {_microphone = newValue}
  }
  /// Returns true if `microphone` has been explicitly set.
  public var hasMicrophone: Bool {return self._microphone != nil}
  /// Clears the value of `microphone`. Subsequent reads from it will return its default value.
  public mutating func clearMicrophone() {self._microphone = nil}

  public var active: Bool {
    get {return _active ?? false}
    set {_active = newValue}
  }
  /// Returns true if `active` has been explicitly set.
  public var hasActive: Bool {return self._active != nil}
  /// Clears the value of `active`. Subsequent reads from it will return its default value.
  public mutating func clearActive() {self._active = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _streamID: UInt64? = nil
  fileprivate var _joined: Bool? = nil
  fileprivate var _microphone: Bgs_Protocol_Club_V1_VoiceMicrophoneState? = nil
  fileprivate var _active: Bool? = nil
}

public struct Bgs_Protocol_Club_V1_MemberVoiceState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var streamID: UInt64 {
    get {return _streamID ?? 0}
    set {_streamID = newValue}
  }
  /// Returns true if `streamID` has been explicitly set.
  public var hasStreamID: Bool {return self._streamID != nil}
  /// Clears the value of `streamID`. Subsequent reads from it will return its default value.
  public mutating func clearStreamID() {self._streamID = nil}

  public var joined: Bool {
    get {return _joined ?? false}
    set {_joined = newValue}
  }
  /// Returns true if `joined` has been explicitly set.
  public var hasJoined: Bool {return self._joined != nil}
  /// Clears the value of `joined`. Subsequent reads from it will return its default value.
  public mutating func clearJoined() {self._joined = nil}

  public var microphone: Bgs_Protocol_Club_V1_VoiceMicrophoneState {
    get {return _microphone ?? .microphoneStateNormal}
    set {_microphone = newValue}
  }
  /// Returns true if `microphone` has been explicitly set.
  public var hasMicrophone: Bool {return self._microphone != nil}
  /// Clears the value of `microphone`. Subsequent reads from it will return its default value.
  public mutating func clearMicrophone() {self._microphone = nil}

  public var active: Bool {
    get {return _active ?? false}
    set {_active = newValue}
  }
  /// Returns true if `active` has been explicitly set.
  public var hasActive: Bool {return self._active != nil}
  /// Clears the value of `active`. Subsequent reads from it will return its default value.
  public mutating func clearActive() {self._active = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: String? = nil
  fileprivate var _streamID: UInt64? = nil
  fileprivate var _joined: Bool? = nil
  fileprivate var _microphone: Bgs_Protocol_Club_V1_VoiceMicrophoneState? = nil
  fileprivate var _active: Bool? = nil
}

public struct Bgs_Protocol_Club_V1_CreateMemberOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._id ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_MemberDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._id ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var battleTag: String {
    get {return _storage._battleTag ?? String()}
    set {_uniqueStorage()._battleTag = newValue}
  }
  /// Returns true if `battleTag` has been explicitly set.
  public var hasBattleTag: Bool {return _storage._battleTag != nil}
  /// Clears the value of `battleTag`. Subsequent reads from it will return its default value.
  public mutating func clearBattleTag() {_uniqueStorage()._battleTag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_RoleOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var memberID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._memberID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_uniqueStorage()._memberID = nil}

  public var role: [UInt32] {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_RoleAssignment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var memberID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._memberID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_uniqueStorage()._memberID = nil}

  public var role: [UInt32] {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_MemberAttributeAssignment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var memberID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._memberID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_uniqueStorage()._memberID = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_SubscriberStateOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var voice: Bgs_Protocol_Club_V1_MemberVoiceOptions {
    get {return _storage._voice ?? Bgs_Protocol_Club_V1_MemberVoiceOptions()}
    set {_uniqueStorage()._voice = newValue}
  }
  /// Returns true if `voice` has been explicitly set.
  public var hasVoice: Bool {return _storage._voice != nil}
  /// Clears the value of `voice`. Subsequent reads from it will return its default value.
  public mutating func clearVoice() {_uniqueStorage()._voice = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_SubscriberStateAssignment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var memberID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._memberID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_uniqueStorage()._memberID = nil}

  public var active: Bool {
    get {return _storage._active ?? false}
    set {_uniqueStorage()._active = newValue}
  }
  /// Returns true if `active` has been explicitly set.
  public var hasActive: Bool {return _storage._active != nil}
  /// Clears the value of `active`. Subsequent reads from it will return its default value.
  public mutating func clearActive() {_uniqueStorage()._active = nil}

  public var voice: Bgs_Protocol_Club_V1_MemberVoiceState {
    get {return _storage._voice ?? Bgs_Protocol_Club_V1_MemberVoiceState()}
    set {_uniqueStorage()._voice = newValue}
  }
  /// Returns true if `voice` has been explicitly set.
  public var hasVoice: Bool {return _storage._voice != nil}
  /// Clears the value of `voice`. Subsequent reads from it will return its default value.
  public mutating func clearVoice() {_uniqueStorage()._voice = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_MemberStateOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var attribute: [Bgs_Protocol_V2_Attribute] = []

  public var presenceLevel: Bgs_Protocol_Club_V1_PresenceLevel {
    get {return _presenceLevel ?? .none}
    set {_presenceLevel = newValue}
  }
  /// Returns true if `presenceLevel` has been explicitly set.
  public var hasPresenceLevel: Bool {return self._presenceLevel != nil}
  /// Clears the value of `presenceLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPresenceLevel() {self._presenceLevel = nil}

  public var moderatorMute: Bool {
    get {return _moderatorMute ?? false}
    set {_moderatorMute = newValue}
  }
  /// Returns true if `moderatorMute` has been explicitly set.
  public var hasModeratorMute: Bool {return self._moderatorMute != nil}
  /// Clears the value of `moderatorMute`. Subsequent reads from it will return its default value.
  public mutating func clearModeratorMute() {self._moderatorMute = nil}

  public var whisperLevel: Bgs_Protocol_Club_V1_WhisperLevel {
    get {return _whisperLevel ?? .open}
    set {_whisperLevel = newValue}
  }
  /// Returns true if `whisperLevel` has been explicitly set.
  public var hasWhisperLevel: Bool {return self._whisperLevel != nil}
  /// Clears the value of `whisperLevel`. Subsequent reads from it will return its default value.
  public mutating func clearWhisperLevel() {self._whisperLevel = nil}

  public var note: String {
    get {return _note ?? String()}
    set {_note = newValue}
  }
  /// Returns true if `note` has been explicitly set.
  public var hasNote: Bool {return self._note != nil}
  /// Clears the value of `note`. Subsequent reads from it will return its default value.
  public mutating func clearNote() {self._note = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _presenceLevel: Bgs_Protocol_Club_V1_PresenceLevel? = nil
  fileprivate var _moderatorMute: Bool? = nil
  fileprivate var _whisperLevel: Bgs_Protocol_Club_V1_WhisperLevel? = nil
  fileprivate var _note: String? = nil
}

public struct Bgs_Protocol_Club_V1_MemberStateAssignment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var memberID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._memberID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_uniqueStorage()._memberID = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var presenceLevel: Bgs_Protocol_Club_V1_PresenceLevel {
    get {return _storage._presenceLevel ?? .none}
    set {_uniqueStorage()._presenceLevel = newValue}
  }
  /// Returns true if `presenceLevel` has been explicitly set.
  public var hasPresenceLevel: Bool {return _storage._presenceLevel != nil}
  /// Clears the value of `presenceLevel`. Subsequent reads from it will return its default value.
  public mutating func clearPresenceLevel() {_uniqueStorage()._presenceLevel = nil}

  public var moderatorMute: Bool {
    get {return _storage._moderatorMute ?? false}
    set {_uniqueStorage()._moderatorMute = newValue}
  }
  /// Returns true if `moderatorMute` has been explicitly set.
  public var hasModeratorMute: Bool {return _storage._moderatorMute != nil}
  /// Clears the value of `moderatorMute`. Subsequent reads from it will return its default value.
  public mutating func clearModeratorMute() {_uniqueStorage()._moderatorMute = nil}

  public var whisperLevel: Bgs_Protocol_Club_V1_WhisperLevel {
    get {return _storage._whisperLevel ?? .open}
    set {_uniqueStorage()._whisperLevel = newValue}
  }
  /// Returns true if `whisperLevel` has been explicitly set.
  public var hasWhisperLevel: Bool {return _storage._whisperLevel != nil}
  /// Clears the value of `whisperLevel`. Subsequent reads from it will return its default value.
  public mutating func clearWhisperLevel() {_uniqueStorage()._whisperLevel = nil}

  public var note: String {
    get {return _storage._note ?? String()}
    set {_uniqueStorage()._note = newValue}
  }
  /// Returns true if `note` has been explicitly set.
  public var hasNote: Bool {return _storage._note != nil}
  /// Clears the value of `note`. Subsequent reads from it will return its default value.
  public mutating func clearNote() {_uniqueStorage()._note = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.club.v1"

extension Bgs_Protocol_Club_V1_Member: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Member"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "battle_tag"),
    3: .same(proto: "role"),
    4: .same(proto: "attribute"),
    5: .standard(proto: "join_time"),
    6: .standard(proto: "presence_level"),
    7: .standard(proto: "moderator_mute"),
    8: .standard(proto: "whisper_level"),
    9: .same(proto: "note"),
    50: .same(proto: "active"),
    51: .same(proto: "voice"),
  ]

  fileprivate class _StorageClass {
    var _id: Bgs_Protocol_Club_V1_MemberId? = nil
    var _battleTag: String? = nil
    var _role: [UInt32] = []
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _joinTime: UInt64? = nil
    var _presenceLevel: Bgs_Protocol_Club_V1_PresenceLevel? = nil
    var _moderatorMute: Bool? = nil
    var _whisperLevel: Bgs_Protocol_Club_V1_WhisperLevel? = nil
    var _note: String? = nil
    var _active: Bool? = nil
    var _voice: Bgs_Protocol_Club_V1_MemberVoiceState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _battleTag = source._battleTag
      _role = source._role
      _attribute = source._attribute
      _joinTime = source._joinTime
      _presenceLevel = source._presenceLevel
      _moderatorMute = source._moderatorMute
      _whisperLevel = source._whisperLevel
      _note = source._note
      _active = source._active
      _voice = source._voice
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._battleTag)
        case 3: try decoder.decodeRepeatedUInt32Field(value: &_storage._role)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 5: try decoder.decodeSingularUInt64Field(value: &_storage._joinTime)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._presenceLevel)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._moderatorMute)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._whisperLevel)
        case 9: try decoder.decodeSingularStringField(value: &_storage._note)
        case 50: try decoder.decodeSingularBoolField(value: &_storage._active)
        case 51: try decoder.decodeSingularMessageField(value: &_storage._voice)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._battleTag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if !_storage._role.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._role, fieldNumber: 3)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 4)
      }
      if let v = _storage._joinTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._presenceLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
      }
      if let v = _storage._moderatorMute {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      }
      if let v = _storage._whisperLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
      }
      if let v = _storage._note {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._active {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 50)
      }
      if let v = _storage._voice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_Member, rhs: Bgs_Protocol_Club_V1_Member) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._battleTag != rhs_storage._battleTag {return false}
        if _storage._role != rhs_storage._role {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._joinTime != rhs_storage._joinTime {return false}
        if _storage._presenceLevel != rhs_storage._presenceLevel {return false}
        if _storage._moderatorMute != rhs_storage._moderatorMute {return false}
        if _storage._whisperLevel != rhs_storage._whisperLevel {return false}
        if _storage._note != rhs_storage._note {return false}
        if _storage._active != rhs_storage._active {return false}
        if _storage._voice != rhs_storage._voice {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MemberResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "member_id"),
    2: .same(proto: "status"),
  ]

  fileprivate class _StorageClass {
    var _memberID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _status: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _memberID = source._memberID
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._status)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._status {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_MemberResult, rhs: Bgs_Protocol_Club_V1_MemberResult) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._memberID != rhs_storage._memberID {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_RemoveMemberOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoveMemberOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "reason"),
  ]

  fileprivate class _StorageClass {
    var _id: Bgs_Protocol_Club_V1_MemberId? = nil
    var _reason: Bgs_Protocol_Club_V1_ClubRemovedReason? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _reason = source._reason
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._reason)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._reason {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_RemoveMemberOptions, rhs: Bgs_Protocol_Club_V1_RemoveMemberOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._reason != rhs_storage._reason {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MemberRemovedAssignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberRemovedAssignment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "reason"),
  ]

  fileprivate class _StorageClass {
    var _id: Bgs_Protocol_Club_V1_MemberId? = nil
    var _reason: Bgs_Protocol_Club_V1_ClubRemovedReason? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _reason = source._reason
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._reason)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._reason {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_MemberRemovedAssignment, rhs: Bgs_Protocol_Club_V1_MemberRemovedAssignment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._reason != rhs_storage._reason {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MemberVoiceOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberVoiceOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "stream_id"),
    2: .same(proto: "joined"),
    3: .same(proto: "microphone"),
    4: .same(proto: "active"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self._streamID)
      case 2: try decoder.decodeSingularBoolField(value: &self._joined)
      case 3: try decoder.decodeSingularEnumField(value: &self._microphone)
      case 4: try decoder.decodeSingularBoolField(value: &self._active)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._streamID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    }
    if let v = self._joined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._microphone {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._active {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_MemberVoiceOptions, rhs: Bgs_Protocol_Club_V1_MemberVoiceOptions) -> Bool {
    if lhs._streamID != rhs._streamID {return false}
    if lhs._joined != rhs._joined {return false}
    if lhs._microphone != rhs._microphone {return false}
    if lhs._active != rhs._active {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MemberVoiceState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberVoiceState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "stream_id"),
    3: .same(proto: "joined"),
    4: .same(proto: "microphone"),
    5: .same(proto: "active"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._id)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._streamID)
      case 3: try decoder.decodeSingularBoolField(value: &self._joined)
      case 4: try decoder.decodeSingularEnumField(value: &self._microphone)
      case 5: try decoder.decodeSingularBoolField(value: &self._active)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._streamID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    if let v = self._joined {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._microphone {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._active {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_MemberVoiceState, rhs: Bgs_Protocol_Club_V1_MemberVoiceState) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._streamID != rhs._streamID {return false}
    if lhs._joined != rhs._joined {return false}
    if lhs._microphone != rhs._microphone {return false}
    if lhs._active != rhs._active {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_CreateMemberOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateMemberOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "attribute"),
  ]

  fileprivate class _StorageClass {
    var _id: Bgs_Protocol_Club_V1_MemberId? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _attribute = source._attribute
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_CreateMemberOptions, rhs: Bgs_Protocol_Club_V1_CreateMemberOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MemberDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberDescription"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "battle_tag"),
  ]

  fileprivate class _StorageClass {
    var _id: Bgs_Protocol_Club_V1_MemberId? = nil
    var _battleTag: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _battleTag = source._battleTag
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._battleTag)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._battleTag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_MemberDescription, rhs: Bgs_Protocol_Club_V1_MemberDescription) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._battleTag != rhs_storage._battleTag {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_RoleOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RoleOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "member_id"),
    2: .same(proto: "role"),
  ]

  fileprivate class _StorageClass {
    var _memberID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _role: [UInt32] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _memberID = source._memberID
      _role = source._role
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 2: try decoder.decodeRepeatedUInt32Field(value: &_storage._role)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._role.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._role, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_RoleOptions, rhs: Bgs_Protocol_Club_V1_RoleOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._memberID != rhs_storage._memberID {return false}
        if _storage._role != rhs_storage._role {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_RoleAssignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RoleAssignment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "member_id"),
    2: .same(proto: "role"),
  ]

  fileprivate class _StorageClass {
    var _memberID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _role: [UInt32] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _memberID = source._memberID
      _role = source._role
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 2: try decoder.decodeRepeatedUInt32Field(value: &_storage._role)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._role.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._role, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_RoleAssignment, rhs: Bgs_Protocol_Club_V1_RoleAssignment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._memberID != rhs_storage._memberID {return false}
        if _storage._role != rhs_storage._role {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MemberAttributeAssignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberAttributeAssignment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "member_id"),
    2: .same(proto: "attribute"),
  ]

  fileprivate class _StorageClass {
    var _memberID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _memberID = source._memberID
      _attribute = source._attribute
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_MemberAttributeAssignment, rhs: Bgs_Protocol_Club_V1_MemberAttributeAssignment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._memberID != rhs_storage._memberID {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_SubscriberStateOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberStateOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "voice"),
  ]

  fileprivate class _StorageClass {
    var _voice: Bgs_Protocol_Club_V1_MemberVoiceOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _voice = source._voice
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._voice)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._voice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_SubscriberStateOptions, rhs: Bgs_Protocol_Club_V1_SubscriberStateOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._voice != rhs_storage._voice {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_SubscriberStateAssignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscriberStateAssignment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "member_id"),
    2: .same(proto: "active"),
    3: .same(proto: "voice"),
  ]

  fileprivate class _StorageClass {
    var _memberID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _active: Bool? = nil
    var _voice: Bgs_Protocol_Club_V1_MemberVoiceState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _memberID = source._memberID
      _active = source._active
      _voice = source._voice
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._active)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._voice)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._active {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      }
      if let v = _storage._voice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_SubscriberStateAssignment, rhs: Bgs_Protocol_Club_V1_SubscriberStateAssignment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._memberID != rhs_storage._memberID {return false}
        if _storage._active != rhs_storage._active {return false}
        if _storage._voice != rhs_storage._voice {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MemberStateOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberStateOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attribute"),
    2: .standard(proto: "presence_level"),
    3: .standard(proto: "moderator_mute"),
    4: .standard(proto: "whisper_level"),
    5: .same(proto: "note"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.attribute)
      case 2: try decoder.decodeSingularEnumField(value: &self._presenceLevel)
      case 3: try decoder.decodeSingularBoolField(value: &self._moderatorMute)
      case 4: try decoder.decodeSingularEnumField(value: &self._whisperLevel)
      case 5: try decoder.decodeSingularStringField(value: &self._note)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.attribute.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attribute, fieldNumber: 1)
    }
    if let v = self._presenceLevel {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    if let v = self._moderatorMute {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._whisperLevel {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._note {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_MemberStateOptions, rhs: Bgs_Protocol_Club_V1_MemberStateOptions) -> Bool {
    if lhs.attribute != rhs.attribute {return false}
    if lhs._presenceLevel != rhs._presenceLevel {return false}
    if lhs._moderatorMute != rhs._moderatorMute {return false}
    if lhs._whisperLevel != rhs._whisperLevel {return false}
    if lhs._note != rhs._note {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_MemberStateAssignment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberStateAssignment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "member_id"),
    2: .same(proto: "attribute"),
    3: .standard(proto: "presence_level"),
    4: .standard(proto: "moderator_mute"),
    5: .standard(proto: "whisper_level"),
    6: .same(proto: "note"),
  ]

  fileprivate class _StorageClass {
    var _memberID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _presenceLevel: Bgs_Protocol_Club_V1_PresenceLevel? = nil
    var _moderatorMute: Bool? = nil
    var _whisperLevel: Bgs_Protocol_Club_V1_WhisperLevel? = nil
    var _note: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _memberID = source._memberID
      _attribute = source._attribute
      _presenceLevel = source._presenceLevel
      _moderatorMute = source._moderatorMute
      _whisperLevel = source._whisperLevel
      _note = source._note
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._presenceLevel)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._moderatorMute)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._whisperLevel)
        case 6: try decoder.decodeSingularStringField(value: &_storage._note)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 2)
      }
      if let v = _storage._presenceLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      }
      if let v = _storage._moderatorMute {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      }
      if let v = _storage._whisperLevel {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      }
      if let v = _storage._note {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_MemberStateAssignment, rhs: Bgs_Protocol_Club_V1_MemberStateAssignment) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._memberID != rhs_storage._memberID {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._presenceLevel != rhs_storage._presenceLevel {return false}
        if _storage._moderatorMute != rhs_storage._moderatorMute {return false}
        if _storage._whisperLevel != rhs_storage._whisperLevel {return false}
        if _storage._note != rhs_storage._note {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
