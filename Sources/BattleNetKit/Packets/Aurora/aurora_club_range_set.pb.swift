// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/club_range_set.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Club_V1_ClubTypeRangeSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var nameRange: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._nameRange ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._nameRange = newValue}
  }
  /// Returns true if `nameRange` has been explicitly set.
  public var hasNameRange: Bool {return _storage._nameRange != nil}
  /// Clears the value of `nameRange`. Subsequent reads from it will return its default value.
  public mutating func clearNameRange() {_uniqueStorage()._nameRange = nil}

  public var descriptionRange: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._descriptionRange ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._descriptionRange = newValue}
  }
  /// Returns true if `descriptionRange` has been explicitly set.
  public var hasDescriptionRange: Bool {return _storage._descriptionRange != nil}
  /// Clears the value of `descriptionRange`. Subsequent reads from it will return its default value.
  public mutating func clearDescriptionRange() {_uniqueStorage()._descriptionRange = nil}

  public var broadcastRange: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._broadcastRange ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._broadcastRange = newValue}
  }
  /// Returns true if `broadcastRange` has been explicitly set.
  public var hasBroadcastRange: Bool {return _storage._broadcastRange != nil}
  /// Clears the value of `broadcastRange`. Subsequent reads from it will return its default value.
  public mutating func clearBroadcastRange() {_uniqueStorage()._broadcastRange = nil}

  public var shortNameRange: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._shortNameRange ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._shortNameRange = newValue}
  }
  /// Returns true if `shortNameRange` has been explicitly set.
  public var hasShortNameRange: Bool {return _storage._shortNameRange != nil}
  /// Clears the value of `shortNameRange`. Subsequent reads from it will return its default value.
  public mutating func clearShortNameRange() {_uniqueStorage()._shortNameRange = nil}

  public var member: Bgs_Protocol_Club_V1_ClubMemberRangeSet {
    get {return _storage._member ?? Bgs_Protocol_Club_V1_ClubMemberRangeSet()}
    set {_uniqueStorage()._member = newValue}
  }
  /// Returns true if `member` has been explicitly set.
  public var hasMember: Bool {return _storage._member != nil}
  /// Clears the value of `member`. Subsequent reads from it will return its default value.
  public mutating func clearMember() {_uniqueStorage()._member = nil}

  public var stream: Bgs_Protocol_Club_V1_ClubStreamRangeSet {
    get {return _storage._stream ?? Bgs_Protocol_Club_V1_ClubStreamRangeSet()}
    set {_uniqueStorage()._stream = newValue}
  }
  /// Returns true if `stream` has been explicitly set.
  public var hasStream: Bool {return _storage._stream != nil}
  /// Clears the value of `stream`. Subsequent reads from it will return its default value.
  public mutating func clearStream() {_uniqueStorage()._stream = nil}

  public var invitation: Bgs_Protocol_Club_V1_ClubInvitationRangeSet {
    get {return _storage._invitation ?? Bgs_Protocol_Club_V1_ClubInvitationRangeSet()}
    set {_uniqueStorage()._invitation = newValue}
  }
  /// Returns true if `invitation` has been explicitly set.
  public var hasInvitation: Bool {return _storage._invitation != nil}
  /// Clears the value of `invitation`. Subsequent reads from it will return its default value.
  public mutating func clearInvitation() {_uniqueStorage()._invitation = nil}

  public var suggestion: Bgs_Protocol_Club_V1_ClubSuggestionRangeSet {
    get {return _storage._suggestion ?? Bgs_Protocol_Club_V1_ClubSuggestionRangeSet()}
    set {_uniqueStorage()._suggestion = newValue}
  }
  /// Returns true if `suggestion` has been explicitly set.
  public var hasSuggestion: Bool {return _storage._suggestion != nil}
  /// Clears the value of `suggestion`. Subsequent reads from it will return its default value.
  public mutating func clearSuggestion() {_uniqueStorage()._suggestion = nil}

  public var ticket: Bgs_Protocol_Club_V1_ClubTicketRangeSet {
    get {return _storage._ticket ?? Bgs_Protocol_Club_V1_ClubTicketRangeSet()}
    set {_uniqueStorage()._ticket = newValue}
  }
  /// Returns true if `ticket` has been explicitly set.
  public var hasTicket: Bool {return _storage._ticket != nil}
  /// Clears the value of `ticket`. Subsequent reads from it will return its default value.
  public mutating func clearTicket() {_uniqueStorage()._ticket = nil}

  public var ban: Bgs_Protocol_Club_V1_ClubBanRangeSet {
    get {return _storage._ban ?? Bgs_Protocol_Club_V1_ClubBanRangeSet()}
    set {_uniqueStorage()._ban = newValue}
  }
  /// Returns true if `ban` has been explicitly set.
  public var hasBan: Bool {return _storage._ban != nil}
  /// Clears the value of `ban`. Subsequent reads from it will return its default value.
  public mutating func clearBan() {_uniqueStorage()._ban = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubMemberRangeSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var count: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._count ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  public var hasCount: Bool {return _storage._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  public mutating func clearCount() {_uniqueStorage()._count = nil}

  public var voice: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._voice ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._voice = newValue}
  }
  /// Returns true if `voice` has been explicitly set.
  public var hasVoice: Bool {return _storage._voice != nil}
  /// Clears the value of `voice`. Subsequent reads from it will return its default value.
  public mutating func clearVoice() {_uniqueStorage()._voice = nil}

  public var streamSubscriptions: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._streamSubscriptions ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._streamSubscriptions = newValue}
  }
  /// Returns true if `streamSubscriptions` has been explicitly set.
  public var hasStreamSubscriptions: Bool {return _storage._streamSubscriptions != nil}
  /// Clears the value of `streamSubscriptions`. Subsequent reads from it will return its default value.
  public mutating func clearStreamSubscriptions() {_uniqueStorage()._streamSubscriptions = nil}

  public var noteRange: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._noteRange ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._noteRange = newValue}
  }
  /// Returns true if `noteRange` has been explicitly set.
  public var hasNoteRange: Bool {return _storage._noteRange != nil}
  /// Clears the value of `noteRange`. Subsequent reads from it will return its default value.
  public mutating func clearNoteRange() {_uniqueStorage()._noteRange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubStreamRangeSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var count: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._count ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  public var hasCount: Bool {return _storage._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  public mutating func clearCount() {_uniqueStorage()._count = nil}

  public var nameRange: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._nameRange ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._nameRange = newValue}
  }
  /// Returns true if `nameRange` has been explicitly set.
  public var hasNameRange: Bool {return _storage._nameRange != nil}
  /// Clears the value of `nameRange`. Subsequent reads from it will return its default value.
  public mutating func clearNameRange() {_uniqueStorage()._nameRange = nil}

  public var subjectRange: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._subjectRange ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._subjectRange = newValue}
  }
  /// Returns true if `subjectRange` has been explicitly set.
  public var hasSubjectRange: Bool {return _storage._subjectRange != nil}
  /// Clears the value of `subjectRange`. Subsequent reads from it will return its default value.
  public mutating func clearSubjectRange() {_uniqueStorage()._subjectRange = nil}

  public var messageRange: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._messageRange ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._messageRange = newValue}
  }
  /// Returns true if `messageRange` has been explicitly set.
  public var hasMessageRange: Bool {return _storage._messageRange != nil}
  /// Clears the value of `messageRange`. Subsequent reads from it will return its default value.
  public mutating func clearMessageRange() {_uniqueStorage()._messageRange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubInvitationRangeSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var count: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._count ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  public var hasCount: Bool {return _storage._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  public mutating func clearCount() {_uniqueStorage()._count = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubSuggestionRangeSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var count: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._count ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  public var hasCount: Bool {return _storage._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  public mutating func clearCount() {_uniqueStorage()._count = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubTicketRangeSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var count: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._count ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  public var hasCount: Bool {return _storage._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  public mutating func clearCount() {_uniqueStorage()._count = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubBanRangeSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var count: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._count ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  public var hasCount: Bool {return _storage._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  public mutating func clearCount() {_uniqueStorage()._count = nil}

  public var reasonRange: Bgs_Protocol_UnsignedIntRange {
    get {return _storage._reasonRange ?? Bgs_Protocol_UnsignedIntRange()}
    set {_uniqueStorage()._reasonRange = newValue}
  }
  /// Returns true if `reasonRange` has been explicitly set.
  public var hasReasonRange: Bool {return _storage._reasonRange != nil}
  /// Clears the value of `reasonRange`. Subsequent reads from it will return its default value.
  public mutating func clearReasonRange() {_uniqueStorage()._reasonRange = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.club.v1"

extension Bgs_Protocol_Club_V1_ClubTypeRangeSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubTypeRangeSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "name_range"),
    3: .standard(proto: "description_range"),
    4: .standard(proto: "broadcast_range"),
    7: .standard(proto: "short_name_range"),
    25: .same(proto: "member"),
    26: .same(proto: "stream"),
    27: .same(proto: "invitation"),
    28: .same(proto: "suggestion"),
    29: .same(proto: "ticket"),
    30: .same(proto: "ban"),
  ]

  fileprivate class _StorageClass {
    var _nameRange: Bgs_Protocol_UnsignedIntRange? = nil
    var _descriptionRange: Bgs_Protocol_UnsignedIntRange? = nil
    var _broadcastRange: Bgs_Protocol_UnsignedIntRange? = nil
    var _shortNameRange: Bgs_Protocol_UnsignedIntRange? = nil
    var _member: Bgs_Protocol_Club_V1_ClubMemberRangeSet? = nil
    var _stream: Bgs_Protocol_Club_V1_ClubStreamRangeSet? = nil
    var _invitation: Bgs_Protocol_Club_V1_ClubInvitationRangeSet? = nil
    var _suggestion: Bgs_Protocol_Club_V1_ClubSuggestionRangeSet? = nil
    var _ticket: Bgs_Protocol_Club_V1_ClubTicketRangeSet? = nil
    var _ban: Bgs_Protocol_Club_V1_ClubBanRangeSet? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _nameRange = source._nameRange
      _descriptionRange = source._descriptionRange
      _broadcastRange = source._broadcastRange
      _shortNameRange = source._shortNameRange
      _member = source._member
      _stream = source._stream
      _invitation = source._invitation
      _suggestion = source._suggestion
      _ticket = source._ticket
      _ban = source._ban
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._nameRange)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._descriptionRange)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._broadcastRange)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._shortNameRange)
        case 25: try decoder.decodeSingularMessageField(value: &_storage._member)
        case 26: try decoder.decodeSingularMessageField(value: &_storage._stream)
        case 27: try decoder.decodeSingularMessageField(value: &_storage._invitation)
        case 28: try decoder.decodeSingularMessageField(value: &_storage._suggestion)
        case 29: try decoder.decodeSingularMessageField(value: &_storage._ticket)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._ban)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._nameRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._descriptionRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._broadcastRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._shortNameRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._member {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      }
      if let v = _storage._stream {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      }
      if let v = _storage._invitation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if let v = _storage._suggestion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      }
      if let v = _storage._ticket {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      }
      if let v = _storage._ban {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubTypeRangeSet, rhs: Bgs_Protocol_Club_V1_ClubTypeRangeSet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._nameRange != rhs_storage._nameRange {return false}
        if _storage._descriptionRange != rhs_storage._descriptionRange {return false}
        if _storage._broadcastRange != rhs_storage._broadcastRange {return false}
        if _storage._shortNameRange != rhs_storage._shortNameRange {return false}
        if _storage._member != rhs_storage._member {return false}
        if _storage._stream != rhs_storage._stream {return false}
        if _storage._invitation != rhs_storage._invitation {return false}
        if _storage._suggestion != rhs_storage._suggestion {return false}
        if _storage._ticket != rhs_storage._ticket {return false}
        if _storage._ban != rhs_storage._ban {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubMemberRangeSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubMemberRangeSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    3: .same(proto: "voice"),
    5: .standard(proto: "stream_subscriptions"),
    7: .standard(proto: "note_range"),
  ]

  fileprivate class _StorageClass {
    var _count: Bgs_Protocol_UnsignedIntRange? = nil
    var _voice: Bgs_Protocol_UnsignedIntRange? = nil
    var _streamSubscriptions: Bgs_Protocol_UnsignedIntRange? = nil
    var _noteRange: Bgs_Protocol_UnsignedIntRange? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _count = source._count
      _voice = source._voice
      _streamSubscriptions = source._streamSubscriptions
      _noteRange = source._noteRange
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._count)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._voice)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._streamSubscriptions)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._noteRange)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._count {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._voice {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._streamSubscriptions {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._noteRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubMemberRangeSet, rhs: Bgs_Protocol_Club_V1_ClubMemberRangeSet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._count != rhs_storage._count {return false}
        if _storage._voice != rhs_storage._voice {return false}
        if _storage._streamSubscriptions != rhs_storage._streamSubscriptions {return false}
        if _storage._noteRange != rhs_storage._noteRange {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubStreamRangeSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubStreamRangeSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    3: .standard(proto: "name_range"),
    4: .standard(proto: "subject_range"),
    5: .standard(proto: "message_range"),
  ]

  fileprivate class _StorageClass {
    var _count: Bgs_Protocol_UnsignedIntRange? = nil
    var _nameRange: Bgs_Protocol_UnsignedIntRange? = nil
    var _subjectRange: Bgs_Protocol_UnsignedIntRange? = nil
    var _messageRange: Bgs_Protocol_UnsignedIntRange? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _count = source._count
      _nameRange = source._nameRange
      _subjectRange = source._subjectRange
      _messageRange = source._messageRange
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._count)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._nameRange)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._subjectRange)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._messageRange)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._count {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._nameRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._subjectRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._messageRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubStreamRangeSet, rhs: Bgs_Protocol_Club_V1_ClubStreamRangeSet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._count != rhs_storage._count {return false}
        if _storage._nameRange != rhs_storage._nameRange {return false}
        if _storage._subjectRange != rhs_storage._subjectRange {return false}
        if _storage._messageRange != rhs_storage._messageRange {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubInvitationRangeSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubInvitationRangeSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
  ]

  fileprivate class _StorageClass {
    var _count: Bgs_Protocol_UnsignedIntRange? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _count = source._count
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._count)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._count {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubInvitationRangeSet, rhs: Bgs_Protocol_Club_V1_ClubInvitationRangeSet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._count != rhs_storage._count {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubSuggestionRangeSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubSuggestionRangeSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
  ]

  fileprivate class _StorageClass {
    var _count: Bgs_Protocol_UnsignedIntRange? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _count = source._count
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._count)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._count {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubSuggestionRangeSet, rhs: Bgs_Protocol_Club_V1_ClubSuggestionRangeSet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._count != rhs_storage._count {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubTicketRangeSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubTicketRangeSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
  ]

  fileprivate class _StorageClass {
    var _count: Bgs_Protocol_UnsignedIntRange? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _count = source._count
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._count)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._count {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubTicketRangeSet, rhs: Bgs_Protocol_Club_V1_ClubTicketRangeSet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._count != rhs_storage._count {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubBanRangeSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubBanRangeSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
    3: .standard(proto: "reason_range"),
  ]

  fileprivate class _StorageClass {
    var _count: Bgs_Protocol_UnsignedIntRange? = nil
    var _reasonRange: Bgs_Protocol_UnsignedIntRange? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _count = source._count
      _reasonRange = source._reasonRange
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._count)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._reasonRange)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._count {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._reasonRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubBanRangeSet, rhs: Bgs_Protocol_Club_V1_ClubBanRangeSet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._count != rhs_storage._count {return false}
        if _storage._reasonRange != rhs_storage._reasonRange {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
