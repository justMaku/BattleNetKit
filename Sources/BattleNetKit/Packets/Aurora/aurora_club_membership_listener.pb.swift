// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/club_membership_listener.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Club_V1_Membership_ClubAddedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var membership: Bgs_Protocol_Club_V1_ClubMembershipDescription {
    get {return _storage._membership ?? Bgs_Protocol_Club_V1_ClubMembershipDescription()}
    set {_uniqueStorage()._membership = newValue}
  }
  /// Returns true if `membership` has been explicitly set.
  public var hasMembership: Bool {return _storage._membership != nil}
  /// Clears the value of `membership`. Subsequent reads from it will return its default value.
  public mutating func clearMembership() {_uniqueStorage()._membership = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_Membership_ClubRemovedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var memberID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._memberID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._memberID = newValue}
  }
  /// Returns true if `memberID` has been explicitly set.
  public var hasMemberID: Bool {return _storage._memberID != nil}
  /// Clears the value of `memberID`. Subsequent reads from it will return its default value.
  public mutating func clearMemberID() {_uniqueStorage()._memberID = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var reason: Bgs_Protocol_Club_V1_ClubRemovedReason {
    get {return _storage._reason ?? .none}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_uniqueStorage()._reason = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_Membership_ReceivedInvitationAddedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var invitation: Bgs_Protocol_Club_V1_ClubInvitation {
    get {return _storage._invitation ?? Bgs_Protocol_Club_V1_ClubInvitation()}
    set {_uniqueStorage()._invitation = newValue}
  }
  /// Returns true if `invitation` has been explicitly set.
  public var hasInvitation: Bool {return _storage._invitation != nil}
  /// Clears the value of `invitation`. Subsequent reads from it will return its default value.
  public mutating func clearInvitation() {_uniqueStorage()._invitation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_Membership_ReceivedInvitationRemovedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var invitationID: UInt64 {
    get {return _storage._invitationID ?? 0}
    set {_uniqueStorage()._invitationID = newValue}
  }
  /// Returns true if `invitationID` has been explicitly set.
  public var hasInvitationID: Bool {return _storage._invitationID != nil}
  /// Clears the value of `invitationID`. Subsequent reads from it will return its default value.
  public mutating func clearInvitationID() {_uniqueStorage()._invitationID = nil}

  public var reason: Bgs_Protocol_InvitationRemovedReason {
    get {return _storage._reason ?? .accepted}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_uniqueStorage()._reason = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_Membership_SharedSettingsChangedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._agentID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var assignment: Bgs_Protocol_Club_V1_ClubSharedSettingsAssignment {
    get {return _storage._assignment ?? Bgs_Protocol_Club_V1_ClubSharedSettingsAssignment()}
    set {_uniqueStorage()._assignment = newValue}
  }
  /// Returns true if `assignment` has been explicitly set.
  public var hasAssignment: Bool {return _storage._assignment != nil}
  /// Clears the value of `assignment`. Subsequent reads from it will return its default value.
  public mutating func clearAssignment() {_uniqueStorage()._assignment = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_Membership_StreamMentionAddedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._agentID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var mention: Bgs_Protocol_Club_V1_StreamMention {
    get {return _storage._mention ?? Bgs_Protocol_Club_V1_StreamMention()}
    set {_uniqueStorage()._mention = newValue}
  }
  /// Returns true if `mention` has been explicitly set.
  public var hasMention: Bool {return _storage._mention != nil}
  /// Clears the value of `mention`. Subsequent reads from it will return its default value.
  public mutating func clearMention() {_uniqueStorage()._mention = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_Membership_StreamMentionRemovedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._agentID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var mentionID: Bgs_Protocol_TimeSeriesId {
    get {return _storage._mentionID ?? Bgs_Protocol_TimeSeriesId()}
    set {_uniqueStorage()._mentionID = newValue}
  }
  /// Returns true if `mentionID` has been explicitly set.
  public var hasMentionID: Bool {return _storage._mentionID != nil}
  /// Clears the value of `mentionID`. Subsequent reads from it will return its default value.
  public mutating func clearMentionID() {_uniqueStorage()._mentionID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_Membership_StreamMentionAdvanceViewTimeNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._agentID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var viewTime: UInt64 {
    get {return _storage._viewTime ?? 0}
    set {_uniqueStorage()._viewTime = newValue}
  }
  /// Returns true if `viewTime` has been explicitly set.
  public var hasViewTime: Bool {return _storage._viewTime != nil}
  /// Clears the value of `viewTime`. Subsequent reads from it will return its default value.
  public mutating func clearViewTime() {_uniqueStorage()._viewTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.club.v1.membership"

extension Bgs_Protocol_Club_V1_Membership_ClubAddedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubAddedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .same(proto: "membership"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _membership: Bgs_Protocol_Club_V1_ClubMembershipDescription? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _membership = source._membership
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._membership, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._membership)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._membership {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_Membership_ClubAddedNotification, rhs: Bgs_Protocol_Club_V1_Membership_ClubAddedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._membership != rhs_storage._membership {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_Membership_ClubRemovedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubRemovedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "member_id"),
    4: .standard(proto: "club_id"),
    5: .same(proto: "reason"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _memberID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _clubID: UInt64? = nil
    var _reason: Bgs_Protocol_Club_V1_ClubRemovedReason? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _memberID = source._memberID
      _clubID = source._clubID
      _reason = source._reason
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._memberID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._memberID)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._reason)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._memberID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._reason {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_Membership_ClubRemovedNotification, rhs: Bgs_Protocol_Club_V1_Membership_ClubRemovedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._memberID != rhs_storage._memberID {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._reason != rhs_storage._reason {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_Membership_ReceivedInvitationAddedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReceivedInvitationAddedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .same(proto: "invitation"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _invitation: Bgs_Protocol_Club_V1_ClubInvitation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _invitation = source._invitation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._invitation, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._invitation)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._invitation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_Membership_ReceivedInvitationAddedNotification, rhs: Bgs_Protocol_Club_V1_Membership_ReceivedInvitationAddedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._invitation != rhs_storage._invitation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_Membership_ReceivedInvitationRemovedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReceivedInvitationRemovedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "invitation_id"),
    4: .same(proto: "reason"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _invitationID: UInt64? = nil
    var _reason: Bgs_Protocol_InvitationRemovedReason? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _invitationID = source._invitationID
      _reason = source._reason
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularFixed64Field(value: &_storage._invitationID)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._reason)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._invitationID {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._reason {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_Membership_ReceivedInvitationRemovedNotification, rhs: Bgs_Protocol_Club_V1_Membership_ReceivedInvitationRemovedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._invitationID != rhs_storage._invitationID {return false}
        if _storage._reason != rhs_storage._reason {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_Membership_SharedSettingsChangedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SharedSettingsChangedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    4: .same(proto: "assignment"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _assignment: Bgs_Protocol_Club_V1_ClubSharedSettingsAssignment? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _assignment = source._assignment
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._assignment)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._assignment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_Membership_SharedSettingsChangedNotification, rhs: Bgs_Protocol_Club_V1_Membership_SharedSettingsChangedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._assignment != rhs_storage._assignment {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_Membership_StreamMentionAddedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamMentionAddedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .same(proto: "mention"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _mention: Bgs_Protocol_Club_V1_StreamMention? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _mention = source._mention
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._mention, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._mention)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._mention {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_Membership_StreamMentionAddedNotification, rhs: Bgs_Protocol_Club_V1_Membership_StreamMentionAddedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._mention != rhs_storage._mention {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_Membership_StreamMentionRemovedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamMentionRemovedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "mention_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _mentionID: Bgs_Protocol_TimeSeriesId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _mentionID = source._mentionID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._mentionID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._mentionID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_Membership_StreamMentionRemovedNotification, rhs: Bgs_Protocol_Club_V1_Membership_StreamMentionRemovedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._mentionID != rhs_storage._mentionID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_Membership_StreamMentionAdvanceViewTimeNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StreamMentionAdvanceViewTimeNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "view_time"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _viewTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _viewTime = source._viewTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._viewTime)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._viewTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_Membership_StreamMentionAdvanceViewTimeNotification, rhs: Bgs_Protocol_Club_V1_Membership_StreamMentionAdvanceViewTimeNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._viewTime != rhs_storage._viewTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
