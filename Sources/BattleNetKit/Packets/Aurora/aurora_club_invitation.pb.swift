// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/club_invitation.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Club_V1_ClubSlot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var role: UInt32 {
    get {return _role ?? 0}
    set {_role = newValue}
  }
  /// Returns true if `role` has been explicitly set.
  public var hasRole: Bool {return self._role != nil}
  /// Clears the value of `role`. Subsequent reads from it will return its default value.
  public mutating func clearRole() {self._role = nil}

  public var defaultStreamID: UInt64 {
    get {return _defaultStreamID ?? 0}
    set {_defaultStreamID = newValue}
  }
  /// Returns true if `defaultStreamID` has been explicitly set.
  public var hasDefaultStreamID: Bool {return self._defaultStreamID != nil}
  /// Clears the value of `defaultStreamID`. Subsequent reads from it will return its default value.
  public mutating func clearDefaultStreamID() {self._defaultStreamID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _role: UInt32? = nil
  fileprivate var _defaultStreamID: UInt64? = nil
}

public struct Bgs_Protocol_Club_V1_SendInvitationOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var targetID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._targetID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_uniqueStorage()._targetID = nil}

  public var slot: Bgs_Protocol_Club_V1_ClubSlot {
    get {return _storage._slot ?? Bgs_Protocol_Club_V1_ClubSlot()}
    set {_uniqueStorage()._slot = newValue}
  }
  /// Returns true if `slot` has been explicitly set.
  public var hasSlot: Bool {return _storage._slot != nil}
  /// Clears the value of `slot`. Subsequent reads from it will return its default value.
  public mutating func clearSlot() {_uniqueStorage()._slot = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubInvitation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var inviter: Bgs_Protocol_Club_V1_MemberDescription {
    get {return _storage._inviter ?? Bgs_Protocol_Club_V1_MemberDescription()}
    set {_uniqueStorage()._inviter = newValue}
  }
  /// Returns true if `inviter` has been explicitly set.
  public var hasInviter: Bool {return _storage._inviter != nil}
  /// Clears the value of `inviter`. Subsequent reads from it will return its default value.
  public mutating func clearInviter() {_uniqueStorage()._inviter = nil}

  public var invitee: Bgs_Protocol_Club_V1_MemberDescription {
    get {return _storage._invitee ?? Bgs_Protocol_Club_V1_MemberDescription()}
    set {_uniqueStorage()._invitee = newValue}
  }
  /// Returns true if `invitee` has been explicitly set.
  public var hasInvitee: Bool {return _storage._invitee != nil}
  /// Clears the value of `invitee`. Subsequent reads from it will return its default value.
  public mutating func clearInvitee() {_uniqueStorage()._invitee = nil}

  public var club: Bgs_Protocol_Club_V1_ClubDescription {
    get {return _storage._club ?? Bgs_Protocol_Club_V1_ClubDescription()}
    set {_uniqueStorage()._club = newValue}
  }
  /// Returns true if `club` has been explicitly set.
  public var hasClub: Bool {return _storage._club != nil}
  /// Clears the value of `club`. Subsequent reads from it will return its default value.
  public mutating func clearClub() {_uniqueStorage()._club = nil}

  public var slot: Bgs_Protocol_Club_V1_ClubSlot {
    get {return _storage._slot ?? Bgs_Protocol_Club_V1_ClubSlot()}
    set {_uniqueStorage()._slot = newValue}
  }
  /// Returns true if `slot` has been explicitly set.
  public var hasSlot: Bool {return _storage._slot != nil}
  /// Clears the value of `slot`. Subsequent reads from it will return its default value.
  public mutating func clearSlot() {_uniqueStorage()._slot = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_uniqueStorage()._creationTime = nil}

  public var expirationTime: UInt64 {
    get {return _storage._expirationTime ?? 0}
    set {_uniqueStorage()._expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  public var hasExpirationTime: Bool {return _storage._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationTime() {_uniqueStorage()._expirationTime = nil}

  public var suggester: Bgs_Protocol_Club_V1_MemberDescription {
    get {return _storage._suggester ?? Bgs_Protocol_Club_V1_MemberDescription()}
    set {_uniqueStorage()._suggester = newValue}
  }
  /// Returns true if `suggester` has been explicitly set.
  public var hasSuggester: Bool {return _storage._suggester != nil}
  /// Clears the value of `suggester`. Subsequent reads from it will return its default value.
  public mutating func clearSuggester() {_uniqueStorage()._suggester = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_SendSuggestionOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var targetID: Bgs_Protocol_Club_V1_MemberId {
    get {return _storage._targetID ?? Bgs_Protocol_Club_V1_MemberId()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_uniqueStorage()._targetID = nil}

  public var slot: Bgs_Protocol_Club_V1_ClubSlot {
    get {return _storage._slot ?? Bgs_Protocol_Club_V1_ClubSlot()}
    set {_uniqueStorage()._slot = newValue}
  }
  /// Returns true if `slot` has been explicitly set.
  public var hasSlot: Bool {return _storage._slot != nil}
  /// Clears the value of `slot`. Subsequent reads from it will return its default value.
  public mutating func clearSlot() {_uniqueStorage()._slot = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubSuggestion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id ?? 0}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var clubID: UInt64 {
    get {return _storage._clubID ?? 0}
    set {_uniqueStorage()._clubID = newValue}
  }
  /// Returns true if `clubID` has been explicitly set.
  public var hasClubID: Bool {return _storage._clubID != nil}
  /// Clears the value of `clubID`. Subsequent reads from it will return its default value.
  public mutating func clearClubID() {_uniqueStorage()._clubID = nil}

  public var suggester: Bgs_Protocol_Club_V1_MemberDescription {
    get {return _storage._suggester ?? Bgs_Protocol_Club_V1_MemberDescription()}
    set {_uniqueStorage()._suggester = newValue}
  }
  /// Returns true if `suggester` has been explicitly set.
  public var hasSuggester: Bool {return _storage._suggester != nil}
  /// Clears the value of `suggester`. Subsequent reads from it will return its default value.
  public mutating func clearSuggester() {_uniqueStorage()._suggester = nil}

  public var suggestee: Bgs_Protocol_Club_V1_MemberDescription {
    get {return _storage._suggestee ?? Bgs_Protocol_Club_V1_MemberDescription()}
    set {_uniqueStorage()._suggestee = newValue}
  }
  /// Returns true if `suggestee` has been explicitly set.
  public var hasSuggestee: Bool {return _storage._suggestee != nil}
  /// Clears the value of `suggestee`. Subsequent reads from it will return its default value.
  public mutating func clearSuggestee() {_uniqueStorage()._suggestee = nil}

  public var slot: Bgs_Protocol_Club_V1_ClubSlot {
    get {return _storage._slot ?? Bgs_Protocol_Club_V1_ClubSlot()}
    set {_uniqueStorage()._slot = newValue}
  }
  /// Returns true if `slot` has been explicitly set.
  public var hasSlot: Bool {return _storage._slot != nil}
  /// Clears the value of `slot`. Subsequent reads from it will return its default value.
  public mutating func clearSlot() {_uniqueStorage()._slot = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_uniqueStorage()._creationTime = nil}

  public var expirationTime: UInt64 {
    get {return _storage._expirationTime ?? 0}
    set {_uniqueStorage()._expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  public var hasExpirationTime: Bool {return _storage._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationTime() {_uniqueStorage()._expirationTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_CreateTicketOptions {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var slot: Bgs_Protocol_Club_V1_ClubSlot {
    get {return _storage._slot ?? Bgs_Protocol_Club_V1_ClubSlot()}
    set {_uniqueStorage()._slot = newValue}
  }
  /// Returns true if `slot` has been explicitly set.
  public var hasSlot: Bool {return _storage._slot != nil}
  /// Clears the value of `slot`. Subsequent reads from it will return its default value.
  public mutating func clearSlot() {_uniqueStorage()._slot = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var allowedRedeemCount: UInt32 {
    get {return _storage._allowedRedeemCount ?? 0}
    set {_uniqueStorage()._allowedRedeemCount = newValue}
  }
  /// Returns true if `allowedRedeemCount` has been explicitly set.
  public var hasAllowedRedeemCount: Bool {return _storage._allowedRedeemCount != nil}
  /// Clears the value of `allowedRedeemCount`. Subsequent reads from it will return its default value.
  public mutating func clearAllowedRedeemCount() {_uniqueStorage()._allowedRedeemCount = nil}

  public var expirationTime: UInt64 {
    get {return _storage._expirationTime ?? 0}
    set {_uniqueStorage()._expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  public var hasExpirationTime: Bool {return _storage._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationTime() {_uniqueStorage()._expirationTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Club_V1_ClubTicket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: String {
    get {return _storage._id ?? String()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {_uniqueStorage()._id = nil}

  public var creator: Bgs_Protocol_Club_V1_MemberDescription {
    get {return _storage._creator ?? Bgs_Protocol_Club_V1_MemberDescription()}
    set {_uniqueStorage()._creator = newValue}
  }
  /// Returns true if `creator` has been explicitly set.
  public var hasCreator: Bool {return _storage._creator != nil}
  /// Clears the value of `creator`. Subsequent reads from it will return its default value.
  public mutating func clearCreator() {_uniqueStorage()._creator = nil}

  public var club: Bgs_Protocol_Club_V1_ClubDescription {
    get {return _storage._club ?? Bgs_Protocol_Club_V1_ClubDescription()}
    set {_uniqueStorage()._club = newValue}
  }
  /// Returns true if `club` has been explicitly set.
  public var hasClub: Bool {return _storage._club != nil}
  /// Clears the value of `club`. Subsequent reads from it will return its default value.
  public mutating func clearClub() {_uniqueStorage()._club = nil}

  public var slot: Bgs_Protocol_Club_V1_ClubSlot {
    get {return _storage._slot ?? Bgs_Protocol_Club_V1_ClubSlot()}
    set {_uniqueStorage()._slot = newValue}
  }
  /// Returns true if `slot` has been explicitly set.
  public var hasSlot: Bool {return _storage._slot != nil}
  /// Clears the value of `slot`. Subsequent reads from it will return its default value.
  public mutating func clearSlot() {_uniqueStorage()._slot = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var currentRedeemCount: UInt32 {
    get {return _storage._currentRedeemCount ?? 0}
    set {_uniqueStorage()._currentRedeemCount = newValue}
  }
  /// Returns true if `currentRedeemCount` has been explicitly set.
  public var hasCurrentRedeemCount: Bool {return _storage._currentRedeemCount != nil}
  /// Clears the value of `currentRedeemCount`. Subsequent reads from it will return its default value.
  public mutating func clearCurrentRedeemCount() {_uniqueStorage()._currentRedeemCount = nil}

  public var allowedRedeemCount: UInt32 {
    get {return _storage._allowedRedeemCount ?? 0}
    set {_uniqueStorage()._allowedRedeemCount = newValue}
  }
  /// Returns true if `allowedRedeemCount` has been explicitly set.
  public var hasAllowedRedeemCount: Bool {return _storage._allowedRedeemCount != nil}
  /// Clears the value of `allowedRedeemCount`. Subsequent reads from it will return its default value.
  public mutating func clearAllowedRedeemCount() {_uniqueStorage()._allowedRedeemCount = nil}

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_uniqueStorage()._creationTime = nil}

  public var expirationTime: UInt64 {
    get {return _storage._expirationTime ?? 0}
    set {_uniqueStorage()._expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  public var hasExpirationTime: Bool {return _storage._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationTime() {_uniqueStorage()._expirationTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.club.v1"

extension Bgs_Protocol_Club_V1_ClubSlot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubSlot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "role"),
    2: .standard(proto: "default_stream_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._role)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._defaultStreamID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._role {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._defaultStreamID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubSlot, rhs: Bgs_Protocol_Club_V1_ClubSlot) -> Bool {
    if lhs._role != rhs._role {return false}
    if lhs._defaultStreamID != rhs._defaultStreamID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_SendInvitationOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SendInvitationOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_id"),
    2: .same(proto: "slot"),
    3: .same(proto: "attribute"),
  ]

  fileprivate class _StorageClass {
    var _targetID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _slot: Bgs_Protocol_Club_V1_ClubSlot? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _targetID = source._targetID
      _slot = source._slot
      _attribute = source._attribute
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._targetID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._slot)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._slot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_SendInvitationOptions, rhs: Bgs_Protocol_Club_V1_SendInvitationOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._targetID != rhs_storage._targetID {return false}
        if _storage._slot != rhs_storage._slot {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubInvitation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubInvitation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "inviter"),
    3: .same(proto: "invitee"),
    4: .same(proto: "club"),
    5: .same(proto: "slot"),
    6: .same(proto: "attribute"),
    7: .standard(proto: "creation_time"),
    8: .standard(proto: "expiration_time"),
    9: .same(proto: "suggester"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64? = nil
    var _inviter: Bgs_Protocol_Club_V1_MemberDescription? = nil
    var _invitee: Bgs_Protocol_Club_V1_MemberDescription? = nil
    var _club: Bgs_Protocol_Club_V1_ClubDescription? = nil
    var _slot: Bgs_Protocol_Club_V1_ClubSlot? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _creationTime: UInt64? = nil
    var _expirationTime: UInt64? = nil
    var _suggester: Bgs_Protocol_Club_V1_MemberDescription? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _inviter = source._inviter
      _invitee = source._invitee
      _club = source._club
      _slot = source._slot
      _attribute = source._attribute
      _creationTime = source._creationTime
      _expirationTime = source._expirationTime
      _suggester = source._suggester
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._inviter, !v.isInitialized {return false}
      if let v = _storage._invitee, !v.isInitialized {return false}
      if let v = _storage._club, !v.isInitialized {return false}
      if let v = _storage._suggester, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFixed64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._inviter)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._invitee)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._club)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._slot)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 7: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        case 8: try decoder.decodeSingularUInt64Field(value: &_storage._expirationTime)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._suggester)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._inviter {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._invitee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._club {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._slot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 6)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._expirationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._suggester {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubInvitation, rhs: Bgs_Protocol_Club_V1_ClubInvitation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._inviter != rhs_storage._inviter {return false}
        if _storage._invitee != rhs_storage._invitee {return false}
        if _storage._club != rhs_storage._club {return false}
        if _storage._slot != rhs_storage._slot {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._creationTime != rhs_storage._creationTime {return false}
        if _storage._expirationTime != rhs_storage._expirationTime {return false}
        if _storage._suggester != rhs_storage._suggester {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_SendSuggestionOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SendSuggestionOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_id"),
    2: .same(proto: "slot"),
    3: .same(proto: "attribute"),
  ]

  fileprivate class _StorageClass {
    var _targetID: Bgs_Protocol_Club_V1_MemberId? = nil
    var _slot: Bgs_Protocol_Club_V1_ClubSlot? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _targetID = source._targetID
      _slot = source._slot
      _attribute = source._attribute
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._targetID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._slot)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._slot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_SendSuggestionOptions, rhs: Bgs_Protocol_Club_V1_SendSuggestionOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._targetID != rhs_storage._targetID {return false}
        if _storage._slot != rhs_storage._slot {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubSuggestion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubSuggestion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "club_id"),
    3: .same(proto: "suggester"),
    4: .same(proto: "suggestee"),
    5: .same(proto: "slot"),
    6: .same(proto: "attribute"),
    7: .standard(proto: "creation_time"),
    8: .standard(proto: "expiration_time"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64? = nil
    var _clubID: UInt64? = nil
    var _suggester: Bgs_Protocol_Club_V1_MemberDescription? = nil
    var _suggestee: Bgs_Protocol_Club_V1_MemberDescription? = nil
    var _slot: Bgs_Protocol_Club_V1_ClubSlot? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _creationTime: UInt64? = nil
    var _expirationTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _clubID = source._clubID
      _suggester = source._suggester
      _suggestee = source._suggestee
      _slot = source._slot
      _attribute = source._attribute
      _creationTime = source._creationTime
      _expirationTime = source._expirationTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._suggester, !v.isInitialized {return false}
      if let v = _storage._suggestee, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFixed64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._clubID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._suggester)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._suggestee)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._slot)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 7: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        case 8: try decoder.decodeSingularUInt64Field(value: &_storage._expirationTime)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._clubID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._suggester {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._suggestee {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._slot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 6)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._expirationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubSuggestion, rhs: Bgs_Protocol_Club_V1_ClubSuggestion) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._clubID != rhs_storage._clubID {return false}
        if _storage._suggester != rhs_storage._suggester {return false}
        if _storage._suggestee != rhs_storage._suggestee {return false}
        if _storage._slot != rhs_storage._slot {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._creationTime != rhs_storage._creationTime {return false}
        if _storage._expirationTime != rhs_storage._expirationTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_CreateTicketOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateTicketOptions"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "slot"),
    2: .same(proto: "attribute"),
    3: .standard(proto: "allowed_redeem_count"),
    4: .standard(proto: "expiration_time"),
  ]

  fileprivate class _StorageClass {
    var _slot: Bgs_Protocol_Club_V1_ClubSlot? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _allowedRedeemCount: UInt32? = nil
    var _expirationTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _slot = source._slot
      _attribute = source._attribute
      _allowedRedeemCount = source._allowedRedeemCount
      _expirationTime = source._expirationTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._slot)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._allowedRedeemCount)
        case 4: try decoder.decodeSingularUInt64Field(value: &_storage._expirationTime)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._slot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 2)
      }
      if let v = _storage._allowedRedeemCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._expirationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_CreateTicketOptions, rhs: Bgs_Protocol_Club_V1_CreateTicketOptions) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._slot != rhs_storage._slot {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._allowedRedeemCount != rhs_storage._allowedRedeemCount {return false}
        if _storage._expirationTime != rhs_storage._expirationTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Club_V1_ClubTicket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClubTicket"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "creator"),
    3: .same(proto: "club"),
    4: .same(proto: "slot"),
    5: .same(proto: "attribute"),
    6: .standard(proto: "current_redeem_count"),
    7: .standard(proto: "allowed_redeem_count"),
    8: .standard(proto: "creation_time"),
    9: .standard(proto: "expiration_time"),
  ]

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _creator: Bgs_Protocol_Club_V1_MemberDescription? = nil
    var _club: Bgs_Protocol_Club_V1_ClubDescription? = nil
    var _slot: Bgs_Protocol_Club_V1_ClubSlot? = nil
    var _attribute: [Bgs_Protocol_V2_Attribute] = []
    var _currentRedeemCount: UInt32? = nil
    var _allowedRedeemCount: UInt32? = nil
    var _creationTime: UInt64? = nil
    var _expirationTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _creator = source._creator
      _club = source._club
      _slot = source._slot
      _attribute = source._attribute
      _currentRedeemCount = source._currentRedeemCount
      _allowedRedeemCount = source._allowedRedeemCount
      _creationTime = source._creationTime
      _expirationTime = source._expirationTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._creator, !v.isInitialized {return false}
      if let v = _storage._club, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._creator)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._club)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._slot)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 6: try decoder.decodeSingularUInt32Field(value: &_storage._currentRedeemCount)
        case 7: try decoder.decodeSingularUInt32Field(value: &_storage._allowedRedeemCount)
        case 8: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        case 9: try decoder.decodeSingularUInt64Field(value: &_storage._expirationTime)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._creator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._club {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._slot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 5)
      }
      if let v = _storage._currentRedeemCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._allowedRedeemCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
      }
      if let v = _storage._expirationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Club_V1_ClubTicket, rhs: Bgs_Protocol_Club_V1_ClubTicket) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._creator != rhs_storage._creator {return false}
        if _storage._club != rhs_storage._club {return false}
        if _storage._slot != rhs_storage._slot {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        if _storage._currentRedeemCount != rhs_storage._currentRedeemCount {return false}
        if _storage._allowedRedeemCount != rhs_storage._allowedRedeemCount {return false}
        if _storage._creationTime != rhs_storage._creationTime {return false}
        if _storage._expirationTime != rhs_storage._expirationTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
