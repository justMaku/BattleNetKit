// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/user_manager_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_UserManager_V1_SubscribeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var objectID: UInt64 {
    get {return _storage._objectID ?? 0}
    set {_uniqueStorage()._objectID = newValue}
  }
  /// Returns true if `objectID` has been explicitly set.
  public var hasObjectID: Bool {return _storage._objectID != nil}
  /// Clears the value of `objectID`. Subsequent reads from it will return its default value.
  public mutating func clearObjectID() {_uniqueStorage()._objectID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_UserManager_V1_SubscribeResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var blockedPlayers: [Bgs_Protocol_UserManager_V1_BlockedPlayer] = []

  public var recentPlayers: [Bgs_Protocol_UserManager_V1_RecentPlayer] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Bgs_Protocol_UserManager_V1_UnsubscribeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var objectID: UInt64 {
    get {return _storage._objectID ?? 0}
    set {_uniqueStorage()._objectID = newValue}
  }
  /// Returns true if `objectID` has been explicitly set.
  public var hasObjectID: Bool {return _storage._objectID != nil}
  /// Clears the value of `objectID`. Subsequent reads from it will return its default value.
  public mutating func clearObjectID() {_uniqueStorage()._objectID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_UserManager_V1_AddRecentPlayersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var players: [Bgs_Protocol_UserManager_V1_RecentPlayer] {
    get {return _storage._players}
    set {_uniqueStorage()._players = newValue}
  }

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var program: UInt32 {
    get {return _storage._program ?? 0}
    set {_uniqueStorage()._program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return _storage._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {_uniqueStorage()._program = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_UserManager_V1_ClearRecentPlayersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var program: UInt32 {
    get {return _storage._program ?? 0}
    set {_uniqueStorage()._program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return _storage._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {_uniqueStorage()._program = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_UserManager_V1_BlockPlayerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var targetID: Bgs_Protocol_EntityId {
    get {return _storage._targetID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_uniqueStorage()._targetID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_UserManager_V1_UnblockPlayerRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var targetID: Bgs_Protocol_EntityId {
    get {return _storage._targetID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_uniqueStorage()._targetID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_UserManager_V1_BlockedPlayerAddedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var player: Bgs_Protocol_UserManager_V1_BlockedPlayer {
    get {return _storage._player ?? Bgs_Protocol_UserManager_V1_BlockedPlayer()}
    set {_uniqueStorage()._player = newValue}
  }
  /// Returns true if `player` has been explicitly set.
  public var hasPlayer: Bool {return _storage._player != nil}
  /// Clears the value of `player`. Subsequent reads from it will return its default value.
  public mutating func clearPlayer() {_uniqueStorage()._player = nil}

  public var gameAccountID: Bgs_Protocol_EntityId {
    get {return _storage._gameAccountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._gameAccountID = newValue}
  }
  /// Returns true if `gameAccountID` has been explicitly set.
  public var hasGameAccountID: Bool {return _storage._gameAccountID != nil}
  /// Clears the value of `gameAccountID`. Subsequent reads from it will return its default value.
  public mutating func clearGameAccountID() {_uniqueStorage()._gameAccountID = nil}

  public var accountID: Bgs_Protocol_EntityId {
    get {return _storage._accountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return _storage._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {_uniqueStorage()._accountID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_UserManager_V1_BlockedPlayerRemovedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var player: Bgs_Protocol_UserManager_V1_BlockedPlayer {
    get {return _storage._player ?? Bgs_Protocol_UserManager_V1_BlockedPlayer()}
    set {_uniqueStorage()._player = newValue}
  }
  /// Returns true if `player` has been explicitly set.
  public var hasPlayer: Bool {return _storage._player != nil}
  /// Clears the value of `player`. Subsequent reads from it will return its default value.
  public mutating func clearPlayer() {_uniqueStorage()._player = nil}

  public var gameAccountID: Bgs_Protocol_EntityId {
    get {return _storage._gameAccountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._gameAccountID = newValue}
  }
  /// Returns true if `gameAccountID` has been explicitly set.
  public var hasGameAccountID: Bool {return _storage._gameAccountID != nil}
  /// Clears the value of `gameAccountID`. Subsequent reads from it will return its default value.
  public mutating func clearGameAccountID() {_uniqueStorage()._gameAccountID = nil}

  public var accountID: Bgs_Protocol_EntityId {
    get {return _storage._accountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return _storage._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {_uniqueStorage()._accountID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_UserManager_V1_RecentPlayersAddedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var player: [Bgs_Protocol_UserManager_V1_RecentPlayer] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Bgs_Protocol_UserManager_V1_RecentPlayersRemovedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var player: [Bgs_Protocol_UserManager_V1_RecentPlayer] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.user_manager.v1"

extension Bgs_Protocol_UserManager_V1_SubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "object_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _objectID: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _objectID = source._objectID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._objectID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._objectID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._objectID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_UserManager_V1_SubscribeRequest, rhs: Bgs_Protocol_UserManager_V1_SubscribeRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._objectID != rhs_storage._objectID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_UserManager_V1_SubscribeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "blocked_players"),
    2: .standard(proto: "recent_players"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.blockedPlayers) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.recentPlayers) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.blockedPlayers)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.recentPlayers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.blockedPlayers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.blockedPlayers, fieldNumber: 1)
    }
    if !self.recentPlayers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.recentPlayers, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_UserManager_V1_SubscribeResponse, rhs: Bgs_Protocol_UserManager_V1_SubscribeResponse) -> Bool {
    if lhs.blockedPlayers != rhs.blockedPlayers {return false}
    if lhs.recentPlayers != rhs.recentPlayers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_UserManager_V1_UnsubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnsubscribeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "object_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _objectID: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _objectID = source._objectID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._objectID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._objectID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_UserManager_V1_UnsubscribeRequest, rhs: Bgs_Protocol_UserManager_V1_UnsubscribeRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._objectID != rhs_storage._objectID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_UserManager_V1_AddRecentPlayersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddRecentPlayersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "players"),
    2: .standard(proto: "agent_id"),
    3: .same(proto: "program"),
  ]

  fileprivate class _StorageClass {
    var _players: [Bgs_Protocol_UserManager_V1_RecentPlayer] = []
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _program: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _players = source._players
      _agentID = source._agentID
      _program = source._program
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._players) {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._players)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._program)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._players.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._players, fieldNumber: 1)
      }
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._program {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_UserManager_V1_AddRecentPlayersRequest, rhs: Bgs_Protocol_UserManager_V1_AddRecentPlayersRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._players != rhs_storage._players {return false}
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._program != rhs_storage._program {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_UserManager_V1_ClearRecentPlayersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClearRecentPlayersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .same(proto: "program"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _program: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _program = source._program
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._program)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._program {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_UserManager_V1_ClearRecentPlayersRequest, rhs: Bgs_Protocol_UserManager_V1_ClearRecentPlayersRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._program != rhs_storage._program {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_UserManager_V1_BlockPlayerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BlockPlayerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "target_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _targetID: Bgs_Protocol_EntityId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _targetID = source._targetID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._targetID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._targetID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_UserManager_V1_BlockPlayerRequest, rhs: Bgs_Protocol_UserManager_V1_BlockPlayerRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._targetID != rhs_storage._targetID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_UserManager_V1_UnblockPlayerRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnblockPlayerRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "target_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _targetID: Bgs_Protocol_EntityId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _targetID = source._targetID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._targetID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._targetID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_UserManager_V1_UnblockPlayerRequest, rhs: Bgs_Protocol_UserManager_V1_UnblockPlayerRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._targetID != rhs_storage._targetID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_UserManager_V1_BlockedPlayerAddedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BlockedPlayerAddedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "player"),
    2: .standard(proto: "game_account_id"),
    3: .standard(proto: "account_id"),
  ]

  fileprivate class _StorageClass {
    var _player: Bgs_Protocol_UserManager_V1_BlockedPlayer? = nil
    var _gameAccountID: Bgs_Protocol_EntityId? = nil
    var _accountID: Bgs_Protocol_EntityId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _player = source._player
      _gameAccountID = source._gameAccountID
      _accountID = source._accountID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._player == nil {return false}
      if let v = _storage._player, !v.isInitialized {return false}
      if let v = _storage._gameAccountID, !v.isInitialized {return false}
      if let v = _storage._accountID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._player)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._gameAccountID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._accountID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._player {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._gameAccountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._accountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_UserManager_V1_BlockedPlayerAddedNotification, rhs: Bgs_Protocol_UserManager_V1_BlockedPlayerAddedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._player != rhs_storage._player {return false}
        if _storage._gameAccountID != rhs_storage._gameAccountID {return false}
        if _storage._accountID != rhs_storage._accountID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_UserManager_V1_BlockedPlayerRemovedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BlockedPlayerRemovedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "player"),
    2: .standard(proto: "game_account_id"),
    3: .standard(proto: "account_id"),
  ]

  fileprivate class _StorageClass {
    var _player: Bgs_Protocol_UserManager_V1_BlockedPlayer? = nil
    var _gameAccountID: Bgs_Protocol_EntityId? = nil
    var _accountID: Bgs_Protocol_EntityId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _player = source._player
      _gameAccountID = source._gameAccountID
      _accountID = source._accountID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._player == nil {return false}
      if let v = _storage._player, !v.isInitialized {return false}
      if let v = _storage._gameAccountID, !v.isInitialized {return false}
      if let v = _storage._accountID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._player)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._gameAccountID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._accountID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._player {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._gameAccountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._accountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_UserManager_V1_BlockedPlayerRemovedNotification, rhs: Bgs_Protocol_UserManager_V1_BlockedPlayerRemovedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._player != rhs_storage._player {return false}
        if _storage._gameAccountID != rhs_storage._gameAccountID {return false}
        if _storage._accountID != rhs_storage._accountID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_UserManager_V1_RecentPlayersAddedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RecentPlayersAddedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "player"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.player) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.player)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.player.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.player, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_UserManager_V1_RecentPlayersAddedNotification, rhs: Bgs_Protocol_UserManager_V1_RecentPlayersAddedNotification) -> Bool {
    if lhs.player != rhs.player {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_UserManager_V1_RecentPlayersRemovedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RecentPlayersRemovedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "player"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.player) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.player)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.player.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.player, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_UserManager_V1_RecentPlayersRemovedNotification, rhs: Bgs_Protocol_UserManager_V1_RecentPlayersRemovedNotification) -> Bool {
    if lhs.player != rhs.player {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
