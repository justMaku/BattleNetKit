// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/friends_service.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Friends_V1_SubscribeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var objectID: UInt64 {
    get {return _storage._objectID ?? 0}
    set {_uniqueStorage()._objectID = newValue}
  }
  /// Returns true if `objectID` has been explicitly set.
  public var hasObjectID: Bool {return _storage._objectID != nil}
  /// Clears the value of `objectID`. Subsequent reads from it will return its default value.
  public mutating func clearObjectID() {_uniqueStorage()._objectID = nil}

  public var forward: Bgs_Protocol_ObjectAddress {
    get {return _storage._forward ?? Bgs_Protocol_ObjectAddress()}
    set {_uniqueStorage()._forward = newValue}
  }
  /// Returns true if `forward` has been explicitly set.
  public var hasForward: Bool {return _storage._forward != nil}
  /// Clears the value of `forward`. Subsequent reads from it will return its default value.
  public mutating func clearForward() {_uniqueStorage()._forward = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_UnsubscribeRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var objectID: UInt64 {
    get {return _storage._objectID ?? 0}
    set {_uniqueStorage()._objectID = newValue}
  }
  /// Returns true if `objectID` has been explicitly set.
  public var hasObjectID: Bool {return _storage._objectID != nil}
  /// Clears the value of `objectID`. Subsequent reads from it will return its default value.
  public mutating func clearObjectID() {_uniqueStorage()._objectID = nil}

  public var forward: Bgs_Protocol_ObjectAddress {
    get {return _storage._forward ?? Bgs_Protocol_ObjectAddress()}
    set {_uniqueStorage()._forward = newValue}
  }
  /// Returns true if `forward` has been explicitly set.
  public var hasForward: Bool {return _storage._forward != nil}
  /// Clears the value of `forward`. Subsequent reads from it will return its default value.
  public mutating func clearForward() {_uniqueStorage()._forward = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_SendInvitationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentIdentity: Bgs_Protocol_Identity {
    get {return _storage._agentIdentity ?? Bgs_Protocol_Identity()}
    set {_uniqueStorage()._agentIdentity = newValue}
  }
  /// Returns true if `agentIdentity` has been explicitly set.
  public var hasAgentIdentity: Bool {return _storage._agentIdentity != nil}
  /// Clears the value of `agentIdentity`. Subsequent reads from it will return its default value.
  public mutating func clearAgentIdentity() {_uniqueStorage()._agentIdentity = nil}

  public var targetID: Bgs_Protocol_EntityId {
    get {return _storage._targetID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_uniqueStorage()._targetID = nil}

  public var params: Bgs_Protocol_InvitationParams {
    get {return _storage._params ?? Bgs_Protocol_InvitationParams()}
    set {_uniqueStorage()._params = newValue}
  }
  /// Returns true if `params` has been explicitly set.
  public var hasParams: Bool {return _storage._params != nil}
  /// Clears the value of `params`. Subsequent reads from it will return its default value.
  public mutating func clearParams() {_uniqueStorage()._params = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_RevokeInvitationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var invitationID: UInt64 {
    get {return _storage._invitationID ?? 0}
    set {_uniqueStorage()._invitationID = newValue}
  }
  /// Returns true if `invitationID` has been explicitly set.
  public var hasInvitationID: Bool {return _storage._invitationID != nil}
  /// Clears the value of `invitationID`. Subsequent reads from it will return its default value.
  public mutating func clearInvitationID() {_uniqueStorage()._invitationID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_AcceptInvitationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var invitationID: UInt64 {
    get {return _storage._invitationID ?? 0}
    set {_uniqueStorage()._invitationID = newValue}
  }
  /// Returns true if `invitationID` has been explicitly set.
  public var hasInvitationID: Bool {return _storage._invitationID != nil}
  /// Clears the value of `invitationID`. Subsequent reads from it will return its default value.
  public mutating func clearInvitationID() {_uniqueStorage()._invitationID = nil}

  public var options: Bgs_Protocol_Friends_V1_AcceptInvitationOptions {
    get {return _storage._options ?? Bgs_Protocol_Friends_V1_AcceptInvitationOptions()}
    set {_uniqueStorage()._options = newValue}
  }
  /// Returns true if `options` has been explicitly set.
  public var hasOptions: Bool {return _storage._options != nil}
  /// Clears the value of `options`. Subsequent reads from it will return its default value.
  public mutating func clearOptions() {_uniqueStorage()._options = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_DeclineInvitationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var invitationID: UInt64 {
    get {return _storage._invitationID ?? 0}
    set {_uniqueStorage()._invitationID = newValue}
  }
  /// Returns true if `invitationID` has been explicitly set.
  public var hasInvitationID: Bool {return _storage._invitationID != nil}
  /// Clears the value of `invitationID`. Subsequent reads from it will return its default value.
  public mutating func clearInvitationID() {_uniqueStorage()._invitationID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_IgnoreInvitationRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var invitationID: UInt64 {
    get {return _storage._invitationID ?? 0}
    set {_uniqueStorage()._invitationID = newValue}
  }
  /// Returns true if `invitationID` has been explicitly set.
  public var hasInvitationID: Bool {return _storage._invitationID != nil}
  /// Clears the value of `invitationID`. Subsequent reads from it will return its default value.
  public mutating func clearInvitationID() {_uniqueStorage()._invitationID = nil}

  public var program: UInt32 {
    get {return _storage._program ?? 0}
    set {_uniqueStorage()._program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return _storage._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {_uniqueStorage()._program = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_RemoveFriendRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var targetID: Bgs_Protocol_EntityId {
    get {return _storage._targetID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_uniqueStorage()._targetID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_RevokeAllInvitationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_ViewFriendsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var targetID: Bgs_Protocol_EntityId {
    get {return _storage._targetID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_uniqueStorage()._targetID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_ViewFriendsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var friends: [Bgs_Protocol_Friends_V1_FriendOfFriend] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Bgs_Protocol_Friends_V1_UpdateFriendStateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var targetID: Bgs_Protocol_EntityId {
    get {return _storage._targetID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_uniqueStorage()._targetID = nil}

  public var attribute: [Bgs_Protocol_Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_GetFriendListRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_GetFriendListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var friends: [Bgs_Protocol_Friends_V1_Friend] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Bgs_Protocol_Friends_V1_CreateFriendshipRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var agentID: Bgs_Protocol_EntityId {
    get {return _storage._agentID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._agentID = newValue}
  }
  /// Returns true if `agentID` has been explicitly set.
  public var hasAgentID: Bool {return _storage._agentID != nil}
  /// Clears the value of `agentID`. Subsequent reads from it will return its default value.
  public mutating func clearAgentID() {_uniqueStorage()._agentID = nil}

  public var targetID: Bgs_Protocol_EntityId {
    get {return _storage._targetID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_uniqueStorage()._targetID = nil}

  public var role: [UInt32] {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_FriendNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var target: Bgs_Protocol_Friends_V1_Friend {
    get {return _storage._target ?? Bgs_Protocol_Friends_V1_Friend()}
    set {_uniqueStorage()._target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  public var hasTarget: Bool {return _storage._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  public mutating func clearTarget() {_uniqueStorage()._target = nil}

  public var accountID: Bgs_Protocol_EntityId {
    get {return _storage._accountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return _storage._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {_uniqueStorage()._accountID = nil}

  public var forward: Bgs_Protocol_ObjectAddress {
    get {return _storage._forward ?? Bgs_Protocol_ObjectAddress()}
    set {_uniqueStorage()._forward = newValue}
  }
  /// Returns true if `forward` has been explicitly set.
  public var hasForward: Bool {return _storage._forward != nil}
  /// Clears the value of `forward`. Subsequent reads from it will return its default value.
  public mutating func clearForward() {_uniqueStorage()._forward = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_UpdateFriendStateNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var changedFriend: Bgs_Protocol_Friends_V1_Friend {
    get {return _storage._changedFriend ?? Bgs_Protocol_Friends_V1_Friend()}
    set {_uniqueStorage()._changedFriend = newValue}
  }
  /// Returns true if `changedFriend` has been explicitly set.
  public var hasChangedFriend: Bool {return _storage._changedFriend != nil}
  /// Clears the value of `changedFriend`. Subsequent reads from it will return its default value.
  public mutating func clearChangedFriend() {_uniqueStorage()._changedFriend = nil}

  public var accountID: Bgs_Protocol_EntityId {
    get {return _storage._accountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return _storage._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {_uniqueStorage()._accountID = nil}

  public var forward: Bgs_Protocol_ObjectAddress {
    get {return _storage._forward ?? Bgs_Protocol_ObjectAddress()}
    set {_uniqueStorage()._forward = newValue}
  }
  /// Returns true if `forward` has been explicitly set.
  public var hasForward: Bool {return _storage._forward != nil}
  /// Clears the value of `forward`. Subsequent reads from it will return its default value.
  public mutating func clearForward() {_uniqueStorage()._forward = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_InvitationNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var invitation: Bgs_Protocol_Friends_V1_ReceivedInvitation {
    get {return _storage._invitation ?? Bgs_Protocol_Friends_V1_ReceivedInvitation()}
    set {_uniqueStorage()._invitation = newValue}
  }
  /// Returns true if `invitation` has been explicitly set.
  public var hasInvitation: Bool {return _storage._invitation != nil}
  /// Clears the value of `invitation`. Subsequent reads from it will return its default value.
  public mutating func clearInvitation() {_uniqueStorage()._invitation = nil}

  public var reason: UInt32 {
    get {return _storage._reason ?? 0}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_uniqueStorage()._reason = nil}

  public var accountID: Bgs_Protocol_EntityId {
    get {return _storage._accountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return _storage._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {_uniqueStorage()._accountID = nil}

  public var forward: Bgs_Protocol_ObjectAddress {
    get {return _storage._forward ?? Bgs_Protocol_ObjectAddress()}
    set {_uniqueStorage()._forward = newValue}
  }
  /// Returns true if `forward` has been explicitly set.
  public var hasForward: Bool {return _storage._forward != nil}
  /// Clears the value of `forward`. Subsequent reads from it will return its default value.
  public mutating func clearForward() {_uniqueStorage()._forward = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_SentInvitationAddedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountID: Bgs_Protocol_EntityId {
    get {return _storage._accountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return _storage._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {_uniqueStorage()._accountID = nil}

  public var invitation: Bgs_Protocol_Friends_V1_SentInvitation {
    get {return _storage._invitation ?? Bgs_Protocol_Friends_V1_SentInvitation()}
    set {_uniqueStorage()._invitation = newValue}
  }
  /// Returns true if `invitation` has been explicitly set.
  public var hasInvitation: Bool {return _storage._invitation != nil}
  /// Clears the value of `invitation`. Subsequent reads from it will return its default value.
  public mutating func clearInvitation() {_uniqueStorage()._invitation = nil}

  public var forward: Bgs_Protocol_ObjectAddress {
    get {return _storage._forward ?? Bgs_Protocol_ObjectAddress()}
    set {_uniqueStorage()._forward = newValue}
  }
  /// Returns true if `forward` has been explicitly set.
  public var hasForward: Bool {return _storage._forward != nil}
  /// Clears the value of `forward`. Subsequent reads from it will return its default value.
  public mutating func clearForward() {_uniqueStorage()._forward = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Friends_V1_SentInvitationRemovedNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var accountID: Bgs_Protocol_EntityId {
    get {return _storage._accountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return _storage._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {_uniqueStorage()._accountID = nil}

  public var invitationID: UInt64 {
    get {return _storage._invitationID ?? 0}
    set {_uniqueStorage()._invitationID = newValue}
  }
  /// Returns true if `invitationID` has been explicitly set.
  public var hasInvitationID: Bool {return _storage._invitationID != nil}
  /// Clears the value of `invitationID`. Subsequent reads from it will return its default value.
  public mutating func clearInvitationID() {_uniqueStorage()._invitationID = nil}

  public var reason: UInt32 {
    get {return _storage._reason ?? 0}
    set {_uniqueStorage()._reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  public var hasReason: Bool {return _storage._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  public mutating func clearReason() {_uniqueStorage()._reason = nil}

  public var forward: Bgs_Protocol_ObjectAddress {
    get {return _storage._forward ?? Bgs_Protocol_ObjectAddress()}
    set {_uniqueStorage()._forward = newValue}
  }
  /// Returns true if `forward` has been explicitly set.
  public var hasForward: Bool {return _storage._forward != nil}
  /// Clears the value of `forward`. Subsequent reads from it will return its default value.
  public mutating func clearForward() {_uniqueStorage()._forward = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.friends.v1"

extension Bgs_Protocol_Friends_V1_SubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubscribeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "object_id"),
    3: .same(proto: "forward"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _objectID: UInt64? = nil
    var _forward: Bgs_Protocol_ObjectAddress? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _objectID = source._objectID
      _forward = source._forward
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._objectID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._forward, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._objectID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._forward)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._objectID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._forward {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_SubscribeRequest, rhs: Bgs_Protocol_Friends_V1_SubscribeRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._objectID != rhs_storage._objectID {return false}
        if _storage._forward != rhs_storage._forward {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_UnsubscribeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UnsubscribeRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "object_id"),
    3: .same(proto: "forward"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _objectID: UInt64? = nil
    var _forward: Bgs_Protocol_ObjectAddress? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _objectID = source._objectID
      _forward = source._forward
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._forward, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._objectID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._forward)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._objectID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._forward {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_UnsubscribeRequest, rhs: Bgs_Protocol_Friends_V1_UnsubscribeRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._objectID != rhs_storage._objectID {return false}
        if _storage._forward != rhs_storage._forward {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_SendInvitationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SendInvitationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_identity"),
    2: .standard(proto: "target_id"),
    3: .same(proto: "params"),
  ]

  fileprivate class _StorageClass {
    var _agentIdentity: Bgs_Protocol_Identity? = nil
    var _targetID: Bgs_Protocol_EntityId? = nil
    var _params: Bgs_Protocol_InvitationParams? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentIdentity = source._agentIdentity
      _targetID = source._targetID
      _params = source._params
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._targetID == nil {return false}
      if _storage._params == nil {return false}
      if let v = _storage._agentIdentity, !v.isInitialized {return false}
      if let v = _storage._targetID, !v.isInitialized {return false}
      if let v = _storage._params, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentIdentity)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._params)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentIdentity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._params {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_SendInvitationRequest, rhs: Bgs_Protocol_Friends_V1_SendInvitationRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentIdentity != rhs_storage._agentIdentity {return false}
        if _storage._targetID != rhs_storage._targetID {return false}
        if _storage._params != rhs_storage._params {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_RevokeInvitationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RevokeInvitationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "invitation_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _invitationID: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _invitationID = source._invitationID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularFixed64Field(value: &_storage._invitationID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._invitationID {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_RevokeInvitationRequest, rhs: Bgs_Protocol_Friends_V1_RevokeInvitationRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._invitationID != rhs_storage._invitationID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_AcceptInvitationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AcceptInvitationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "invitation_id"),
    4: .same(proto: "options"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _invitationID: UInt64? = nil
    var _options: Bgs_Protocol_Friends_V1_AcceptInvitationOptions? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _invitationID = source._invitationID
      _options = source._options
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._invitationID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularFixed64Field(value: &_storage._invitationID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._options)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._invitationID {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._options {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_AcceptInvitationRequest, rhs: Bgs_Protocol_Friends_V1_AcceptInvitationRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._invitationID != rhs_storage._invitationID {return false}
        if _storage._options != rhs_storage._options {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_DeclineInvitationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeclineInvitationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "invitation_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _invitationID: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _invitationID = source._invitationID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._invitationID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularFixed64Field(value: &_storage._invitationID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._invitationID {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_DeclineInvitationRequest, rhs: Bgs_Protocol_Friends_V1_DeclineInvitationRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._invitationID != rhs_storage._invitationID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_IgnoreInvitationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IgnoreInvitationRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    3: .standard(proto: "invitation_id"),
    4: .same(proto: "program"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _invitationID: UInt64? = nil
    var _program: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _invitationID = source._invitationID
      _program = source._program
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._invitationID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 3: try decoder.decodeSingularFixed64Field(value: &_storage._invitationID)
        case 4: try decoder.decodeSingularFixed32Field(value: &_storage._program)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._invitationID {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._program {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_IgnoreInvitationRequest, rhs: Bgs_Protocol_Friends_V1_IgnoreInvitationRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._invitationID != rhs_storage._invitationID {return false}
        if _storage._program != rhs_storage._program {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_RemoveFriendRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoveFriendRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "target_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _targetID: Bgs_Protocol_EntityId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _targetID = source._targetID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._targetID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._targetID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_RemoveFriendRequest, rhs: Bgs_Protocol_Friends_V1_RemoveFriendRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._targetID != rhs_storage._targetID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_RevokeAllInvitationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RevokeAllInvitationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "agent_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_RevokeAllInvitationsRequest, rhs: Bgs_Protocol_Friends_V1_RevokeAllInvitationsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_ViewFriendsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ViewFriendsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "target_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _targetID: Bgs_Protocol_EntityId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _targetID = source._targetID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._targetID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._targetID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_ViewFriendsRequest, rhs: Bgs_Protocol_Friends_V1_ViewFriendsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._targetID != rhs_storage._targetID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_ViewFriendsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ViewFriendsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "friends"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.friends) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.friends)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.friends.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.friends, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_ViewFriendsResponse, rhs: Bgs_Protocol_Friends_V1_ViewFriendsResponse) -> Bool {
    if lhs.friends != rhs.friends {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_UpdateFriendStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateFriendStateRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "target_id"),
    3: .same(proto: "attribute"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _targetID: Bgs_Protocol_EntityId? = nil
    var _attribute: [Bgs_Protocol_Attribute] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _targetID = source._targetID
      _attribute = source._attribute
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._targetID == nil {return false}
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._targetID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._attribute) {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_UpdateFriendStateRequest, rhs: Bgs_Protocol_Friends_V1_UpdateFriendStateRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._targetID != rhs_storage._targetID {return false}
        if _storage._attribute != rhs_storage._attribute {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_GetFriendListRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFriendListRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "agent_id"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_GetFriendListRequest, rhs: Bgs_Protocol_Friends_V1_GetFriendListRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_GetFriendListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFriendListResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "friends"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.friends) {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.friends)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.friends.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.friends, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_GetFriendListResponse, rhs: Bgs_Protocol_Friends_V1_GetFriendListResponse) -> Bool {
    if lhs.friends != rhs.friends {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_CreateFriendshipRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateFriendshipRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "agent_id"),
    2: .standard(proto: "target_id"),
    3: .same(proto: "role"),
  ]

  fileprivate class _StorageClass {
    var _agentID: Bgs_Protocol_EntityId? = nil
    var _targetID: Bgs_Protocol_EntityId? = nil
    var _role: [UInt32] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _agentID = source._agentID
      _targetID = source._targetID
      _role = source._role
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID, !v.isInitialized {return false}
      if let v = _storage._targetID, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._agentID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        case 3: try decoder.decodeRepeatedUInt32Field(value: &_storage._role)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._agentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._role.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._role, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_CreateFriendshipRequest, rhs: Bgs_Protocol_Friends_V1_CreateFriendshipRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._agentID != rhs_storage._agentID {return false}
        if _storage._targetID != rhs_storage._targetID {return false}
        if _storage._role != rhs_storage._role {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_FriendNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FriendNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
    5: .standard(proto: "account_id"),
    6: .same(proto: "forward"),
  ]

  fileprivate class _StorageClass {
    var _target: Bgs_Protocol_Friends_V1_Friend? = nil
    var _accountID: Bgs_Protocol_EntityId? = nil
    var _forward: Bgs_Protocol_ObjectAddress? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _target = source._target
      _accountID = source._accountID
      _forward = source._forward
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._target == nil {return false}
      if let v = _storage._target, !v.isInitialized {return false}
      if let v = _storage._accountID, !v.isInitialized {return false}
      if let v = _storage._forward, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._target)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._accountID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._forward)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._accountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._forward {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_FriendNotification, rhs: Bgs_Protocol_Friends_V1_FriendNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._target != rhs_storage._target {return false}
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._forward != rhs_storage._forward {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_UpdateFriendStateNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateFriendStateNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "changed_friend"),
    5: .standard(proto: "account_id"),
    6: .same(proto: "forward"),
  ]

  fileprivate class _StorageClass {
    var _changedFriend: Bgs_Protocol_Friends_V1_Friend? = nil
    var _accountID: Bgs_Protocol_EntityId? = nil
    var _forward: Bgs_Protocol_ObjectAddress? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _changedFriend = source._changedFriend
      _accountID = source._accountID
      _forward = source._forward
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._changedFriend == nil {return false}
      if let v = _storage._changedFriend, !v.isInitialized {return false}
      if let v = _storage._accountID, !v.isInitialized {return false}
      if let v = _storage._forward, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._changedFriend)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._accountID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._forward)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._changedFriend {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._accountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._forward {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_UpdateFriendStateNotification, rhs: Bgs_Protocol_Friends_V1_UpdateFriendStateNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._changedFriend != rhs_storage._changedFriend {return false}
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._forward != rhs_storage._forward {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_InvitationNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InvitationNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "invitation"),
    3: .same(proto: "reason"),
    5: .standard(proto: "account_id"),
    6: .same(proto: "forward"),
  ]

  fileprivate class _StorageClass {
    var _invitation: Bgs_Protocol_Friends_V1_ReceivedInvitation? = nil
    var _reason: UInt32? = nil
    var _accountID: Bgs_Protocol_EntityId? = nil
    var _forward: Bgs_Protocol_ObjectAddress? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _invitation = source._invitation
      _reason = source._reason
      _accountID = source._accountID
      _forward = source._forward
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._invitation == nil {return false}
      if let v = _storage._invitation, !v.isInitialized {return false}
      if let v = _storage._accountID, !v.isInitialized {return false}
      if let v = _storage._forward, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._invitation)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._reason)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._accountID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._forward)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._invitation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._reason {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._accountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._forward {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_InvitationNotification, rhs: Bgs_Protocol_Friends_V1_InvitationNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._invitation != rhs_storage._invitation {return false}
        if _storage._reason != rhs_storage._reason {return false}
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._forward != rhs_storage._forward {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_SentInvitationAddedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SentInvitationAddedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .same(proto: "invitation"),
    3: .same(proto: "forward"),
  ]

  fileprivate class _StorageClass {
    var _accountID: Bgs_Protocol_EntityId? = nil
    var _invitation: Bgs_Protocol_Friends_V1_SentInvitation? = nil
    var _forward: Bgs_Protocol_ObjectAddress? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountID = source._accountID
      _invitation = source._invitation
      _forward = source._forward
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountID, !v.isInitialized {return false}
      if let v = _storage._invitation, !v.isInitialized {return false}
      if let v = _storage._forward, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._accountID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._invitation)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._forward)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._invitation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._forward {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_SentInvitationAddedNotification, rhs: Bgs_Protocol_Friends_V1_SentInvitationAddedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._invitation != rhs_storage._invitation {return false}
        if _storage._forward != rhs_storage._forward {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Friends_V1_SentInvitationRemovedNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SentInvitationRemovedNotification"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "account_id"),
    2: .standard(proto: "invitation_id"),
    3: .same(proto: "reason"),
    4: .same(proto: "forward"),
  ]

  fileprivate class _StorageClass {
    var _accountID: Bgs_Protocol_EntityId? = nil
    var _invitationID: UInt64? = nil
    var _reason: UInt32? = nil
    var _forward: Bgs_Protocol_ObjectAddress? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _accountID = source._accountID
      _invitationID = source._invitationID
      _reason = source._reason
      _forward = source._forward
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountID, !v.isInitialized {return false}
      if let v = _storage._forward, !v.isInitialized {return false}
      return true
    }
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._accountID)
        case 2: try decoder.decodeSingularFixed64Field(value: &_storage._invitationID)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._reason)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._forward)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._accountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._invitationID {
        try visitor.visitSingularFixed64Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._reason {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._forward {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Friends_V1_SentInvitationRemovedNotification, rhs: Bgs_Protocol_Friends_V1_SentInvitationRemovedNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._accountID != rhs_storage._accountID {return false}
        if _storage._invitationID != rhs_storage._invitationID {return false}
        if _storage._reason != rhs_storage._reason {return false}
        if _storage._forward != rhs_storage._forward {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
