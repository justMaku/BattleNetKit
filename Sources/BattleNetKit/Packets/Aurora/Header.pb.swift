// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Header.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct ObjectAddress: SwiftProtobuf.Message {
  static let protoMessageName: String = "ObjectAddress"

  var host: ProcessId {
    get {return _storage._host ?? ProcessId()}
    set {_uniqueStorage()._host = newValue}
  }
  /// Returns true if `host` has been explicitly set.
  var hasHost: Bool {return _storage._host != nil}
  /// Clears the value of `host`. Subsequent reads from it will return its default value.
  mutating func clearHost() {_storage._host = nil}

  var objectID: UInt64 {
    get {return _storage._objectID ?? 0}
    set {_uniqueStorage()._objectID = newValue}
  }
  /// Returns true if `objectID` has been explicitly set.
  var hasObjectID: Bool {return _storage._objectID != nil}
  /// Clears the value of `objectID`. Subsequent reads from it will return its default value.
  mutating func clearObjectID() {_storage._objectID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._host == nil {return false}
      if let v = _storage._host, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._host)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._objectID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._host {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._objectID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct ErrorInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = "ErrorInfo"

  var objectAddress: ObjectAddress {
    get {return _storage._objectAddress ?? ObjectAddress()}
    set {_uniqueStorage()._objectAddress = newValue}
  }
  /// Returns true if `objectAddress` has been explicitly set.
  var hasObjectAddress: Bool {return _storage._objectAddress != nil}
  /// Clears the value of `objectAddress`. Subsequent reads from it will return its default value.
  mutating func clearObjectAddress() {_storage._objectAddress = nil}

  var status: UInt32 {
    get {return _storage._status ?? 0}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_storage._status = nil}

  var serviceHash: UInt32 {
    get {return _storage._serviceHash ?? 0}
    set {_uniqueStorage()._serviceHash = newValue}
  }
  /// Returns true if `serviceHash` has been explicitly set.
  var hasServiceHash: Bool {return _storage._serviceHash != nil}
  /// Clears the value of `serviceHash`. Subsequent reads from it will return its default value.
  mutating func clearServiceHash() {_storage._serviceHash = nil}

  var methodID: UInt32 {
    get {return _storage._methodID ?? 0}
    set {_uniqueStorage()._methodID = newValue}
  }
  /// Returns true if `methodID` has been explicitly set.
  var hasMethodID: Bool {return _storage._methodID != nil}
  /// Clears the value of `methodID`. Subsequent reads from it will return its default value.
  mutating func clearMethodID() {_storage._methodID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._objectAddress == nil {return false}
      if _storage._status == nil {return false}
      if _storage._serviceHash == nil {return false}
      if _storage._methodID == nil {return false}
      if let v = _storage._objectAddress, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._objectAddress)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._status)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._serviceHash)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._methodID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._objectAddress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._status {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._serviceHash {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._methodID {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Header: SwiftProtobuf.Message {
  static let protoMessageName: String = "Header"

  var serviceID: UInt32 {
    get {return _serviceID ?? 0}
    set {_serviceID = newValue}
  }
  /// Returns true if `serviceID` has been explicitly set.
  var hasServiceID: Bool {return self._serviceID != nil}
  /// Clears the value of `serviceID`. Subsequent reads from it will return its default value.
  mutating func clearServiceID() {self._serviceID = nil}

  var methodID: UInt32 {
    get {return _methodID ?? 0}
    set {_methodID = newValue}
  }
  /// Returns true if `methodID` has been explicitly set.
  var hasMethodID: Bool {return self._methodID != nil}
  /// Clears the value of `methodID`. Subsequent reads from it will return its default value.
  mutating func clearMethodID() {self._methodID = nil}

  var token: UInt32 {
    get {return _token ?? 0}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  mutating func clearToken() {self._token = nil}

  var objectID: UInt64 {
    get {return _objectID ?? 0}
    set {_objectID = newValue}
  }
  /// Returns true if `objectID` has been explicitly set.
  var hasObjectID: Bool {return self._objectID != nil}
  /// Clears the value of `objectID`. Subsequent reads from it will return its default value.
  mutating func clearObjectID() {self._objectID = nil}

  var size: UInt32 {
    get {return _size ?? 0}
    set {_size = newValue}
  }
  /// Returns true if `size` has been explicitly set.
  var hasSize: Bool {return self._size != nil}
  /// Clears the value of `size`. Subsequent reads from it will return its default value.
  mutating func clearSize() {self._size = nil}

  var status: UInt32 {
    get {return _status ?? 0}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var error: [ErrorInfo] = []

  var timeout: UInt64 {
    get {return _timeout ?? 0}
    set {_timeout = newValue}
  }
  /// Returns true if `timeout` has been explicitly set.
  var hasTimeout: Bool {return self._timeout != nil}
  /// Clears the value of `timeout`. Subsequent reads from it will return its default value.
  mutating func clearTimeout() {self._timeout = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    if self._serviceID == nil {return false}
    if self._token == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.error) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._serviceID)
      case 2: try decoder.decodeSingularUInt32Field(value: &self._methodID)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._token)
      case 4: try decoder.decodeSingularUInt64Field(value: &self._objectID)
      case 5: try decoder.decodeSingularUInt32Field(value: &self._size)
      case 6: try decoder.decodeSingularUInt32Field(value: &self._status)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.error)
      case 8: try decoder.decodeSingularUInt64Field(value: &self._timeout)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._serviceID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._methodID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._token {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    if let v = self._objectID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    }
    if let v = self._size {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    }
    if let v = self._status {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    }
    if !self.error.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.error, fieldNumber: 7)
    }
    if let v = self._timeout {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _serviceID: UInt32? = nil
  fileprivate var _methodID: UInt32? = nil
  fileprivate var _token: UInt32? = nil
  fileprivate var _objectID: UInt64? = nil
  fileprivate var _size: UInt32? = nil
  fileprivate var _status: UInt32? = nil
  fileprivate var _timeout: UInt64? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ObjectAddress: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "host"),
    2: .standard(proto: "object_id"),
  ]

  fileprivate class _StorageClass {
    var _host: ProcessId? = nil
    var _objectID: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _host = source._host
      _objectID = source._objectID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: ObjectAddress) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._host != other_storage._host {return false}
        if _storage._objectID != other_storage._objectID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension ErrorInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "object_address"),
    2: .same(proto: "status"),
    3: .standard(proto: "service_hash"),
    4: .standard(proto: "method_id"),
  ]

  fileprivate class _StorageClass {
    var _objectAddress: ObjectAddress? = nil
    var _status: UInt32? = nil
    var _serviceHash: UInt32? = nil
    var _methodID: UInt32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _objectAddress = source._objectAddress
      _status = source._status
      _serviceHash = source._serviceHash
      _methodID = source._methodID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: ErrorInfo) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._objectAddress != other_storage._objectAddress {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._serviceHash != other_storage._serviceHash {return false}
        if _storage._methodID != other_storage._methodID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Header: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_id"),
    2: .standard(proto: "method_id"),
    3: .same(proto: "token"),
    4: .standard(proto: "object_id"),
    5: .same(proto: "size"),
    6: .same(proto: "status"),
    7: .same(proto: "error"),
    8: .same(proto: "timeout"),
  ]

  func _protobuf_generated_isEqualTo(other: Header) -> Bool {
    if self._serviceID != other._serviceID {return false}
    if self._methodID != other._methodID {return false}
    if self._token != other._token {return false}
    if self._objectID != other._objectID {return false}
    if self._size != other._size {return false}
    if self._status != other._status {return false}
    if self.error != other.error {return false}
    if self._timeout != other._timeout {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
