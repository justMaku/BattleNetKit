// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/api/client/v2/attribute_types.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_V2_Variant: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Variant"

  public var type: Bgs_Protocol_V2_Variant.OneOf_Type? = nil

  public var boolValue: Bool {
    get {
      if case .boolValue(let v)? = type {return v}
      return false
    }
    set {type = .boolValue(newValue)}
  }

  public var intValue: Int64 {
    get {
      if case .intValue(let v)? = type {return v}
      return 0
    }
    set {type = .intValue(newValue)}
  }

  public var floatValue: Double {
    get {
      if case .floatValue(let v)? = type {return v}
      return 0
    }
    set {type = .floatValue(newValue)}
  }

  public var stringValue: String {
    get {
      if case .stringValue(let v)? = type {return v}
      return String()
    }
    set {type = .stringValue(newValue)}
  }

  public var blobValue: Data {
    get {
      if case .blobValue(let v)? = type {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {type = .blobValue(newValue)}
  }

  public var uintValue: UInt64 {
    get {
      if case .uintValue(let v)? = type {return v}
      return 0
    }
    set {type = .uintValue(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Type: Equatable {
    case boolValue(Bool)
    case intValue(Int64)
    case floatValue(Double)
    case stringValue(String)
    case blobValue(Data)
    case uintValue(UInt64)

    public static func ==(lhs: Bgs_Protocol_V2_Variant.OneOf_Type, rhs: Bgs_Protocol_V2_Variant.OneOf_Type) -> Bool {
      switch (lhs, rhs) {
      case (.boolValue(let l), .boolValue(let r)): return l == r
      case (.intValue(let l), .intValue(let r)): return l == r
      case (.floatValue(let l), .floatValue(let r)): return l == r
      case (.stringValue(let l), .stringValue(let r)): return l == r
      case (.blobValue(let l), .blobValue(let r)): return l == r
      case (.uintValue(let l), .uintValue(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.type = .boolValue(v)}
      case 2:
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Int64?
        try decoder.decodeSingularInt64Field(value: &v)
        if let v = v {self.type = .intValue(v)}
      case 3:
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.type = .floatValue(v)}
      case 4:
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.type = .stringValue(v)}
      case 5:
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: Data?
        try decoder.decodeSingularBytesField(value: &v)
        if let v = v {self.type = .blobValue(v)}
      case 6:
        if self.type != nil {try decoder.handleConflictingOneOf()}
        var v: UInt64?
        try decoder.decodeSingularUInt64Field(value: &v)
        if let v = v {self.type = .uintValue(v)}
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.type {
    case .boolValue(let v)?:
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    case .intValue(let v)?:
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    case .floatValue(let v)?:
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    case .stringValue(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    case .blobValue(let v)?:
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    case .uintValue(let v)?:
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct Bgs_Protocol_V2_Attribute: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Attribute"

  public var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  public var value: Bgs_Protocol_V2_Variant {
    get {return _storage._value ?? Bgs_Protocol_V2_Variant()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_storage._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_V2_AttributeFilter: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AttributeFilter"

  public var op: Bgs_Protocol_V2_AttributeFilter.Operation {
    get {return _op ?? .matchNone}
    set {_op = newValue}
  }
  /// Returns true if `op` has been explicitly set.
  public var hasOp: Bool {return self._op != nil}
  /// Clears the value of `op`. Subsequent reads from it will return its default value.
  public mutating func clearOp() {self._op = nil}

  public var attribute: [Bgs_Protocol_V2_Attribute] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Operation: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case matchNone // = 0
    case matchAny // = 1
    case matchAll // = 2
    case matchAllMostSpecific // = 3

    public init() {
      self = .matchNone
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .matchNone
      case 1: self = .matchAny
      case 2: self = .matchAll
      case 3: self = .matchAllMostSpecific
      default: return nil
      }
    }

    public var rawValue: Int {
      switch self {
      case .matchNone: return 0
      case .matchAny: return 1
      case .matchAll: return 2
      case .matchAllMostSpecific: return 3
      }
    }

  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._op)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.attribute)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._op {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.attribute.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attribute, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _op: Bgs_Protocol_V2_AttributeFilter.Operation? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.v2"

extension Bgs_Protocol_V2_Variant: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "bool_value"),
    2: .standard(proto: "int_value"),
    3: .standard(proto: "float_value"),
    4: .standard(proto: "string_value"),
    5: .standard(proto: "blob_value"),
    6: .standard(proto: "uint_value"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_V2_Variant) -> Bool {
    if self.type != other.type {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_V2_Attribute: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _name: String? = nil
    var _value: Bgs_Protocol_V2_Variant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_V2_Attribute) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._value != other_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_V2_AttributeFilter: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "op"),
    2: .same(proto: "attribute"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_V2_AttributeFilter) -> Bool {
    if self._op != other._op {return false}
    if self.attribute != other.attribute {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_V2_AttributeFilter.Operation: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MATCH_NONE"),
    1: .same(proto: "MATCH_ANY"),
    2: .same(proto: "MATCH_ALL"),
    3: .same(proto: "MATCH_ALL_MOST_SPECIFIC"),
  ]
}
