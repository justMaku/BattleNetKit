// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ClientRequest.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct ClientRequest: SwiftProtobuf.Message {
  static let protoMessageName: String = "ClientRequest"

  var attribute: [Attribute] {
    get {return _storage._attribute}
    set {_uniqueStorage()._attribute = newValue}
  }

  var host: ProcessId {
    get {return _storage._host ?? ProcessId()}
    set {_uniqueStorage()._host = newValue}
  }
  /// Returns true if `host` has been explicitly set.
  var hasHost: Bool {return _storage._host != nil}
  /// Clears the value of `host`. Subsequent reads from it will return its default value.
  mutating func clearHost() {_storage._host = nil}

  var bnetAccountID: EntityId {
    get {return _storage._bnetAccountID ?? EntityId()}
    set {_uniqueStorage()._bnetAccountID = newValue}
  }
  /// Returns true if `bnetAccountID` has been explicitly set.
  var hasBnetAccountID: Bool {return _storage._bnetAccountID != nil}
  /// Clears the value of `bnetAccountID`. Subsequent reads from it will return its default value.
  mutating func clearBnetAccountID() {_storage._bnetAccountID = nil}

  var gameAccountID: EntityId {
    get {return _storage._gameAccountID ?? EntityId()}
    set {_uniqueStorage()._gameAccountID = newValue}
  }
  /// Returns true if `gameAccountID` has been explicitly set.
  var hasGameAccountID: Bool {return _storage._gameAccountID != nil}
  /// Clears the value of `gameAccountID`. Subsequent reads from it will return its default value.
  mutating func clearGameAccountID() {_storage._gameAccountID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._attribute) {return false}
      if let v = _storage._host, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._attribute)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._host)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._bnetAccountID)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._gameAccountID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._attribute.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._attribute, fieldNumber: 1)
      }
      if let v = _storage._host {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._bnetAccountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._gameAccountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ClientRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "attribute"),
    2: .same(proto: "host"),
    3: .standard(proto: "bnet_account_id"),
    4: .standard(proto: "game_account_id"),
  ]

  fileprivate class _StorageClass {
    var _attribute: [Attribute] = []
    var _host: ProcessId? = nil
    var _bnetAccountID: EntityId? = nil
    var _gameAccountID: EntityId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _attribute = source._attribute
      _host = source._host
      _bnetAccountID = source._bnetAccountID
      _gameAccountID = source._gameAccountID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: ClientRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._attribute != other_storage._attribute {return false}
        if _storage._host != other_storage._host {return false}
        if _storage._bnetAccountID != other_storage._bnetAccountID {return false}
        if _storage._gameAccountID != other_storage._gameAccountID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
