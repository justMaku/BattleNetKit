// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/voice_types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Bgs_Protocol_VoiceJoinType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case voiceJoinNormal // = 0
  case voiceJoinMuted // = 1

  public init() {
    self = .voiceJoinNormal
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .voiceJoinNormal
    case 1: self = .voiceJoinMuted
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .voiceJoinNormal: return 0
    case .voiceJoinMuted: return 1
    }
  }

}

#if swift(>=4.2)

extension Bgs_Protocol_VoiceJoinType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public enum Bgs_Protocol_VoiceMuteReason: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case none // = 0
  case parentalControlListenOnly // = 1
  case requested // = 2
  case squelched // = 3

  public init() {
    self = .none
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .none
    case 1: self = .parentalControlListenOnly
    case 2: self = .requested
    case 3: self = .squelched
    default: return nil
    }
  }

  public var rawValue: Int {
    switch self {
    case .none: return 0
    case .parentalControlListenOnly: return 1
    case .requested: return 2
    case .squelched: return 3
    }
  }

}

#if swift(>=4.2)

extension Bgs_Protocol_VoiceMuteReason: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

public struct Bgs_Protocol_VoiceCredentials {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var voiceID: String {
    get {return _voiceID ?? String()}
    set {_voiceID = newValue}
  }
  /// Returns true if `voiceID` has been explicitly set.
  public var hasVoiceID: Bool {return self._voiceID != nil}
  /// Clears the value of `voiceID`. Subsequent reads from it will return its default value.
  public mutating func clearVoiceID() {self._voiceID = nil}

  public var token: String {
    get {return _token ?? String()}
    set {_token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return self._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {self._token = nil}

  public var url: String {
    get {return _url ?? String()}
    set {_url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  public var hasURL: Bool {return self._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
  public mutating func clearURL() {self._url = nil}

  public var joinType: Bgs_Protocol_VoiceJoinType {
    get {return _joinType ?? .voiceJoinNormal}
    set {_joinType = newValue}
  }
  /// Returns true if `joinType` has been explicitly set.
  public var hasJoinType: Bool {return self._joinType != nil}
  /// Clears the value of `joinType`. Subsequent reads from it will return its default value.
  public mutating func clearJoinType() {self._joinType = nil}

  public var muteReason: Bgs_Protocol_VoiceMuteReason {
    get {return _muteReason ?? .none}
    set {_muteReason = newValue}
  }
  /// Returns true if `muteReason` has been explicitly set.
  public var hasMuteReason: Bool {return self._muteReason != nil}
  /// Clears the value of `muteReason`. Subsequent reads from it will return its default value.
  public mutating func clearMuteReason() {self._muteReason = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _voiceID: String? = nil
  fileprivate var _token: String? = nil
  fileprivate var _url: String? = nil
  fileprivate var _joinType: Bgs_Protocol_VoiceJoinType? = nil
  fileprivate var _muteReason: Bgs_Protocol_VoiceMuteReason? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol"

extension Bgs_Protocol_VoiceJoinType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VOICE_JOIN_NORMAL"),
    1: .same(proto: "VOICE_JOIN_MUTED"),
  ]
}

extension Bgs_Protocol_VoiceMuteReason: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VOICE_MUTE_REASON_NONE"),
    1: .same(proto: "VOICE_MUTE_REASON_PARENTAL_CONTROL_LISTEN_ONLY"),
    2: .same(proto: "VOICE_MUTE_REASON_REQUESTED"),
    3: .same(proto: "VOICE_MUTE_REASON_SQUELCHED"),
  ]
}

extension Bgs_Protocol_VoiceCredentials: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VoiceCredentials"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "voice_id"),
    2: .same(proto: "token"),
    3: .same(proto: "url"),
    4: .standard(proto: "join_type"),
    5: .standard(proto: "mute_reason"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._voiceID)
      case 2: try decoder.decodeSingularStringField(value: &self._token)
      case 3: try decoder.decodeSingularStringField(value: &self._url)
      case 4: try decoder.decodeSingularEnumField(value: &self._joinType)
      case 5: try decoder.decodeSingularEnumField(value: &self._muteReason)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._voiceID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._token {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._joinType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    }
    if let v = self._muteReason {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_VoiceCredentials, rhs: Bgs_Protocol_VoiceCredentials) -> Bool {
    if lhs._voiceID != rhs._voiceID {return false}
    if lhs._token != rhs._token {return false}
    if lhs._url != rhs._url {return false}
    if lhs._joinType != rhs._joinType {return false}
    if lhs._muteReason != rhs._muteReason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
