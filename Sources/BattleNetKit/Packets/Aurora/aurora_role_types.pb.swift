// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/role_types.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Role {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  public var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  public mutating func clearID() {self._id = nil}

  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {self._name = nil}

  public var privilege: [String] = []

  public var assignableRole: [UInt32] = []

  public var required: Bool {
    get {return _required ?? false}
    set {_required = newValue}
  }
  /// Returns true if `required` has been explicitly set.
  public var hasRequired: Bool {return self._required != nil}
  /// Clears the value of `required`. Subsequent reads from it will return its default value.
  public mutating func clearRequired() {self._required = nil}

  public var unique: Bool {
    get {return _unique ?? false}
    set {_unique = newValue}
  }
  /// Returns true if `unique` has been explicitly set.
  public var hasUnique: Bool {return self._unique != nil}
  /// Clears the value of `unique`. Subsequent reads from it will return its default value.
  public mutating func clearUnique() {self._unique = nil}

  public var relegationRole: UInt32 {
    get {return _relegationRole ?? 0}
    set {_relegationRole = newValue}
  }
  /// Returns true if `relegationRole` has been explicitly set.
  public var hasRelegationRole: Bool {return self._relegationRole != nil}
  /// Clears the value of `relegationRole`. Subsequent reads from it will return its default value.
  public mutating func clearRelegationRole() {self._relegationRole = nil}

  public var kickableRole: [UInt32] = []

  public var removableRole: [UInt32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _id: UInt32? = nil
  fileprivate var _name: String? = nil
  fileprivate var _required: Bool? = nil
  fileprivate var _unique: Bool? = nil
  fileprivate var _relegationRole: UInt32? = nil
}

public struct Bgs_Protocol_RoleState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {self._name = nil}

  public var assignableRole: [UInt32] = []

  public var required: Bool {
    get {return _required ?? false}
    set {_required = newValue}
  }
  /// Returns true if `required` has been explicitly set.
  public var hasRequired: Bool {return self._required != nil}
  /// Clears the value of `required`. Subsequent reads from it will return its default value.
  public mutating func clearRequired() {self._required = nil}

  public var unique: Bool {
    get {return _unique ?? false}
    set {_unique = newValue}
  }
  /// Returns true if `unique` has been explicitly set.
  public var hasUnique: Bool {return self._unique != nil}
  /// Clears the value of `unique`. Subsequent reads from it will return its default value.
  public mutating func clearUnique() {self._unique = nil}

  public var relegationRole: UInt32 {
    get {return _relegationRole ?? 0}
    set {_relegationRole = newValue}
  }
  /// Returns true if `relegationRole` has been explicitly set.
  public var hasRelegationRole: Bool {return self._relegationRole != nil}
  /// Clears the value of `relegationRole`. Subsequent reads from it will return its default value.
  public mutating func clearRelegationRole() {self._relegationRole = nil}

  public var kickableRole: [UInt32] = []

  public var removableRole: [UInt32] = []

  public var mentionableRole: [UInt32] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _name: String? = nil
  fileprivate var _required: Bool? = nil
  fileprivate var _unique: Bool? = nil
  fileprivate var _relegationRole: UInt32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol"

extension Bgs_Protocol_Role: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Role"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "privilege"),
    4: .standard(proto: "assignable_role"),
    5: .same(proto: "required"),
    6: .same(proto: "unique"),
    7: .standard(proto: "relegation_role"),
    9: .standard(proto: "kickable_role"),
    10: .standard(proto: "removable_role"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._name == nil {return false}
    return true
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._id)
      case 2: try decoder.decodeSingularStringField(value: &self._name)
      case 3: try decoder.decodeRepeatedStringField(value: &self.privilege)
      case 4: try decoder.decodeRepeatedUInt32Field(value: &self.assignableRole)
      case 5: try decoder.decodeSingularBoolField(value: &self._required)
      case 6: try decoder.decodeSingularBoolField(value: &self._unique)
      case 7: try decoder.decodeSingularUInt32Field(value: &self._relegationRole)
      case 9: try decoder.decodeRepeatedUInt32Field(value: &self.kickableRole)
      case 10: try decoder.decodeRepeatedUInt32Field(value: &self.removableRole)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.privilege.isEmpty {
      try visitor.visitRepeatedStringField(value: self.privilege, fieldNumber: 3)
    }
    if !self.assignableRole.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.assignableRole, fieldNumber: 4)
    }
    if let v = self._required {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._unique {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._relegationRole {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if !self.kickableRole.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.kickableRole, fieldNumber: 9)
    }
    if !self.removableRole.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.removableRole, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_Role, rhs: Bgs_Protocol_Role) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs.privilege != rhs.privilege {return false}
    if lhs.assignableRole != rhs.assignableRole {return false}
    if lhs._required != rhs._required {return false}
    if lhs._unique != rhs._unique {return false}
    if lhs._relegationRole != rhs._relegationRole {return false}
    if lhs.kickableRole != rhs.kickableRole {return false}
    if lhs.removableRole != rhs.removableRole {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_RoleState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RoleState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "name"),
    4: .standard(proto: "assignable_role"),
    5: .same(proto: "required"),
    6: .same(proto: "unique"),
    7: .standard(proto: "relegation_role"),
    9: .standard(proto: "kickable_role"),
    10: .standard(proto: "removable_role"),
    11: .standard(proto: "mentionable_role"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self._name)
      case 4: try decoder.decodeRepeatedUInt32Field(value: &self.assignableRole)
      case 5: try decoder.decodeSingularBoolField(value: &self._required)
      case 6: try decoder.decodeSingularBoolField(value: &self._unique)
      case 7: try decoder.decodeSingularUInt32Field(value: &self._relegationRole)
      case 9: try decoder.decodeRepeatedUInt32Field(value: &self.kickableRole)
      case 10: try decoder.decodeRepeatedUInt32Field(value: &self.removableRole)
      case 11: try decoder.decodeRepeatedUInt32Field(value: &self.mentionableRole)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if !self.assignableRole.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.assignableRole, fieldNumber: 4)
    }
    if let v = self._required {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    if let v = self._unique {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    }
    if let v = self._relegationRole {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    }
    if !self.kickableRole.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.kickableRole, fieldNumber: 9)
    }
    if !self.removableRole.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.removableRole, fieldNumber: 10)
    }
    if !self.mentionableRole.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.mentionableRole, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bgs_Protocol_RoleState, rhs: Bgs_Protocol_RoleState) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs.assignableRole != rhs.assignableRole {return false}
    if lhs._required != rhs._required {return false}
    if lhs._unique != rhs._unique {return false}
    if lhs._relegationRole != rhs._relegationRole {return false}
    if lhs.kickableRole != rhs.kickableRole {return false}
    if lhs.removableRole != rhs.removableRole {return false}
    if lhs.mentionableRole != rhs.mentionableRole {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
