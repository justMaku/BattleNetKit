// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/authentication_service.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Authentication_V1_ModuleLoadRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ModuleLoadRequest"

  public var moduleHandle: Bgs_Protocol_ContentHandle {
    get {return _storage._moduleHandle ?? Bgs_Protocol_ContentHandle()}
    set {_uniqueStorage()._moduleHandle = newValue}
  }
  /// Returns true if `moduleHandle` has been explicitly set.
  public var hasModuleHandle: Bool {return _storage._moduleHandle != nil}
  /// Clears the value of `moduleHandle`. Subsequent reads from it will return its default value.
  public mutating func clearModuleHandle() {_storage._moduleHandle = nil}

  public var message: Data {
    get {return _storage._message ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {_storage._message = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._moduleHandle == nil {return false}
      if let v = _storage._moduleHandle, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._moduleHandle)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._message)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._moduleHandle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._message {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Authentication_V1_ModuleNotification: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ModuleNotification"

  public var moduleID: Int32 {
    get {return _moduleID ?? 0}
    set {_moduleID = newValue}
  }
  /// Returns true if `moduleID` has been explicitly set.
  public var hasModuleID: Bool {return self._moduleID != nil}
  /// Clears the value of `moduleID`. Subsequent reads from it will return its default value.
  public mutating func clearModuleID() {self._moduleID = nil}

  public var result: UInt32 {
    get {return _result ?? 0}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {self._result = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularInt32Field(value: &self._moduleID)
      case 3: try decoder.decodeSingularUInt32Field(value: &self._result)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._moduleID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    if let v = self._result {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _moduleID: Int32? = nil
  fileprivate var _result: UInt32? = nil
}

public struct Bgs_Protocol_Authentication_V1_ModuleMessageRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ModuleMessageRequest"

  public var moduleID: Int32 {
    get {return _moduleID ?? 0}
    set {_moduleID = newValue}
  }
  /// Returns true if `moduleID` has been explicitly set.
  public var hasModuleID: Bool {return self._moduleID != nil}
  /// Clears the value of `moduleID`. Subsequent reads from it will return its default value.
  public mutating func clearModuleID() {self._moduleID = nil}

  public var message: Data {
    get {return _message ?? SwiftProtobuf.Internal.emptyData}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {self._message = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if self._moduleID == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._moduleID)
      case 2: try decoder.decodeSingularBytesField(value: &self._message)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._moduleID {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._message {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _moduleID: Int32? = nil
  fileprivate var _message: Data? = nil
}

public struct Bgs_Protocol_Authentication_V1_LogonRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".LogonRequest"

  public var program: String {
    get {return _program ?? String()}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var platform: String {
    get {return _platform ?? String()}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  public var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  public mutating func clearPlatform() {self._platform = nil}

  public var locale: String {
    get {return _locale ?? String()}
    set {_locale = newValue}
  }
  /// Returns true if `locale` has been explicitly set.
  public var hasLocale: Bool {return self._locale != nil}
  /// Clears the value of `locale`. Subsequent reads from it will return its default value.
  public mutating func clearLocale() {self._locale = nil}

  public var email: String {
    get {return _email ?? String()}
    set {_email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  public var hasEmail: Bool {return self._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  public mutating func clearEmail() {self._email = nil}

  public var version: String {
    get {return _version ?? String()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {self._version = nil}

  public var applicationVersion: Int32 {
    get {return _applicationVersion ?? 0}
    set {_applicationVersion = newValue}
  }
  /// Returns true if `applicationVersion` has been explicitly set.
  public var hasApplicationVersion: Bool {return self._applicationVersion != nil}
  /// Clears the value of `applicationVersion`. Subsequent reads from it will return its default value.
  public mutating func clearApplicationVersion() {self._applicationVersion = nil}

  public var publicComputer: Bool {
    get {return _publicComputer ?? false}
    set {_publicComputer = newValue}
  }
  /// Returns true if `publicComputer` has been explicitly set.
  public var hasPublicComputer: Bool {return self._publicComputer != nil}
  /// Clears the value of `publicComputer`. Subsequent reads from it will return its default value.
  public mutating func clearPublicComputer() {self._publicComputer = nil}

  public var allowLogonQueueNotifications: Bool {
    get {return _allowLogonQueueNotifications ?? false}
    set {_allowLogonQueueNotifications = newValue}
  }
  /// Returns true if `allowLogonQueueNotifications` has been explicitly set.
  public var hasAllowLogonQueueNotifications: Bool {return self._allowLogonQueueNotifications != nil}
  /// Clears the value of `allowLogonQueueNotifications`. Subsequent reads from it will return its default value.
  public mutating func clearAllowLogonQueueNotifications() {self._allowLogonQueueNotifications = nil}

  public var cachedWebCredentials: Data {
    get {return _cachedWebCredentials ?? SwiftProtobuf.Internal.emptyData}
    set {_cachedWebCredentials = newValue}
  }
  /// Returns true if `cachedWebCredentials` has been explicitly set.
  public var hasCachedWebCredentials: Bool {return self._cachedWebCredentials != nil}
  /// Clears the value of `cachedWebCredentials`. Subsequent reads from it will return its default value.
  public mutating func clearCachedWebCredentials() {self._cachedWebCredentials = nil}

  public var userAgent: String {
    get {return _userAgent ?? String()}
    set {_userAgent = newValue}
  }
  /// Returns true if `userAgent` has been explicitly set.
  public var hasUserAgent: Bool {return self._userAgent != nil}
  /// Clears the value of `userAgent`. Subsequent reads from it will return its default value.
  public mutating func clearUserAgent() {self._userAgent = nil}

  public var deviceID: String {
    get {return _deviceID ?? String()}
    set {_deviceID = newValue}
  }
  /// Returns true if `deviceID` has been explicitly set.
  public var hasDeviceID: Bool {return self._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
  public mutating func clearDeviceID() {self._deviceID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._program)
      case 2: try decoder.decodeSingularStringField(value: &self._platform)
      case 3: try decoder.decodeSingularStringField(value: &self._locale)
      case 4: try decoder.decodeSingularStringField(value: &self._email)
      case 5: try decoder.decodeSingularStringField(value: &self._version)
      case 6: try decoder.decodeSingularInt32Field(value: &self._applicationVersion)
      case 7: try decoder.decodeSingularBoolField(value: &self._publicComputer)
      case 10: try decoder.decodeSingularBoolField(value: &self._allowLogonQueueNotifications)
      case 12: try decoder.decodeSingularBytesField(value: &self._cachedWebCredentials)
      case 14: try decoder.decodeSingularStringField(value: &self._userAgent)
      case 15: try decoder.decodeSingularStringField(value: &self._deviceID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._program {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._platform {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._locale {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._email {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._version {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._applicationVersion {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    }
    if let v = self._publicComputer {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    }
    if let v = self._allowLogonQueueNotifications {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    }
    if let v = self._cachedWebCredentials {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 12)
    }
    if let v = self._userAgent {
      try visitor.visitSingularStringField(value: v, fieldNumber: 14)
    }
    if let v = self._deviceID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _program: String? = nil
  fileprivate var _platform: String? = nil
  fileprivate var _locale: String? = nil
  fileprivate var _email: String? = nil
  fileprivate var _version: String? = nil
  fileprivate var _applicationVersion: Int32? = nil
  fileprivate var _publicComputer: Bool? = nil
  fileprivate var _allowLogonQueueNotifications: Bool? = nil
  fileprivate var _cachedWebCredentials: Data? = nil
  fileprivate var _userAgent: String? = nil
  fileprivate var _deviceID: String? = nil
}

public struct Bgs_Protocol_Authentication_V1_LogonResult: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".LogonResult"

  public var errorCode: UInt32 {
    get {return _storage._errorCode ?? 0}
    set {_uniqueStorage()._errorCode = newValue}
  }
  /// Returns true if `errorCode` has been explicitly set.
  public var hasErrorCode: Bool {return _storage._errorCode != nil}
  /// Clears the value of `errorCode`. Subsequent reads from it will return its default value.
  public mutating func clearErrorCode() {_storage._errorCode = nil}

  public var accountID: Bgs_Protocol_EntityId {
    get {return _storage._accountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._accountID = newValue}
  }
  /// Returns true if `accountID` has been explicitly set.
  public var hasAccountID: Bool {return _storage._accountID != nil}
  /// Clears the value of `accountID`. Subsequent reads from it will return its default value.
  public mutating func clearAccountID() {_storage._accountID = nil}

  public var gameAccountID: [Bgs_Protocol_EntityId] {
    get {return _storage._gameAccountID}
    set {_uniqueStorage()._gameAccountID = newValue}
  }

  public var email: String {
    get {return _storage._email ?? String()}
    set {_uniqueStorage()._email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  public var hasEmail: Bool {return _storage._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  public mutating func clearEmail() {_storage._email = nil}

  public var availableRegion: [UInt32] {
    get {return _storage._availableRegion}
    set {_uniqueStorage()._availableRegion = newValue}
  }

  public var connectedRegion: UInt32 {
    get {return _storage._connectedRegion ?? 0}
    set {_uniqueStorage()._connectedRegion = newValue}
  }
  /// Returns true if `connectedRegion` has been explicitly set.
  public var hasConnectedRegion: Bool {return _storage._connectedRegion != nil}
  /// Clears the value of `connectedRegion`. Subsequent reads from it will return its default value.
  public mutating func clearConnectedRegion() {_storage._connectedRegion = nil}

  public var battleTag: String {
    get {return _storage._battleTag ?? String()}
    set {_uniqueStorage()._battleTag = newValue}
  }
  /// Returns true if `battleTag` has been explicitly set.
  public var hasBattleTag: Bool {return _storage._battleTag != nil}
  /// Clears the value of `battleTag`. Subsequent reads from it will return its default value.
  public mutating func clearBattleTag() {_storage._battleTag = nil}

  public var geoipCountry: String {
    get {return _storage._geoipCountry ?? String()}
    set {_uniqueStorage()._geoipCountry = newValue}
  }
  /// Returns true if `geoipCountry` has been explicitly set.
  public var hasGeoipCountry: Bool {return _storage._geoipCountry != nil}
  /// Clears the value of `geoipCountry`. Subsequent reads from it will return its default value.
  public mutating func clearGeoipCountry() {_storage._geoipCountry = nil}

  public var sessionKey: Data {
    get {return _storage._sessionKey ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._sessionKey = newValue}
  }
  /// Returns true if `sessionKey` has been explicitly set.
  public var hasSessionKey: Bool {return _storage._sessionKey != nil}
  /// Clears the value of `sessionKey`. Subsequent reads from it will return its default value.
  public mutating func clearSessionKey() {_storage._sessionKey = nil}

  public var restrictedMode: Bool {
    get {return _storage._restrictedMode ?? false}
    set {_uniqueStorage()._restrictedMode = newValue}
  }
  /// Returns true if `restrictedMode` has been explicitly set.
  public var hasRestrictedMode: Bool {return _storage._restrictedMode != nil}
  /// Clears the value of `restrictedMode`. Subsequent reads from it will return its default value.
  public mutating func clearRestrictedMode() {_storage._restrictedMode = nil}

  public var clientID: String {
    get {return _storage._clientID ?? String()}
    set {_uniqueStorage()._clientID = newValue}
  }
  /// Returns true if `clientID` has been explicitly set.
  public var hasClientID: Bool {return _storage._clientID != nil}
  /// Clears the value of `clientID`. Subsequent reads from it will return its default value.
  public mutating func clearClientID() {_storage._clientID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._errorCode == nil {return false}
      if let v = _storage._accountID, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._gameAccountID) {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._errorCode)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._accountID)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._gameAccountID)
        case 4: try decoder.decodeSingularStringField(value: &_storage._email)
        case 5: try decoder.decodeRepeatedUInt32Field(value: &_storage._availableRegion)
        case 6: try decoder.decodeSingularUInt32Field(value: &_storage._connectedRegion)
        case 7: try decoder.decodeSingularStringField(value: &_storage._battleTag)
        case 8: try decoder.decodeSingularStringField(value: &_storage._geoipCountry)
        case 9: try decoder.decodeSingularBytesField(value: &_storage._sessionKey)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._restrictedMode)
        case 11: try decoder.decodeSingularStringField(value: &_storage._clientID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._errorCode {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._accountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._gameAccountID.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gameAccountID, fieldNumber: 3)
      }
      if let v = _storage._email {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      }
      if !_storage._availableRegion.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._availableRegion, fieldNumber: 5)
      }
      if let v = _storage._connectedRegion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._battleTag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if let v = _storage._geoipCountry {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if let v = _storage._sessionKey {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 9)
      }
      if let v = _storage._restrictedMode {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      }
      if let v = _storage._clientID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Authentication_V1_GenerateSSOTokenRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GenerateSSOTokenRequest"

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._program)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _program: UInt32? = nil
}

public struct Bgs_Protocol_Authentication_V1_GenerateSSOTokenResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GenerateSSOTokenResponse"

  public var ssoID: Data {
    get {return _ssoID ?? SwiftProtobuf.Internal.emptyData}
    set {_ssoID = newValue}
  }
  /// Returns true if `ssoID` has been explicitly set.
  public var hasSsoID: Bool {return self._ssoID != nil}
  /// Clears the value of `ssoID`. Subsequent reads from it will return its default value.
  public mutating func clearSsoID() {self._ssoID = nil}

  public var ssoSecret: Data {
    get {return _ssoSecret ?? SwiftProtobuf.Internal.emptyData}
    set {_ssoSecret = newValue}
  }
  /// Returns true if `ssoSecret` has been explicitly set.
  public var hasSsoSecret: Bool {return self._ssoSecret != nil}
  /// Clears the value of `ssoSecret`. Subsequent reads from it will return its default value.
  public mutating func clearSsoSecret() {self._ssoSecret = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._ssoID)
      case 2: try decoder.decodeSingularBytesField(value: &self._ssoSecret)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._ssoID {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._ssoSecret {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _ssoID: Data? = nil
  fileprivate var _ssoSecret: Data? = nil
}

public struct Bgs_Protocol_Authentication_V1_LogonUpdateRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".LogonUpdateRequest"

  public var errorCode: UInt32 {
    get {return _errorCode ?? 0}
    set {_errorCode = newValue}
  }
  /// Returns true if `errorCode` has been explicitly set.
  public var hasErrorCode: Bool {return self._errorCode != nil}
  /// Clears the value of `errorCode`. Subsequent reads from it will return its default value.
  public mutating func clearErrorCode() {self._errorCode = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if self._errorCode == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._errorCode)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._errorCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _errorCode: UInt32? = nil
}

public struct Bgs_Protocol_Authentication_V1_LogonQueueUpdateRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".LogonQueueUpdateRequest"

  public var position: UInt32 {
    get {return _position ?? 0}
    set {_position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  public var hasPosition: Bool {return self._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  public mutating func clearPosition() {self._position = nil}

  public var estimatedTime: UInt64 {
    get {return _estimatedTime ?? 0}
    set {_estimatedTime = newValue}
  }
  /// Returns true if `estimatedTime` has been explicitly set.
  public var hasEstimatedTime: Bool {return self._estimatedTime != nil}
  /// Clears the value of `estimatedTime`. Subsequent reads from it will return its default value.
  public mutating func clearEstimatedTime() {self._estimatedTime = nil}

  public var etaDeviationInSec: UInt64 {
    get {return _etaDeviationInSec ?? 0}
    set {_etaDeviationInSec = newValue}
  }
  /// Returns true if `etaDeviationInSec` has been explicitly set.
  public var hasEtaDeviationInSec: Bool {return self._etaDeviationInSec != nil}
  /// Clears the value of `etaDeviationInSec`. Subsequent reads from it will return its default value.
  public mutating func clearEtaDeviationInSec() {self._etaDeviationInSec = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if self._position == nil {return false}
    if self._estimatedTime == nil {return false}
    if self._etaDeviationInSec == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._position)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._estimatedTime)
      case 3: try decoder.decodeSingularUInt64Field(value: &self._etaDeviationInSec)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._position {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._estimatedTime {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    if let v = self._etaDeviationInSec {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _position: UInt32? = nil
  fileprivate var _estimatedTime: UInt64? = nil
  fileprivate var _etaDeviationInSec: UInt64? = nil
}

public struct Bgs_Protocol_Authentication_V1_AccountSettingsNotification: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AccountSettingsNotification"

  public var licenses: [Bgs_Protocol_Account_V1_AccountLicense] = []

  public var isUsingRid: Bool {
    get {return _isUsingRid ?? false}
    set {_isUsingRid = newValue}
  }
  /// Returns true if `isUsingRid` has been explicitly set.
  public var hasIsUsingRid: Bool {return self._isUsingRid != nil}
  /// Clears the value of `isUsingRid`. Subsequent reads from it will return its default value.
  public mutating func clearIsUsingRid() {self._isUsingRid = nil}

  public var isPlayingFromIgr: Bool {
    get {return _isPlayingFromIgr ?? false}
    set {_isPlayingFromIgr = newValue}
  }
  /// Returns true if `isPlayingFromIgr` has been explicitly set.
  public var hasIsPlayingFromIgr: Bool {return self._isPlayingFromIgr != nil}
  /// Clears the value of `isPlayingFromIgr`. Subsequent reads from it will return its default value.
  public mutating func clearIsPlayingFromIgr() {self._isPlayingFromIgr = nil}

  public var canReceiveVoice: Bool {
    get {return _canReceiveVoice ?? false}
    set {_canReceiveVoice = newValue}
  }
  /// Returns true if `canReceiveVoice` has been explicitly set.
  public var hasCanReceiveVoice: Bool {return self._canReceiveVoice != nil}
  /// Clears the value of `canReceiveVoice`. Subsequent reads from it will return its default value.
  public mutating func clearCanReceiveVoice() {self._canReceiveVoice = nil}

  public var canSendVoice: Bool {
    get {return _canSendVoice ?? false}
    set {_canSendVoice = newValue}
  }
  /// Returns true if `canSendVoice` has been explicitly set.
  public var hasCanSendVoice: Bool {return self._canSendVoice != nil}
  /// Clears the value of `canSendVoice`. Subsequent reads from it will return its default value.
  public mutating func clearCanSendVoice() {self._canSendVoice = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.licenses) {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.licenses)
      case 2: try decoder.decodeSingularBoolField(value: &self._isUsingRid)
      case 3: try decoder.decodeSingularBoolField(value: &self._isPlayingFromIgr)
      case 4: try decoder.decodeSingularBoolField(value: &self._canReceiveVoice)
      case 5: try decoder.decodeSingularBoolField(value: &self._canSendVoice)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.licenses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.licenses, fieldNumber: 1)
    }
    if let v = self._isUsingRid {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._isPlayingFromIgr {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._canReceiveVoice {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    }
    if let v = self._canSendVoice {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _isUsingRid: Bool? = nil
  fileprivate var _isPlayingFromIgr: Bool? = nil
  fileprivate var _canReceiveVoice: Bool? = nil
  fileprivate var _canSendVoice: Bool? = nil
}

public struct Bgs_Protocol_Authentication_V1_ServerStateChangeRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ServerStateChangeRequest"

  public var state: UInt32 {
    get {return _state ?? 0}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {self._state = nil}

  public var eventTime: UInt64 {
    get {return _eventTime ?? 0}
    set {_eventTime = newValue}
  }
  /// Returns true if `eventTime` has been explicitly set.
  public var hasEventTime: Bool {return self._eventTime != nil}
  /// Clears the value of `eventTime`. Subsequent reads from it will return its default value.
  public mutating func clearEventTime() {self._eventTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if self._state == nil {return false}
    if self._eventTime == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._state)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._eventTime)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._state {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._eventTime {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _state: UInt32? = nil
  fileprivate var _eventTime: UInt64? = nil
}

public struct Bgs_Protocol_Authentication_V1_VersionInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".VersionInfo"

  public var number: UInt32 {
    get {return _number ?? 0}
    set {_number = newValue}
  }
  /// Returns true if `number` has been explicitly set.
  public var hasNumber: Bool {return self._number != nil}
  /// Clears the value of `number`. Subsequent reads from it will return its default value.
  public mutating func clearNumber() {self._number = nil}

  public var patch: String {
    get {return _patch ?? String()}
    set {_patch = newValue}
  }
  /// Returns true if `patch` has been explicitly set.
  public var hasPatch: Bool {return self._patch != nil}
  /// Clears the value of `patch`. Subsequent reads from it will return its default value.
  public mutating func clearPatch() {self._patch = nil}

  public var isOptional: Bool {
    get {return _isOptional ?? false}
    set {_isOptional = newValue}
  }
  /// Returns true if `isOptional` has been explicitly set.
  public var hasIsOptional: Bool {return self._isOptional != nil}
  /// Clears the value of `isOptional`. Subsequent reads from it will return its default value.
  public mutating func clearIsOptional() {self._isOptional = nil}

  public var kickTime: UInt64 {
    get {return _kickTime ?? 0}
    set {_kickTime = newValue}
  }
  /// Returns true if `kickTime` has been explicitly set.
  public var hasKickTime: Bool {return self._kickTime != nil}
  /// Clears the value of `kickTime`. Subsequent reads from it will return its default value.
  public mutating func clearKickTime() {self._kickTime = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self._number)
      case 2: try decoder.decodeSingularStringField(value: &self._patch)
      case 3: try decoder.decodeSingularBoolField(value: &self._isOptional)
      case 4: try decoder.decodeSingularUInt64Field(value: &self._kickTime)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._number {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    }
    if let v = self._patch {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._isOptional {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._kickTime {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _number: UInt32? = nil
  fileprivate var _patch: String? = nil
  fileprivate var _isOptional: Bool? = nil
  fileprivate var _kickTime: UInt64? = nil
}

public struct Bgs_Protocol_Authentication_V1_VersionInfoNotification: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".VersionInfoNotification"

  public var versionInfo: Bgs_Protocol_Authentication_V1_VersionInfo {
    get {return _storage._versionInfo ?? Bgs_Protocol_Authentication_V1_VersionInfo()}
    set {_uniqueStorage()._versionInfo = newValue}
  }
  /// Returns true if `versionInfo` has been explicitly set.
  public var hasVersionInfo: Bool {return _storage._versionInfo != nil}
  /// Clears the value of `versionInfo`. Subsequent reads from it will return its default value.
  public mutating func clearVersionInfo() {_storage._versionInfo = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._versionInfo)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._versionInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Authentication_V1_MemModuleLoadRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".MemModuleLoadRequest"

  public var handle: Bgs_Protocol_ContentHandle {
    get {return _storage._handle ?? Bgs_Protocol_ContentHandle()}
    set {_uniqueStorage()._handle = newValue}
  }
  /// Returns true if `handle` has been explicitly set.
  public var hasHandle: Bool {return _storage._handle != nil}
  /// Clears the value of `handle`. Subsequent reads from it will return its default value.
  public mutating func clearHandle() {_storage._handle = nil}

  public var key: Data {
    get {return _storage._key ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_storage._key = nil}

  public var input: Data {
    get {return _storage._input ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._input = newValue}
  }
  /// Returns true if `input` has been explicitly set.
  public var hasInput: Bool {return _storage._input != nil}
  /// Clears the value of `input`. Subsequent reads from it will return its default value.
  public mutating func clearInput() {_storage._input = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._handle == nil {return false}
      if _storage._key == nil {return false}
      if _storage._input == nil {return false}
      if let v = _storage._handle, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._handle)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._key)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._input)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._handle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._key {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
      }
      if let v = _storage._input {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Authentication_V1_MemModuleLoadResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".MemModuleLoadResponse"

  public var data: Data {
    get {return _data ?? SwiftProtobuf.Internal.emptyData}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    if self._data == nil {return false}
    return true
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._data)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._data {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _data: Data? = nil
}

public struct Bgs_Protocol_Authentication_V1_SelectGameAccountRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SelectGameAccountRequest"

  public var gameAccountID: Bgs_Protocol_EntityId {
    get {return _storage._gameAccountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._gameAccountID = newValue}
  }
  /// Returns true if `gameAccountID` has been explicitly set.
  public var hasGameAccountID: Bool {return _storage._gameAccountID != nil}
  /// Clears the value of `gameAccountID`. Subsequent reads from it will return its default value.
  public mutating func clearGameAccountID() {_storage._gameAccountID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._gameAccountID == nil {return false}
      if let v = _storage._gameAccountID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._gameAccountID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._gameAccountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Authentication_V1_GameAccountSelectedRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GameAccountSelectedRequest"

  public var result: UInt32 {
    get {return _storage._result ?? 0}
    set {_uniqueStorage()._result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return _storage._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {_storage._result = nil}

  public var gameAccountID: Bgs_Protocol_EntityId {
    get {return _storage._gameAccountID ?? Bgs_Protocol_EntityId()}
    set {_uniqueStorage()._gameAccountID = newValue}
  }
  /// Returns true if `gameAccountID` has been explicitly set.
  public var hasGameAccountID: Bool {return _storage._gameAccountID != nil}
  /// Clears the value of `gameAccountID`. Subsequent reads from it will return its default value.
  public mutating func clearGameAccountID() {_storage._gameAccountID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._result == nil {return false}
      if let v = _storage._gameAccountID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._result)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._gameAccountID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._result {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._gameAccountID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Authentication_V1_GenerateWebCredentialsRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GenerateWebCredentialsRequest"

  public var program: UInt32 {
    get {return _program ?? 0}
    set {_program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return self._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {self._program = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._program)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._program {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _program: UInt32? = nil
}

public struct Bgs_Protocol_Authentication_V1_GenerateWebCredentialsResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GenerateWebCredentialsResponse"

  public var webCredentials: Data {
    get {return _webCredentials ?? SwiftProtobuf.Internal.emptyData}
    set {_webCredentials = newValue}
  }
  /// Returns true if `webCredentials` has been explicitly set.
  public var hasWebCredentials: Bool {return self._webCredentials != nil}
  /// Clears the value of `webCredentials`. Subsequent reads from it will return its default value.
  public mutating func clearWebCredentials() {self._webCredentials = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._webCredentials)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._webCredentials {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _webCredentials: Data? = nil
}

public struct Bgs_Protocol_Authentication_V1_VerifyWebCredentialsRequest: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".VerifyWebCredentialsRequest"

  public var webCredentials: Data {
    get {return _webCredentials ?? SwiftProtobuf.Internal.emptyData}
    set {_webCredentials = newValue}
  }
  /// Returns true if `webCredentials` has been explicitly set.
  public var hasWebCredentials: Bool {return self._webCredentials != nil}
  /// Clears the value of `webCredentials`. Subsequent reads from it will return its default value.
  public mutating func clearWebCredentials() {self._webCredentials = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._webCredentials)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._webCredentials {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _webCredentials: Data? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.authentication.v1"

extension Bgs_Protocol_Authentication_V1_ModuleLoadRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "module_handle"),
    2: .same(proto: "message"),
  ]

  fileprivate class _StorageClass {
    var _moduleHandle: Bgs_Protocol_ContentHandle? = nil
    var _message: Data? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _moduleHandle = source._moduleHandle
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_ModuleLoadRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._moduleHandle != other_storage._moduleHandle {return false}
        if _storage._message != other_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_ModuleNotification: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "module_id"),
    3: .same(proto: "result"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_ModuleNotification) -> Bool {
    if self._moduleID != other._moduleID {return false}
    if self._result != other._result {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_ModuleMessageRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "module_id"),
    2: .same(proto: "message"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_ModuleMessageRequest) -> Bool {
    if self._moduleID != other._moduleID {return false}
    if self._message != other._message {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_LogonRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "program"),
    2: .same(proto: "platform"),
    3: .same(proto: "locale"),
    4: .same(proto: "email"),
    5: .same(proto: "version"),
    6: .standard(proto: "application_version"),
    7: .standard(proto: "public_computer"),
    10: .standard(proto: "allow_logon_queue_notifications"),
    12: .standard(proto: "cached_web_credentials"),
    14: .standard(proto: "user_agent"),
    15: .standard(proto: "device_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_LogonRequest) -> Bool {
    if self._program != other._program {return false}
    if self._platform != other._platform {return false}
    if self._locale != other._locale {return false}
    if self._email != other._email {return false}
    if self._version != other._version {return false}
    if self._applicationVersion != other._applicationVersion {return false}
    if self._publicComputer != other._publicComputer {return false}
    if self._allowLogonQueueNotifications != other._allowLogonQueueNotifications {return false}
    if self._cachedWebCredentials != other._cachedWebCredentials {return false}
    if self._userAgent != other._userAgent {return false}
    if self._deviceID != other._deviceID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_LogonResult: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_code"),
    2: .standard(proto: "account_id"),
    3: .standard(proto: "game_account_id"),
    4: .same(proto: "email"),
    5: .standard(proto: "available_region"),
    6: .standard(proto: "connected_region"),
    7: .standard(proto: "battle_tag"),
    8: .standard(proto: "geoip_country"),
    9: .standard(proto: "session_key"),
    10: .standard(proto: "restricted_mode"),
    11: .standard(proto: "client_id"),
  ]

  fileprivate class _StorageClass {
    var _errorCode: UInt32? = nil
    var _accountID: Bgs_Protocol_EntityId? = nil
    var _gameAccountID: [Bgs_Protocol_EntityId] = []
    var _email: String? = nil
    var _availableRegion: [UInt32] = []
    var _connectedRegion: UInt32? = nil
    var _battleTag: String? = nil
    var _geoipCountry: String? = nil
    var _sessionKey: Data? = nil
    var _restrictedMode: Bool? = nil
    var _clientID: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _errorCode = source._errorCode
      _accountID = source._accountID
      _gameAccountID = source._gameAccountID
      _email = source._email
      _availableRegion = source._availableRegion
      _connectedRegion = source._connectedRegion
      _battleTag = source._battleTag
      _geoipCountry = source._geoipCountry
      _sessionKey = source._sessionKey
      _restrictedMode = source._restrictedMode
      _clientID = source._clientID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_LogonResult) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._errorCode != other_storage._errorCode {return false}
        if _storage._accountID != other_storage._accountID {return false}
        if _storage._gameAccountID != other_storage._gameAccountID {return false}
        if _storage._email != other_storage._email {return false}
        if _storage._availableRegion != other_storage._availableRegion {return false}
        if _storage._connectedRegion != other_storage._connectedRegion {return false}
        if _storage._battleTag != other_storage._battleTag {return false}
        if _storage._geoipCountry != other_storage._geoipCountry {return false}
        if _storage._sessionKey != other_storage._sessionKey {return false}
        if _storage._restrictedMode != other_storage._restrictedMode {return false}
        if _storage._clientID != other_storage._clientID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_GenerateSSOTokenRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "program"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_GenerateSSOTokenRequest) -> Bool {
    if self._program != other._program {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_GenerateSSOTokenResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sso_id"),
    2: .standard(proto: "sso_secret"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_GenerateSSOTokenResponse) -> Bool {
    if self._ssoID != other._ssoID {return false}
    if self._ssoSecret != other._ssoSecret {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_LogonUpdateRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_code"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_LogonUpdateRequest) -> Bool {
    if self._errorCode != other._errorCode {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_LogonQueueUpdateRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "position"),
    2: .standard(proto: "estimated_time"),
    3: .standard(proto: "eta_deviation_in_sec"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_LogonQueueUpdateRequest) -> Bool {
    if self._position != other._position {return false}
    if self._estimatedTime != other._estimatedTime {return false}
    if self._etaDeviationInSec != other._etaDeviationInSec {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_AccountSettingsNotification: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "licenses"),
    2: .standard(proto: "is_using_rid"),
    3: .standard(proto: "is_playing_from_igr"),
    4: .standard(proto: "can_receive_voice"),
    5: .standard(proto: "can_send_voice"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_AccountSettingsNotification) -> Bool {
    if self.licenses != other.licenses {return false}
    if self._isUsingRid != other._isUsingRid {return false}
    if self._isPlayingFromIgr != other._isPlayingFromIgr {return false}
    if self._canReceiveVoice != other._canReceiveVoice {return false}
    if self._canSendVoice != other._canSendVoice {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_ServerStateChangeRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "event_time"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_ServerStateChangeRequest) -> Bool {
    if self._state != other._state {return false}
    if self._eventTime != other._eventTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_VersionInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "number"),
    2: .same(proto: "patch"),
    3: .standard(proto: "is_optional"),
    4: .standard(proto: "kick_time"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_VersionInfo) -> Bool {
    if self._number != other._number {return false}
    if self._patch != other._patch {return false}
    if self._isOptional != other._isOptional {return false}
    if self._kickTime != other._kickTime {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_VersionInfoNotification: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "version_info"),
  ]

  fileprivate class _StorageClass {
    var _versionInfo: Bgs_Protocol_Authentication_V1_VersionInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _versionInfo = source._versionInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_VersionInfoNotification) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._versionInfo != other_storage._versionInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_MemModuleLoadRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "handle"),
    2: .same(proto: "key"),
    3: .same(proto: "input"),
  ]

  fileprivate class _StorageClass {
    var _handle: Bgs_Protocol_ContentHandle? = nil
    var _key: Data? = nil
    var _input: Data? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _handle = source._handle
      _key = source._key
      _input = source._input
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_MemModuleLoadRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._handle != other_storage._handle {return false}
        if _storage._key != other_storage._key {return false}
        if _storage._input != other_storage._input {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_MemModuleLoadResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_MemModuleLoadResponse) -> Bool {
    if self._data != other._data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_SelectGameAccountRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "game_account_id"),
  ]

  fileprivate class _StorageClass {
    var _gameAccountID: Bgs_Protocol_EntityId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gameAccountID = source._gameAccountID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_SelectGameAccountRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._gameAccountID != other_storage._gameAccountID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_GameAccountSelectedRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "game_account_id"),
  ]

  fileprivate class _StorageClass {
    var _result: UInt32? = nil
    var _gameAccountID: Bgs_Protocol_EntityId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _result = source._result
      _gameAccountID = source._gameAccountID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_GameAccountSelectedRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._result != other_storage._result {return false}
        if _storage._gameAccountID != other_storage._gameAccountID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_GenerateWebCredentialsRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "program"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_GenerateWebCredentialsRequest) -> Bool {
    if self._program != other._program {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_GenerateWebCredentialsResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "web_credentials"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_GenerateWebCredentialsResponse) -> Bool {
    if self._webCredentials != other._webCredentials {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Authentication_V1_VerifyWebCredentialsRequest: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "web_credentials"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Authentication_V1_VerifyWebCredentialsRequest) -> Bool {
    if self._webCredentials != other._webCredentials {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
