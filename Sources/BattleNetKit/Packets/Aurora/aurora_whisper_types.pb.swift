// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: aurora/whisper_types.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Bgs_Protocol_Whisper_V1_Whisper: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Whisper"

  public var senderID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._senderID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._senderID = newValue}
  }
  /// Returns true if `senderID` has been explicitly set.
  public var hasSenderID: Bool {return _storage._senderID != nil}
  /// Clears the value of `senderID`. Subsequent reads from it will return its default value.
  public mutating func clearSenderID() {_storage._senderID = nil}

  public var recipientID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._recipientID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._recipientID = newValue}
  }
  /// Returns true if `recipientID` has been explicitly set.
  public var hasRecipientID: Bool {return _storage._recipientID != nil}
  /// Clears the value of `recipientID`. Subsequent reads from it will return its default value.
  public mutating func clearRecipientID() {_storage._recipientID = nil}

  public var content: String {
    get {return _storage._content ?? String()}
    set {_uniqueStorage()._content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return _storage._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {_storage._content = nil}

  public var embed: [Bgs_Protocol_EmbedInfo] {
    get {return _storage._embed}
    set {_uniqueStorage()._embed = newValue}
  }

  public var creationTime: UInt64 {
    get {return _storage._creationTime ?? 0}
    set {_uniqueStorage()._creationTime = newValue}
  }
  /// Returns true if `creationTime` has been explicitly set.
  public var hasCreationTime: Bool {return _storage._creationTime != nil}
  /// Clears the value of `creationTime`. Subsequent reads from it will return its default value.
  public mutating func clearCreationTime() {_storage._creationTime = nil}

  public var program: UInt32 {
    get {return _storage._program ?? 0}
    set {_uniqueStorage()._program = newValue}
  }
  /// Returns true if `program` has been explicitly set.
  public var hasProgram: Bool {return _storage._program != nil}
  /// Clears the value of `program`. Subsequent reads from it will return its default value.
  public mutating func clearProgram() {_storage._program = nil}

  public var messageID: Bgs_Protocol_MessageId {
    get {return _storage._messageID ?? Bgs_Protocol_MessageId()}
    set {_uniqueStorage()._messageID = newValue}
  }
  /// Returns true if `messageID` has been explicitly set.
  public var hasMessageID: Bool {return _storage._messageID != nil}
  /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
  public mutating func clearMessageID() {_storage._messageID = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._senderID, !v.isInitialized {return false}
      if let v = _storage._recipientID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._senderID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._recipientID)
        case 3: try decoder.decodeSingularStringField(value: &_storage._content)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._embed)
        case 6: try decoder.decodeSingularUInt64Field(value: &_storage._creationTime)
        case 7: try decoder.decodeSingularFixed32Field(value: &_storage._program)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._messageID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._senderID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._recipientID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._content {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if !_storage._embed.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._embed, fieldNumber: 4)
      }
      if let v = _storage._creationTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
      }
      if let v = _storage._program {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 7)
      }
      if let v = _storage._messageID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Whisper_V1_WhisperView: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".WhisperView"

  public var senderID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._senderID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._senderID = newValue}
  }
  /// Returns true if `senderID` has been explicitly set.
  public var hasSenderID: Bool {return _storage._senderID != nil}
  /// Clears the value of `senderID`. Subsequent reads from it will return its default value.
  public mutating func clearSenderID() {_storage._senderID = nil}

  public var viewMarker: Bgs_Protocol_ViewMarker {
    get {return _storage._viewMarker ?? Bgs_Protocol_ViewMarker()}
    set {_uniqueStorage()._viewMarker = newValue}
  }
  /// Returns true if `viewMarker` has been explicitly set.
  public var hasViewMarker: Bool {return _storage._viewMarker != nil}
  /// Clears the value of `viewMarker`. Subsequent reads from it will return its default value.
  public mutating func clearViewMarker() {_storage._viewMarker = nil}

  public var senderBattleTag: String {
    get {return _storage._senderBattleTag ?? String()}
    set {_uniqueStorage()._senderBattleTag = newValue}
  }
  /// Returns true if `senderBattleTag` has been explicitly set.
  public var hasSenderBattleTag: Bool {return _storage._senderBattleTag != nil}
  /// Clears the value of `senderBattleTag`. Subsequent reads from it will return its default value.
  public mutating func clearSenderBattleTag() {_storage._senderBattleTag = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._senderID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._senderID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._viewMarker)
        case 3: try decoder.decodeSingularStringField(value: &_storage._senderBattleTag)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._senderID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._viewMarker {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._senderBattleTag {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Bgs_Protocol_Whisper_V1_SendOptions: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".SendOptions"

  public var targetID: Bgs_Protocol_Account_V1_AccountId {
    get {return _storage._targetID ?? Bgs_Protocol_Account_V1_AccountId()}
    set {_uniqueStorage()._targetID = newValue}
  }
  /// Returns true if `targetID` has been explicitly set.
  public var hasTargetID: Bool {return _storage._targetID != nil}
  /// Clears the value of `targetID`. Subsequent reads from it will return its default value.
  public mutating func clearTargetID() {_storage._targetID = nil}

  public var content: String {
    get {return _storage._content ?? String()}
    set {_uniqueStorage()._content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return _storage._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {_storage._content = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._targetID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._targetID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._content)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._targetID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._content {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bgs.protocol.whisper.v1"

extension Bgs_Protocol_Whisper_V1_Whisper: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_id"),
    2: .standard(proto: "recipient_id"),
    3: .same(proto: "content"),
    4: .same(proto: "embed"),
    6: .standard(proto: "creation_time"),
    7: .same(proto: "program"),
    8: .standard(proto: "message_id"),
  ]

  fileprivate class _StorageClass {
    var _senderID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _recipientID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _content: String? = nil
    var _embed: [Bgs_Protocol_EmbedInfo] = []
    var _creationTime: UInt64? = nil
    var _program: UInt32? = nil
    var _messageID: Bgs_Protocol_MessageId? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _senderID = source._senderID
      _recipientID = source._recipientID
      _content = source._content
      _embed = source._embed
      _creationTime = source._creationTime
      _program = source._program
      _messageID = source._messageID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Whisper_V1_Whisper) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._senderID != other_storage._senderID {return false}
        if _storage._recipientID != other_storage._recipientID {return false}
        if _storage._content != other_storage._content {return false}
        if _storage._embed != other_storage._embed {return false}
        if _storage._creationTime != other_storage._creationTime {return false}
        if _storage._program != other_storage._program {return false}
        if _storage._messageID != other_storage._messageID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Whisper_V1_WhisperView: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sender_id"),
    2: .standard(proto: "view_marker"),
    3: .standard(proto: "sender_battle_tag"),
  ]

  fileprivate class _StorageClass {
    var _senderID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _viewMarker: Bgs_Protocol_ViewMarker? = nil
    var _senderBattleTag: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _senderID = source._senderID
      _viewMarker = source._viewMarker
      _senderBattleTag = source._senderBattleTag
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Whisper_V1_WhisperView) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._senderID != other_storage._senderID {return false}
        if _storage._viewMarker != other_storage._viewMarker {return false}
        if _storage._senderBattleTag != other_storage._senderBattleTag {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bgs_Protocol_Whisper_V1_SendOptions: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "target_id"),
    2: .same(proto: "content"),
  ]

  fileprivate class _StorageClass {
    var _targetID: Bgs_Protocol_Account_V1_AccountId? = nil
    var _content: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _targetID = source._targetID
      _content = source._content
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bgs_Protocol_Whisper_V1_SendOptions) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._targetID != other_storage._targetID {return false}
        if _storage._content != other_storage._content {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
