// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ConnectResponse.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct ConnectResponse: SwiftProtobuf.Message {
  static let protoMessageName: String = "ConnectResponse"

  var serverID: ProcessId {
    get {return _storage._serverID ?? ProcessId()}
    set {_uniqueStorage()._serverID = newValue}
  }
  /// Returns true if `serverID` has been explicitly set.
  var hasServerID: Bool {return _storage._serverID != nil}
  /// Clears the value of `serverID`. Subsequent reads from it will return its default value.
  mutating func clearServerID() {_storage._serverID = nil}

  var clientID: ProcessId {
    get {return _storage._clientID ?? ProcessId()}
    set {_uniqueStorage()._clientID = newValue}
  }
  /// Returns true if `clientID` has been explicitly set.
  var hasClientID: Bool {return _storage._clientID != nil}
  /// Clears the value of `clientID`. Subsequent reads from it will return its default value.
  mutating func clearClientID() {_storage._clientID = nil}

  var bindResult: UInt32 {
    get {return _storage._bindResult ?? 0}
    set {_uniqueStorage()._bindResult = newValue}
  }
  /// Returns true if `bindResult` has been explicitly set.
  var hasBindResult: Bool {return _storage._bindResult != nil}
  /// Clears the value of `bindResult`. Subsequent reads from it will return its default value.
  mutating func clearBindResult() {_storage._bindResult = nil}

  var bindResponse: BindResponse {
    get {return _storage._bindResponse ?? BindResponse()}
    set {_uniqueStorage()._bindResponse = newValue}
  }
  /// Returns true if `bindResponse` has been explicitly set.
  var hasBindResponse: Bool {return _storage._bindResponse != nil}
  /// Clears the value of `bindResponse`. Subsequent reads from it will return its default value.
  mutating func clearBindResponse() {_storage._bindResponse = nil}

  var serverTime: UInt64 {
    get {return _storage._serverTime ?? 0}
    set {_uniqueStorage()._serverTime = newValue}
  }
  /// Returns true if `serverTime` has been explicitly set.
  var hasServerTime: Bool {return _storage._serverTime != nil}
  /// Clears the value of `serverTime`. Subsequent reads from it will return its default value.
  mutating func clearServerTime() {_storage._serverTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._serverID == nil {return false}
      if let v = _storage._serverID, !v.isInitialized {return false}
      if let v = _storage._clientID, !v.isInitialized {return false}
      return true
    }
  }

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._serverID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._clientID)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._bindResult)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._bindResponse)
        case 6: try decoder.decodeSingularUInt64Field(value: &_storage._serverTime)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._serverID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._clientID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._bindResult {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._bindResponse {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._serverTime {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ConnectResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "server_id"),
    2: .standard(proto: "client_id"),
    3: .standard(proto: "bind_result"),
    4: .standard(proto: "bind_response"),
    6: .standard(proto: "server_time"),
  ]

  fileprivate class _StorageClass {
    var _serverID: ProcessId? = nil
    var _clientID: ProcessId? = nil
    var _bindResult: UInt32? = nil
    var _bindResponse: BindResponse? = nil
    var _serverTime: UInt64? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _serverID = source._serverID
      _clientID = source._clientID
      _bindResult = source._bindResult
      _bindResponse = source._bindResponse
      _serverTime = source._serverTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: ConnectResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._serverID != other_storage._serverID {return false}
        if _storage._clientID != other_storage._clientID {return false}
        if _storage._bindResult != other_storage._bindResult {return false}
        if _storage._bindResponse != other_storage._bindResponse {return false}
        if _storage._serverTime != other_storage._serverTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
