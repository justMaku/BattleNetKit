import "aurora/api/client/v2/channel_types.proto";
import "aurora/rpc_types.proto";
import "aurora/message_types.proto";
import "aurora/invitation_types.proto";
import "aurora/voice_types.proto";

package blizzard.protocol.channel.v2;

option cc_generic_services = false;

message CreateChannelRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.CreateChannelOptions options = 2;
}

message DissolveChannelRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
}

message GetChannelRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	optional bool fetch_attributes = 5;
	optional bool fetch_members = 6;
	optional bool fetch_invitations = 7;
	optional bool fetch_roles = 8;
}

message GetChannelResponse {
	optional .blizzard.protocol.channel.v2.Channel channel = 1;
}

message GetPublicChannelTypesRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.GetPublicChannelTypesOptions options = 2;
	optional uint64 continuation = 3;
}

message GetPublicChannelTypesResponse {
	repeated .blizzard.protocol.channel.v2.PublicChannelType channel = 1;
	optional uint64 continuation = 2;
}

message FindChannelRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.FindChannelOptions options = 2;
}

message SubscribeRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
}

message SubscribeResponse {
	optional .blizzard.protocol.channel.v2.Channel channel = 1;
}

message UnsubscribeRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
}

message SetAttributeRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	repeated .blizzard.protocol.v2.Attribute attribute = 3;
}

message SetPrivacyLevelRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	optional .blizzard.protocol.channel.v2.PrivacyLevel privacy_level = 3 [default = PRIVACY_LEVEL_OPEN];
}

message SendMessageRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	optional .blizzard.protocol.channel.v2.SendMessageOptions options = 3;
}

message SetTypingIndicatorRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	optional .blizzard.protocol.TypingIndicator action = 3 [default = TYPING_START];
}

message JoinRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	optional .blizzard.protocol.channel.v2.CreateMemberOptions member = 3;
}

message LeaveRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
}

message KickRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	optional .blizzard.protocol.account.v1.GameAccountHandle target_id = 3;
}

message SetMemberAttributeRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	optional .blizzard.protocol.channel.v2.AttributeAssignment assignment = 3;
}

message AssignRoleRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	optional .blizzard.protocol.channel.v2.RoleAssignment assignment = 3;
}

message UnassignRoleRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	optional .blizzard.protocol.channel.v2.RoleAssignment assignment = 3;
}

message SendInvitationRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.SendInvitationOptions options = 2;
}

message AcceptInvitationRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	optional fixed64 invitation_id = 3;
}

message DeclineInvitationRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	optional fixed64 invitation_id = 3;
}

message RevokeInvitationRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
	optional fixed64 invitation_id = 3;
}

message SendSuggestionRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.SendSuggestionOptions options = 2;
}

message GetJoinVoiceTokenRequest {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 2;
}

message GetJoinVoiceTokenResponse {
	optional string channel_uri = 1;
	optional .blizzard.protocol.VoiceCredentials credentials = 2;
}

message MemberAddedNotification {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.account.v1.GameAccountHandle subscriber_id = 2;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 3;
	optional .blizzard.protocol.channel.v2.Member member = 4;
}

message MemberRemovedNotification {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.account.v1.GameAccountHandle subscriber_id = 2;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 3;
	optional .blizzard.protocol.account.v1.GameAccountHandle member_id = 4;
	optional uint32 reason = 5;
}

message MemberAttributeChangedNotification {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.account.v1.GameAccountHandle subscriber_id = 2;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 3;
	optional .blizzard.protocol.channel.v2.AttributeAssignment assignment = 4;
}

message MemberRoleChangedNotification {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.account.v1.GameAccountHandle subscriber_id = 2;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 3;
	repeated .blizzard.protocol.channel.v2.RoleAssignment assignment = 4;
}

message AttributeChangedNotification {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.account.v1.GameAccountHandle subscriber_id = 2;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 3;
	repeated .blizzard.protocol.v2.Attribute attribute = 4;
}

message PrivacyLevelChangedNotification {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.account.v1.GameAccountHandle subscriber_id = 2;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 3;
	optional .blizzard.protocol.channel.v2.PrivacyLevel privacy_level = 4 [default = PRIVACY_LEVEL_OPEN];
}

message SendMessageNotification {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.account.v1.GameAccountHandle subscriber_id = 2;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 3;
	optional .blizzard.protocol.channel.v2.ChannelMessage message = 4;
}

message TypingIndicatorNotification {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.account.v1.GameAccountHandle subscriber_id = 2;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 3;
	optional .blizzard.protocol.account.v1.GameAccountHandle author_id = 4;
	optional uint64 epoch = 5;
	optional .blizzard.protocol.TypingIndicator action = 6 [default = TYPING_START];
}

message InvitationAddedNotification {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.account.v1.GameAccountHandle subscriber_id = 2;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 3;
	optional .blizzard.protocol.channel.v2.ChannelInvitation invitation = 4;
}

message InvitationRemovedNotification {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.account.v1.GameAccountHandle subscriber_id = 2;
	optional .blizzard.protocol.channel.v2.ChannelId channel_id = 3;
	optional fixed64 invitation_id = 4;
	optional .blizzard.protocol.InvitationRemovedReason reason = 5 [default = INVITATION_REMOVED_REASON_ACCEPTED];
}

message SuggestionAddedNotification {
	optional .blizzard.protocol.account.v1.GameAccountHandle agent_id = 1;
	optional .blizzard.protocol.account.v1.GameAccountHandle subscriber_id = 2;
	optional .blizzard.protocol.channel.v2.Suggestion suggestion = 3;
}

service ChannelService {
	option (service_options).descriptor_name = "bnet.protocol.channel.v2.ChannelService";
	option (service_options).shard_name = "channel";
	option (sdk_service_options).outbound = true;
	rpc CreateChannel (.blizzard.protocol.channel.v2.CreateChannelRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 2;
	}
	rpc DissolveChannel (.blizzard.protocol.channel.v2.DissolveChannelRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 3;
	}
	rpc GetChannel (.blizzard.protocol.channel.v2.GetChannelRequest) returns (.blizzard.protocol.channel.v2.GetChannelResponse) {
		option (method_options).id = 4;
	}
	rpc GetPublicChannelTypes (.blizzard.protocol.channel.v2.GetPublicChannelTypesRequest) returns (.blizzard.protocol.channel.v2.GetPublicChannelTypesResponse) {
		option (method_options).id = 5;
	}
	rpc FindChannel (.blizzard.protocol.channel.v2.FindChannelRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 6;
	}
	rpc Subscribe (.blizzard.protocol.channel.v2.SubscribeRequest) returns (.blizzard.protocol.channel.v2.SubscribeResponse) {
		option (method_options).id = 10;
	}
	rpc Unsubscribe (.blizzard.protocol.channel.v2.UnsubscribeRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 11;
	}
	rpc SetAttribute (.blizzard.protocol.channel.v2.SetAttributeRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 21;
	}
	rpc SetPrivacyLevel (.blizzard.protocol.channel.v2.SetPrivacyLevelRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 22;
	}
	rpc SendMessage (.blizzard.protocol.channel.v2.SendMessageRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 23;
	}
	rpc SetTypingIndicator (.blizzard.protocol.channel.v2.SetTypingIndicatorRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 24;
	}
	rpc Join (.blizzard.protocol.channel.v2.JoinRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 30;
	}
	rpc Leave (.blizzard.protocol.channel.v2.LeaveRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 31;
	}
	rpc Kick (.blizzard.protocol.channel.v2.KickRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 32;
	}
	rpc SetMemberAttribute (.blizzard.protocol.channel.v2.SetMemberAttributeRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 40;
	}
	rpc AssignRole (.blizzard.protocol.channel.v2.AssignRoleRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 41;
	}
	rpc UnassignRole (.blizzard.protocol.channel.v2.UnassignRoleRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 42;
	}
	rpc SendInvitation (.blizzard.protocol.channel.v2.SendInvitationRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 50;
	}
	rpc AcceptInvitation (.blizzard.protocol.channel.v2.AcceptInvitationRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 51;
	}
	rpc DeclineInvitation (.blizzard.protocol.channel.v2.DeclineInvitationRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 52;
	}
	rpc RevokeInvitation (.blizzard.protocol.channel.v2.RevokeInvitationRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 53;
	}
	rpc SendSuggestion (.blizzard.protocol.channel.v2.SendSuggestionRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 60;
	}
	rpc GetJoinVoiceToken (.blizzard.protocol.channel.v2.GetJoinVoiceTokenRequest) returns (.blizzard.protocol.channel.v2.GetJoinVoiceTokenResponse) {
		option (method_options).id = 70;
	}
}

service ChannelListener {
	option (service_options).descriptor_name = "bnet.protocol.channel.v2.ChannelListener";
	option (sdk_service_options).inbound = true;
	rpc OnMemberAdded (.blizzard.protocol.channel.v2.MemberAddedNotification) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 3;
	}
	rpc OnMemberRemoved (.blizzard.protocol.channel.v2.MemberRemovedNotification) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 4;
	}
	rpc OnMemberAttributeChanged (.blizzard.protocol.channel.v2.MemberAttributeChangedNotification) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 5;
	}
	rpc OnMemberRoleChanged (.blizzard.protocol.channel.v2.MemberRoleChangedNotification) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 6;
	}
	rpc OnSendMessage (.blizzard.protocol.channel.v2.SendMessageNotification) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 10;
	}
	rpc OnTypingIndicator (.blizzard.protocol.channel.v2.TypingIndicatorNotification) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 11;
	}
	rpc OnAttributeChanged (.blizzard.protocol.channel.v2.AttributeChangedNotification) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 16;
	}
	rpc OnPrivacyLevelChanged (.blizzard.protocol.channel.v2.PrivacyLevelChangedNotification) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 17;
	}
	rpc OnInvitationAdded (.blizzard.protocol.channel.v2.InvitationAddedNotification) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 18;
	}
	rpc OnInvitationRemoved (.blizzard.protocol.channel.v2.InvitationRemovedNotification) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 19;
	}
	rpc OnSuggestionAdded (.blizzard.protocol.channel.v2.SuggestionAddedNotification) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 20;
	}
}

