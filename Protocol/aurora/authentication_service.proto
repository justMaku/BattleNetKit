import "aurora/account_types.proto";
import "aurora/content_handle_types.proto";
import "aurora/entity_types.proto";
import "aurora/rpc_types.proto";

package blizzard.protocol.authentication.v1;

option cc_generic_services = false;

message ModuleLoadRequest {
	required .blizzard.protocol.ContentHandle module_handle = 1;
	optional bytes message = 2;
}

message ModuleNotification {
	optional int32 module_id = 2;
	optional uint32 result = 3;
}

message ModuleMessageRequest {
	required int32 module_id = 1;
	optional bytes message = 2;
}

message LogonRequest {
	optional string program = 1;
	optional string platform = 2;
	optional string locale = 3;
	optional string email = 4;
	optional string version = 5;
	optional int32 application_version = 6;
	optional bool public_computer = 7;
	optional bool allow_logon_queue_notifications = 10 [default = false];
	optional bytes cached_web_credentials = 12;
	optional string user_agent = 14;
	optional string device_id = 15;
}

message LogonResult {
	required uint32 error_code = 1;
	optional .blizzard.protocol.EntityId account_id = 2;
	repeated .blizzard.protocol.EntityId game_account_id = 3;
	optional string email = 4;
	repeated uint32 available_region = 5;
	optional uint32 connected_region = 6;
	optional string battle_tag = 7;
	optional string geoip_country = 8;
	optional bytes session_key = 9;
	optional bool restricted_mode = 10;
	optional string client_id = 11;
}

message GenerateSSOTokenRequest {
	optional fixed32 program = 1;
}

message GenerateSSOTokenResponse {
	optional bytes sso_id = 1;
	optional bytes sso_secret = 2;
}

message LogonUpdateRequest {
	required uint32 error_code = 1;
}

message LogonQueueUpdateRequest {
	required uint32 position = 1;
	required uint64 estimated_time = 2;
	required uint64 eta_deviation_in_sec = 3;
}

message AccountSettingsNotification {
	repeated .blizzard.protocol.account.v1.AccountLicense licenses = 1;
	optional bool is_using_rid = 2;
	optional bool is_playing_from_igr = 3;
	optional bool can_receive_voice = 4;
	optional bool can_send_voice = 5;
}

message ServerStateChangeRequest {
	required uint32 state = 1;
	required uint64 event_time = 2;
}

message VersionInfo {
	optional uint32 number = 1;
	optional string patch = 2;
	optional bool is_optional = 3;
	optional uint64 kick_time = 4;
}

message VersionInfoNotification {
	optional .blizzard.protocol.authentication.v1.VersionInfo version_info = 1;
}

message MemModuleLoadRequest {
	required .blizzard.protocol.ContentHandle handle = 1;
	required bytes key = 2;
	required bytes input = 3;
}

message MemModuleLoadResponse {
	required bytes data = 1;
}

message SelectGameAccountRequest {
	required .blizzard.protocol.EntityId game_account_id = 1;
}

message GameAccountSelectedRequest {
	required uint32 result = 1;
	optional .blizzard.protocol.EntityId game_account_id = 2;
}

message GenerateWebCredentialsRequest {
	optional fixed32 program = 1;
}

message GenerateWebCredentialsResponse {
	optional bytes web_credentials = 1;
}

message VerifyWebCredentialsRequest {
	optional bytes web_credentials = 1;
}

service AuthenticationListener {
	option (service_options).descriptor_name = "bnet.protocol.authentication.AuthenticationClient";
	option (sdk_service_options).inbound = true;
	rpc OnModuleLoad (.blizzard.protocol.authentication.v1.ModuleLoadRequest) returns (.blizzard.protocol.NO_RESPONSE) {
		option deprecated = true;
		option (method_options).id = 1;
	}
	rpc OnModuleMessage (.blizzard.protocol.authentication.v1.ModuleMessageRequest) returns (.blizzard.protocol.NoData) {
		option deprecated = true;
		option (method_options).id = 2;
	}
	rpc OnServerStateChange (.blizzard.protocol.authentication.v1.ServerStateChangeRequest) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 4;
	}
	rpc OnLogonComplete (.blizzard.protocol.authentication.v1.LogonResult) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 5;
	}
	rpc OnMemModuleLoad (.blizzard.protocol.authentication.v1.MemModuleLoadRequest) returns (.blizzard.protocol.authentication.v1.MemModuleLoadResponse) {
		option (method_options).id = 6;
	}
	rpc OnLogonUpdate (.blizzard.protocol.authentication.v1.LogonUpdateRequest) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 10;
	}
	rpc OnVersionInfoUpdated (.blizzard.protocol.authentication.v1.VersionInfoNotification) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 11;
	}
	rpc OnLogonQueueUpdate (.blizzard.protocol.authentication.v1.LogonQueueUpdateRequest) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 12;
	}
	rpc OnLogonQueueEnd (.blizzard.protocol.NoData) returns (.blizzard.protocol.NO_RESPONSE) {
		option (method_options).id = 13;
	}
	rpc OnGameAccountSelected (.blizzard.protocol.authentication.v1.GameAccountSelectedRequest) returns (.blizzard.protocol.NO_RESPONSE) {
		option deprecated = true;
		option (method_options).id = 14;
	}
}

service AuthenticationService {
	option (service_options).descriptor_name = "bnet.protocol.authentication.AuthenticationServer";
	option (service_options).shard_name = "authentication";
	option (sdk_service_options).outbound = true;
	rpc Logon (.blizzard.protocol.authentication.v1.LogonRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 1;
	}
	rpc ModuleNotify (.blizzard.protocol.authentication.v1.ModuleNotification) returns (.blizzard.protocol.NoData) {
		option deprecated = true;
		option (method_options).id = 2;
	}
	rpc ModuleMessage (.blizzard.protocol.authentication.v1.ModuleMessageRequest) returns (.blizzard.protocol.NoData) {
		option deprecated = true;
		option (method_options).id = 3;
	}
	rpc SelectGameAccount_DEPRECATED (.blizzard.protocol.EntityId) returns (.blizzard.protocol.NoData) {
		option deprecated = true;
		option (method_options).id = 4;
	}
	rpc GenerateSSOToken (.blizzard.protocol.authentication.v1.GenerateSSOTokenRequest) returns (.blizzard.protocol.authentication.v1.GenerateSSOTokenResponse) {
		option (method_options).id = 5;
	}
	rpc SelectGameAccount (.blizzard.protocol.authentication.v1.SelectGameAccountRequest) returns (.blizzard.protocol.NoData) {
		option deprecated = true;
		option (method_options).id = 6;
	}
	rpc VerifyWebCredentials (.blizzard.protocol.authentication.v1.VerifyWebCredentialsRequest) returns (.blizzard.protocol.NoData) {
		option (method_options).id = 7;
	}
	rpc GenerateWebCredentials (.blizzard.protocol.authentication.v1.GenerateWebCredentialsRequest) returns (.blizzard.protocol.authentication.v1.GenerateWebCredentialsResponse) {
		option (method_options).id = 8;
	}
}

